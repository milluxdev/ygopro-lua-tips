{
    "Card.GetCardTarget": {
        "prefix": "Card.GetCardTarget",
        "description": "•Card.GetCardTarget(Card c)\n返回c当前所有的永续对象  \n",
        "body": "Card.GetCardTarget"
    },
    "RESET_TOFIELD": {
        "prefix": "RESET_TOFIELD",
        "description": "到场上重置(move_to_field())",
        "body": "RESET_TOFIELD"
    },
    "Group.GetBinClassCount": {
        "prefix": "Group.GetBinClassCount",
        "description": "•Group.GetBinClassCount(Group g, function f, ...)\n和 Group.GetClassCount 类似，但是算法不同(使用位运算)  \n",
        "body": "Group.GetBinClassCount"
    },
    "Card.GetFlagEffectLabel": {
        "prefix": "Card.GetFlagEffectLabel",
        "description": "•Card.GetFlagEffectLabel(Card c, int code)\n返回c的种类为code的标识效果的Label(数量可能不止一个)，没有此效果则返回nil  \n",
        "body": "Card.GetFlagEffectLabel"
    },
    "Card.RemoveOverlayCard": {
        "prefix": "Card.RemoveOverlayCard",
        "description": "•Card.RemoveOverlayCard(Card c, int player, int min, int max, int reason)\n以reason为原因，让玩家player移除c叠放的min-max张卡，返回值表示是否成功  \n",
        "body": "Card.RemoveOverlayCard"
    },
    "Duel.GetMZoneCount": {
        "prefix": "Duel.GetMZoneCount",
        "description": "•Duel.GetMZoneCount(int player[, Group|Card targets|nil, int use_player, int reason = LOCATION_REASON_TOFIELD, int zone=0xff])\n返回玩家player场上[targets 离开后]可用的[区域 zone 里的]怪兽区数量  \n##第三个第四个额外参数与凯撒斗技场等限制格子的效果有关  \n",
        "body": "Duel.GetMZoneCount"
    },
    "GetControl": {
        "prefix": "GetControl",
        "description": "•Duel.GetControl(Card|Group targets, int player[, int reset_phase=0, int reset_count=0, int zone=0xff])\n让玩家 player [直到 reset_count 次 reset_phase 时][在区域 zone]得到 targets 的控制权，返回值表示是否成功  \nreset_phase ,reset_count 若要使用，必须都用  \nPHASE_DRAW\t\t\t=0x01\t--抽卡阶段  \nPHASE_STANDBY\t\t=0x02\t--准备阶段  \nPHASE_MAIN1\t\t\t=0x04\t--主要阶段1  \nPHASE_BATTLE_START\t=0x08\t--战斗阶段开始  \nPHASE_BATTLE_STEP\t=0x10\t--战斗步驟  \nPHASE_DAMAGE\t\t=0x20\t--伤害步驟  \nPHASE_DAMAGE_CAL\t=0x40\t--伤害计算时  \nPHASE_BATTLE\t\t=0x80\t--战斗阶段結束  \nPHASE_MAIN2\t\t\t=0x100\t--主要阶段2  \nPHASE_END\t\t\t=0x200\t--结束阶段  \n",
        "body": "GetControl"
    },
    "EVENT_FLIP_SUMMON_NEGATED": {
        "prefix": "EVENT_FLIP_SUMMON_NEGATED",
        "description": "反转召唤被无效时",
        "body": "EVENT_FLIP_SUMMON_NEGATED"
    },
    "GetCategory": {
        "prefix": "GetCategory",
        "description": "•Effect.GetCategory(Effect e)\n返回效果 e 的Category属性  \n",
        "body": "GetCategory"
    },
    "CHAININFO_CHAIN_ID": {
        "prefix": "CHAININFO_CHAIN_ID",
        "description": "连锁ID",
        "body": "CHAININFO_CHAIN_ID"
    },
    "aux.qlifilter": {
        "prefix": "aux.qlifilter",
        "description": "•aux.qlifilter(Effect e, Effect te)\n机壳怪兽通用抗性(不受原本等级·阶级比这张卡等级低的怪兽效果影响)的过滤函数的简单写法，用在效果注册里 SetValue  \nte 是 将要影响到 e:GetHandler() 的效果  \nfunction Auxiliary.qlifilter(e,te)  \n\tif te:IsActiveType(TYPE_MONSTER) and te:IsActivated() then  \n\t\tlocal lv=e:GetHandler():GetLevel()  \n\t\tlocal ec=te:GetOwner()  \n\t\tif ec:IsType(TYPE_LINK) then  \n\t\t\treturn false  \n\t\telseif ec:IsType(TYPE_XYZ) then  \n\t\t\treturn ec:GetOriginalRank()<lv  \n\t\telse  \n\t\t\treturn ec:GetOriginalLevel()<lv  \n\t\tend  \n\telse  \n\t\treturn false  \n\tend  \nend  \n",
        "body": "aux.qlifilter"
    },
    "SetChainLimitTillChainEnd": {
        "prefix": "SetChainLimitTillChainEnd",
        "description": "•Duel.SetChainLimitTillChainEnd(function f)\n功能同Duel.SetChainLimit，但是此函数设定的连锁条件直到连锁结束才会解除  \n",
        "body": "SetChainLimitTillChainEnd"
    },
    "TuneMagicianFilter": {
        "prefix": "TuneMagicianFilter",
        "description": "•aux.TuneMagicianFilter(Card c, Effect e)\n调弦之魔术师(73941492)专用，,返回的是一个 有 bool 返回值类型的 函数 f(e,c)  \n",
        "body": "TuneMagicianFilter"
    },
    "aux.GetMustMaterialGroup": {
        "prefix": "aux.GetMustMaterialGroup",
        "description": "•aux.GetMustMaterialGroup(int player , int code)\n如果 player 受到效果种类 code 影响，则返回受到影响的卡  \n目前代码中涉及的code有 EFFECT_MUST_BE_SMATERIAL, EFFECT_MUST_BE_XMATERIAL, EFFECT_MUST_BE_FMATERIAL, EFFECT_MUST_BE_LMATERIAL ,都是 必须成为素材的效果  \n",
        "body": "aux.GetMustMaterialGroup"
    },
    "STATUS_SUMMONING": {
        "prefix": "STATUS_SUMMONING",
        "description": "召唤中",
        "body": "STATUS_SUMMONING"
    },
    "Group.__add": {
        "prefix": "Group.__add",
        "description": "•Group.__add(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 和 target2 中的 全部卡添加到这个卡片组，并返回这个卡片组，若有相同的卡只会添加1次， target1,target2 本身不会有任何变化  \n",
        "body": "Group.__add"
    },
    "GetBinClassCount": {
        "prefix": "GetBinClassCount",
        "description": "•Group.GetBinClassCount(Group g, function f, ...)\n和 Group.GetClassCount 类似，但是算法不同(使用位运算)  \n",
        "body": "GetBinClassCount"
    },
    "AddRitualProcGreater2": {
        "prefix": "AddRitualProcGreater2",
        "description": "•aux.AddRitualProcGreater2(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcGreater2"
    },
    "IsRace": {
        "prefix": "IsRace",
        "description": "•Card.IsRace(Card c, int race)\n检查c是否属于种族race  \n",
        "body": "IsRace"
    },
    "GetHandSynchro": {
        "prefix": "GetHandSynchro",
        "description": "•Card.GetHandSynchro(Card c)\n如果卡片 c 受到手卡同调效果 EFFECT_HAND_SYNCHRO 影响，则返回 Effect e,function filter_target,int min,int max ;否则返回nil  \ne 是有这个影响的效果  \nfilter_target 是过滤条件  \nmin,max 是数量  \n",
        "body": "GetHandSynchro"
    },
    "EFFECT_SET_BASE_DEFENSE": {
        "prefix": "EFFECT_SET_BASE_DEFENSE",
        "description": "设置原本防御力",
        "body": "EFFECT_SET_BASE_DEFENSE"
    },
    "HINTMSG_RELEASE": {
        "prefix": "HINTMSG_RELEASE",
        "description": "请选择要解放的卡",
        "body": "HINTMSG_RELEASE"
    },
    "IsPlayerCanSpecialSummonMonster": {
        "prefix": "IsPlayerCanSpecialSummonMonster",
        "description": "•Duel.IsPlayerCanSpecialSummonMonster(int player, int code[, int setcode|nil, int type|nil, int atk|nil, int def|nil, int level|nil, int race|nil, int attribute|nil, int  pos=POS_FACEUP, int target_player=player, int sumtype=0])\n检查玩家player是否可以[以sumtype 方式][以 pos 表示形式]特殊召唤 给定参数的怪兽到target_player场上  \n此函数通常用于判定是否可以特招token和陷阱怪兽  \n",
        "body": "IsPlayerCanSpecialSummonMonster"
    },
    "aux.NonTuner": {
        "prefix": "aux.NonTuner",
        "description": "•aux.NonTuner(function f, ...)\n用于过滤满足单一过滤条件 f 的调整以外的卡，,返回的是一个 有 bool 返回值类型的 函数，只要求是 调整以外的怪兽的话，就写 aux.NonTuner(nil)  \n第2个参数开始为额外参数  \n",
        "body": "aux.NonTuner"
    },
    "Duel.GetChainEvent": {
        "prefix": "Duel.GetChainEvent",
        "description": "•Duel.GetChainEvent(int chainc)\n返回连锁 chainc 的相关参数，如果 chainc=0，则返回当前正在处理的连锁的相关参数  \n返回6个参数，eg,ep,ev,re,r,rp  \n",
        "body": "Duel.GetChainEvent"
    },
    "aux.IsUnionState": {
        "prefix": "aux.IsUnionState",
        "description": "•aux.IsUnionState(Effect e)\n检查同盟怪兽e:GetHandler()是否处于同盟装备的状态（用于效果的Condition属性）  \n",
        "body": "aux.IsUnionState"
    },
    "Group.SelectUnselect": {
        "prefix": "Group.SelectUnselect",
        "description": "•Group.SelectUnselect(Group cg, Group sg, int player, bool btok=false, bool cancelable=false, int minc, int maxc)\n让玩家 player 从卡片组 cg 中选择 1 张卡放入卡片组 sg ，并返回选的卡。    \nbtok 表示是否可以点击完成选择的按钮， cancelable 表示是否可以取消已选择的卡，   \nminc 和 maxc 是客户端的文字缓冲提示，表示需要选择 minc-maxc 张卡，但是这个只是影响视觉效果，并不代表必须要选择那个数量  \n",
        "body": "Group.SelectUnselect"
    },
    "EVENT_TOSS_COIN": {
        "prefix": "EVENT_TOSS_COIN",
        "description": "抛硬币的结果产生后",
        "body": "EVENT_TOSS_COIN"
    },
    "SetMaterial": {
        "prefix": "SetMaterial",
        "description": "•Card.SetMaterial(Card c, nil|Group g)\n把g中的所有卡作为c的素材（上级召唤，特殊召唤）  \n第二个参数如果传入 nil ,是把卡片c 的素材清除  \n",
        "body": "SetMaterial"
    },
    "HINGMSG_LVRANK": {
        "prefix": "HINGMSG_LVRANK",
        "description": "请宣言一个等级",
        "body": "HINGMSG_LVRANK"
    },
    "GetAttackAnnouncedCount": {
        "prefix": "GetAttackAnnouncedCount",
        "description": "•Card.GetAttackAnnouncedCount(Card c)\n返回c本回合攻击宣言的次数  \n注：攻击被无效不会被计入攻击过的次数，但是会计入攻击宣言的次数  \n",
        "body": "GetAttackAnnouncedCount"
    },
    "CATEGORY_DRAW": {
        "prefix": "CATEGORY_DRAW",
        "description": "抽卡效果",
        "body": "CATEGORY_DRAW"
    },
    "Effect.GetActivateSequence": {
        "prefix": "Effect.GetActivateSequence",
        "description": "•Effect.GetActivateSequence(Effect e)\n返回效果e的发动区域序号  \n",
        "body": "Effect.GetActivateSequence"
    },
    "SUMMON_TYPE_DUAL": {
        "prefix": "SUMMON_TYPE_DUAL",
        "description": "再度召唤（二重）",
        "body": "SUMMON_TYPE_DUAL"
    },
    "REASON_RETURN": {
        "prefix": "REASON_RETURN",
        "description": "回到墓地",
        "body": "REASON_RETURN"
    },
    "GetCounter": {
        "prefix": "GetCounter",
        "description": "•Card.GetCounter(Card c, int countertype)\n返回c上的countertype类型的指示物的数量， countertype=0 则返回c上所有类型的指示物数量之和  \n\n•Duel.GetCounter(int player, int s, int o, int countertype)\n返回场上存在的countertype类型的指示物的数量  \ns表示对player来说的己方的位置，o表示对player来说的对方的位置  \n\n",
        "body": "GetCounter"
    },
    "EVENT_PREDRAW": {
        "prefix": "EVENT_PREDRAW",
        "description": "抽卡阶段通常抽卡前",
        "body": "EVENT_PREDRAW"
    },
    "aux.AddRitualProcEqualCode": {
        "prefix": "aux.AddRitualProcEqualCode",
        "description": "•aux.AddRitualProcEqualCode(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \ncode1 为仪式怪兽卡号，素材的仪式等级之和必须等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcEqual(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcEqualCode"
    },
    "aux.AddSynchroMixProcedure": {
        "prefix": "aux.AddSynchroMixProcedure",
        "description": "•aux.AddSynchroMixProcedure(Card c, function f1|nil, function f2|nil, function f3|nil, function f4|nil, int minc, int maxc)\n为c添加同调召唤手续，  \nf1,f2,f3 为 1 只满足的过滤条件，f4为 minc ~ maxc只满足的过滤条件  \nf1,f2,f3,f4 之中，至少有一种为调整  \nf2 和 f3 若为nil，则等价于aux.AddSynchroProcedure(c,f1,f4,minc, maxc)  \n",
        "body": "aux.AddSynchroMixProcedure"
    },
    "Card.GetPreviousAttributeOnField": {
        "prefix": "Card.GetPreviousAttributeOnField",
        "description": "•Card.GetPreviousAttributeOnField(Card c)\n返回c位置变化之前在场上的属性  \n",
        "body": "Card.GetPreviousAttributeOnField"
    },
    "IsCanBeRitualMaterial": {
        "prefix": "IsCanBeRitualMaterial",
        "description": "•Card.IsCanBeRitualMaterial(Card c, Card sc|nil)\n检查c是否可以作为[仪式怪兽sc的]仪式素材,没有指定sc的场合，必须填nil  \n",
        "body": "IsCanBeRitualMaterial"
    },
    "EVENT_BE_BATTLE_TARGET": {
        "prefix": "EVENT_BE_BATTLE_TARGET",
        "description": "被选为攻击对象时",
        "body": "EVENT_BE_BATTLE_TARGET"
    },
    "EFFECT_ADD_CODE": {
        "prefix": "EFFECT_ADD_CODE",
        "description": "增加卡名",
        "body": "EFFECT_ADD_CODE"
    },
    "EFFECT_RELEASE_REPLACE": {
        "prefix": "EFFECT_RELEASE_REPLACE",
        "description": "代替解放",
        "body": "EFFECT_RELEASE_REPLACE"
    },
    "Card.IsCode": {
        "prefix": "Card.IsCode",
        "description": "•Card.IsCode(Card c, int code1[, int code2,...])\n检查c的卡号是否是 code1[, 或者为 code2...]  \n",
        "body": "Card.IsCode"
    },
    "aux.RitualUltimateFilter": {
        "prefix": "aux.RitualUltimateFilter",
        "description": "•aux.RitualUltimateFilter(Card c, function filter, Effect e, int tp, Group m1, Group m2, function level_function, string greater_or_equal, bool chk)\n仪式素材检测。检测 m1 和 m2 中是否存在满足条件的用于仪式召唤 c 的素材。m1 必须要有  \nfilter 为仪式怪兽满足的条件， level_function 表示仪式召唤要满足的等级(返回值为int类型的函数)  \ngreater_or_equal 的值只有 \"Greater\" 和 \"Equal\"  \nchk 这个参数似乎不是必须要有  \n",
        "body": "aux.RitualUltimateFilter"
    },
    "Duel.NegateRelatedChain": {
        "prefix": "Duel.NegateRelatedChain",
        "description": "•Duel.NegateRelatedChain(Card c, int reset)\n使和卡片c有关的连锁都无效化，发生reset事件则重置,reset 默认包含 RESET_CHAIN  \n",
        "body": "Duel.NegateRelatedChain"
    },
    "Debug.SetAIName": {
        "prefix": "Debug.SetAIName",
        "description": "•Debug.SetAIName(string name)\n设置AI的名字，最大长度 100 个字符（1个汉字2个字符）  \n",
        "body": "Debug.SetAIName"
    },
    "IsNotDualState": {
        "prefix": "IsNotDualState",
        "description": "•aux.IsNotDualState(Effect e)\naux.IsDualState的反义（用于效果的Condition属性）  \n",
        "body": "IsNotDualState"
    },
    "CheckLocation": {
        "prefix": "CheckLocation",
        "description": "•Duel.CheckLocation(int player, int location, int seq)\n检查玩家player的场上位于location序号为seq的空格是否可用  \n",
        "body": "CheckLocation"
    },
    "AddFusionProcFunFunRep": {
        "prefix": "AddFusionProcFunFunRep",
        "description": "•aux.AddFusionProcFunFunRep(Card c, function f1, function f2, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用满足过滤条件 f1 的1只怪兽 ，和满足过滤条件 f2 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,false,insf,f2,minc,maxc,f1)  \n",
        "body": "AddFusionProcFunFunRep"
    },
    "Card.GetPreviousLocation": {
        "prefix": "Card.GetPreviousLocation",
        "description": "•Card.GetPreviousLocation(Card c)\n返回c位置变化前的所在的位置  \n",
        "body": "Card.GetPreviousLocation"
    },
    "TIMING_DRAW": {
        "prefix": "TIMING_DRAW",
        "description": "抽卡时点（不是抽卡阶段",
        "body": "TIMING_DRAW"
    },
    "Duel.GetControl": {
        "prefix": "Duel.GetControl",
        "description": "•Duel.GetControl(Card|Group targets, int player[, int reset_phase=0, int reset_count=0, int zone=0xff])\n让玩家 player [直到 reset_count 次 reset_phase 时][在区域 zone]得到 targets 的控制权，返回值表示是否成功  \nreset_phase ,reset_count 若要使用，必须都用  \nPHASE_DRAW\t\t\t=0x01\t--抽卡阶段  \nPHASE_STANDBY\t\t=0x02\t--准备阶段  \nPHASE_MAIN1\t\t\t=0x04\t--主要阶段1  \nPHASE_BATTLE_START\t=0x08\t--战斗阶段开始  \nPHASE_BATTLE_STEP\t=0x10\t--战斗步驟  \nPHASE_DAMAGE\t\t=0x20\t--伤害步驟  \nPHASE_DAMAGE_CAL\t=0x40\t--伤害计算时  \nPHASE_BATTLE\t\t=0x80\t--战斗阶段結束  \nPHASE_MAIN2\t\t\t=0x100\t--主要阶段2  \nPHASE_END\t\t\t=0x200\t--结束阶段  \n",
        "body": "Duel.GetControl"
    },
    "Duel.GetCounter": {
        "prefix": "Duel.GetCounter",
        "description": "•Duel.GetCounter(int player, int s, int o, int countertype)\n返回场上存在的countertype类型的指示物的数量  \ns表示对player来说的己方的位置，o表示对player来说的对方的位置  \n",
        "body": "Duel.GetCounter"
    },
    "CHAININFO_TRIGGERING_SEQUENCE": {
        "prefix": "CHAININFO_TRIGGERING_SEQUENCE",
        "description": "连锁的位置的编号（指怪兽和魔陷区的格子）",
        "body": "CHAININFO_TRIGGERING_SEQUENCE"
    },
    "Effect.CheckCountLimit": {
        "prefix": "Effect.CheckCountLimit",
        "description": "•Effect.CheckCountLimit(Effect e, int p)\n检测玩家 p 是否还有可以发动的效果 e 的次数  \n",
        "body": "Effect.CheckCountLimit"
    },
    "IsMaterialListType": {
        "prefix": "IsMaterialListType",
        "description": "•aux.IsMaterialListType(Card c, any ctype])\n检测 c 是否是有类型 ctype 为素材的卡  \nc.material_type  \n",
        "body": "IsMaterialListType"
    },
    "Effect.SetValue": {
        "prefix": "Effect.SetValue",
        "description": "•Effect.SetValue(Effect e, function|int|bool val)\n设置效果 e 的Value属性  \n",
        "body": "Effect.SetValue"
    },
    "EVENT_CHAIN_ACTIVATING": {
        "prefix": "EVENT_CHAIN_ACTIVATING",
        "description": "连锁处理准备中",
        "body": "EVENT_CHAIN_ACTIVATING"
    },
    "HINTMSG_DISABLEZONE": {
        "prefix": "HINTMSG_DISABLEZONE",
        "description": "请选择要变成不能使用的卡片区域",
        "body": "HINTMSG_DISABLEZONE"
    },
    "Merge": {
        "prefix": "Merge",
        "description": "•Group.Merge(Group g1, Group g2)\n把g2中的所有卡合并到g1，若g1中原本就有属于g2的卡，那些卡将不会重复  \n注：g2本身不会发生变化  \n",
        "body": "Merge"
    },
    "IsExistingTarget": {
        "prefix": "IsExistingTarget",
        "description": "•Duel.IsExistingTarget(function f|nil, int player, int s, int o, int count, Card|Group ex|nil, ...)\n基本同Duel.IsExistingMatchingCard ，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象  \n",
        "body": "IsExistingTarget"
    },
    "NO_FLIP_EFFECT": {
        "prefix": "NO_FLIP_EFFECT",
        "description": "不发动反转效果",
        "body": "NO_FLIP_EFFECT"
    },
    "Card.IsSynchroSummonable": {
        "prefix": "Card.IsSynchroSummonable",
        "description": "•Card.IsSynchroSummonable(Card c ,Card tuner|nil[, Group mg, int minc=0, int maxc=0])\n检查是否可以以tuner作为调整，用场上[或mg][minc ~ maxc 张卡]为同调素材对c进行同调召唤手续  \n如果tuner是nil，此函数与Card.IsSpecialSummonable作用相同  \nc 如果不是同调会返回 false  \n",
        "body": "Card.IsSynchroSummonable"
    },
    "HINTMSG_CODE": {
        "prefix": "HINTMSG_CODE",
        "description": "请宣言一个卡名",
        "body": "HINTMSG_CODE"
    },
    "Card.GetReasonEffect": {
        "prefix": "Card.GetReasonEffect",
        "description": "•Card.GetReasonEffect(Card c)\n返回导致c的位置变化的效果  \n",
        "body": "Card.GetReasonEffect"
    },
    "GetActiveType": {
        "prefix": "GetActiveType",
        "description": "•Effect.GetActiveType(Effect e)\n返回效果 e 的效果类型（怪兽·魔法·陷阱等）  \n比如灵摆的结果是 灵摆+魔法  \n",
        "body": "GetActiveType"
    },
    "__bor": {
        "prefix": "__bor",
        "description": "•Group.__bor(Group|Card target1, Group|Card target2)\n代码和 Group.__add 完全一样  \n",
        "body": "__bor"
    },
    "Duel.IsPlayerCanSummon": {
        "prefix": "Duel.IsPlayerCanSummon",
        "description": "•Duel.IsPlayerCanSummon(int player[, int sumtype, Card c])\n检查玩家player是否可以通常召唤[c，以sumtype方式]  \n如果需要可选参数，则必须全部使用  \n仅当玩家受到“不能召唤”等效果的影响时返回false  \n",
        "body": "Duel.IsPlayerCanSummon"
    },
    "EFFECT_LIMIT_SET_PROC": {
        "prefix": "EFFECT_LIMIT_SET_PROC",
        "description": "放置（通常召唤）规则限制",
        "body": "EFFECT_LIMIT_SET_PROC"
    },
    "EFFECT_CANNOT_ATTACK_ANNOUNCE": {
        "prefix": "EFFECT_CANNOT_ATTACK_ANNOUNCE",
        "description": "不能攻击宣言",
        "body": "EFFECT_CANNOT_ATTACK_ANNOUNCE"
    },
    "EFFECT_CANNOT_CHANGE_POS_E": {
        "prefix": "EFFECT_CANNOT_CHANGE_POS_E",
        "description": "不会被卡的效果变成守备表示（攻击性云魔物）",
        "body": "EFFECT_CANNOT_CHANGE_POS_E"
    },
    "Card.IsPreviousLocation": {
        "prefix": "Card.IsPreviousLocation",
        "description": "•Card.IsPreviousLocation(Card c, int location)\n检查c之前的位置是否是location  \n",
        "body": "Card.IsPreviousLocation"
    },
    "Duel.MoveToField": {
        "prefix": "Duel.MoveToField",
        "description": "•Duel.MoveToField(Card c, int move_player, int target_player, int dest, int pos, bool enable[, int zone=0xff])\n让玩家move_player把c移动的target_player的场上，返回值表示是否成功  \ndest只能是LOCATION_MZONE或者LOCATION_SZONE，pos表示可选表示形式， enable 表示是否立刻适用c的效果， zone 表示必须要放到的格子  \n",
        "body": "Duel.MoveToField"
    },
    "SearchCard": {
        "prefix": "SearchCard",
        "description": "•Group.SearchCard(Group g, function f, ...)\n过滤函数，返回g中满足筛选条件f的第一张卡，若没有则返回nil，从第3个参数开始为额外参数  \n",
        "body": "SearchCard"
    },
    "Duel.NegateAttack": {
        "prefix": "Duel.NegateAttack",
        "description": "•Duel.NegateAttack()\n无效此次攻击，返回值表示是否成功  \n此次攻击已经被其他效果无效或导致攻击的卡不能攻击则返回false  \n",
        "body": "Duel.NegateAttack"
    },
    "disfilter1": {
        "prefix": "disfilter1",
        "description": "•aux.disfilter1(Card c)\n检测是否是 可以被无效效果的 怪兽  \nfunction Auxiliary.disfilter1(c)  \n\treturn c:IsFaceup() and not c:IsDisabled() and (not c:IsType(TYPE_NORMAL) or c:GetOriginalType()&TYPE_EFFECT~=0)  \nend  \n",
        "body": "disfilter1"
    },
    "EFFECT_ATTACK_COST": {
        "prefix": "EFFECT_ATTACK_COST",
        "description": "攻击代价（霞之谷猎鹰）",
        "body": "EFFECT_ATTACK_COST"
    },
    "EFFECT_SYNCHRO_LEVEL": {
        "prefix": "EFFECT_SYNCHRO_LEVEL",
        "description": "做同调素材时的等级",
        "body": "EFFECT_SYNCHRO_LEVEL"
    },
    "HINTMSG_RESOLVECARD": {
        "prefix": "HINTMSG_RESOLVECARD",
        "description": "请选择要处理效果的卡",
        "body": "HINTMSG_RESOLVECARD"
    },
    "EFFECT_LIMIT_SUMMON_PROC": {
        "prefix": "EFFECT_LIMIT_SUMMON_PROC",
        "description": "召唤规则限制",
        "body": "EFFECT_LIMIT_SUMMON_PROC"
    },
    "Duel.AnnounceRace": {
        "prefix": "Duel.AnnounceRace",
        "description": "•Duel.AnnounceRace(int player, int count, int available)\n让玩家player从可选的种族中宣言count个种族  \navailable是所有可选种族的组合值，可以自行组合  \n可以直接将名字相加，比如 RACE_WARRIOR+RACE_SPELLCASTER  \nRACE_ALL\t\t\t=0x1ffffff\t--全种族  \nRACE_WARRIOR\t\t=0x1\t\t--战士  \nRACE_SPELLCASTER\t=0x2\t\t--魔法师  \nRACE_FAIRY\t\t\t=0x4\t\t--天使  \nRACE_FIEND\t\t\t=0x8\t\t--恶魔  \nRACE_ZOMBIE\t\t\t=0x10\t\t--不死  \nRACE_MACHINE\t\t=0x20\t\t--机械  \nRACE_AQUA\t\t\t=0x40\t\t--水  \nRACE_PYRO\t\t\t=0x80\t\t--炎  \nRACE_ROCK\t\t\t=0x100\t\t--岩石  \nRACE_WINDBEAST\t\t=0x200\t\t--鸟兽  \nRACE_PLANT\t\t\t=0x400\t\t--植物  \nRACE_INSECT\t\t\t=0x800\t\t--昆虫  \nRACE_THUNDER\t\t=0x1000\t\t--雷  \nRACE_DRAGON\t\t\t=0x2000\t\t--龙  \nRACE_BEAST\t\t\t=0x4000\t\t--兽  \nRACE_BEASTWARRIOR\t=0x8000\t\t--兽战士  \nRACE_DINOSAUR\t\t=0x10000\t--恐龙  \nRACE_FISH\t\t\t=0x20000\t--鱼  \nRACE_SEASERPENT\t\t=0x40000\t--海龙  \nRACE_REPTILE\t\t=0x80000\t--爬虫类  \nRACE_PSYCHO\t\t\t=0x100000\t--念动力  \nRACE_DEVINE\t\t\t=0x200000\t--幻神兽  \nRACE_CREATORGOD\t\t=0x400000\t--创造神  \nRACE_WYRM\t\t\t=0x800000\t--幻龙  \nRACE_CYBERSE\t\t=0x1000000\t--电子界  \n",
        "body": "Duel.AnnounceRace"
    },
    "ATTRIBUTE_EARTH": {
        "prefix": "ATTRIBUTE_EARTH",
        "description": "地",
        "body": "ATTRIBUTE_EARTH"
    },
    "Duel.DiscardDeck": {
        "prefix": "Duel.DiscardDeck",
        "description": "•Duel.DiscardDeck(int player, int count, int reason)\n以原因reason把玩家player的卡组最上端count张卡送去墓地，返回实际转移的数量  \n",
        "body": "Duel.DiscardDeck"
    },
    "Card.GetRace": {
        "prefix": "Card.GetRace",
        "description": "•Card.GetRace(Card c)\n返回c的当前种族  \n注：对某些多种族怪兽如动画效果的魔术猿，此函数的返回值可能是几个种族的组合值  \n",
        "body": "Card.GetRace"
    },
    "EFFECT_SET_ATTACK_FINAL": {
        "prefix": "EFFECT_SET_ATTACK_FINAL",
        "description": "设置最终攻击力(所有入連鎖的改變攻擊力)",
        "body": "EFFECT_SET_ATTACK_FINAL"
    },
    "Card.IsAttack": {
        "prefix": "Card.IsAttack",
        "description": "•Card.IsAttack(Card c, int atk1[, int atk2,...])\n检查c的攻击力是否是 atk1[, 或者为 atk2...]，如果c不是怪兽卡，或者不在 LOCATION_MZONE 则都返回false  \n",
        "body": "Card.IsAttack"
    },
    "Card.SetHint": {
        "prefix": "Card.SetHint",
        "description": "•Card.SetHint(Card c, int type, int value)\n为c设置类型为type的卡片提示信息  \ntype只能为以下值，对应的value类型为  \nCHINT_TURN              回合数  \nCHINT_CARD              卡片id  \nCHINT_RACE              种族  \nCHINT_ATTRIBUTE         属性  \nCHINT_NUMBER            数字  \nCHINT_DESC              描述  \n",
        "body": "Card.SetHint"
    },
    "GetChainMaterial": {
        "prefix": "GetChainMaterial",
        "description": "•Duel.GetChainMaterial(int player)\n返回玩家player受到的连锁素材的效果，此函数仅用于融合类卡的效果  \n",
        "body": "GetChainMaterial"
    },
    "GetBattlePosition": {
        "prefix": "GetBattlePosition",
        "description": "•Card.GetBattlePosition(Card c)\n返回c在本次战斗发生之前的表示形式  \n",
        "body": "GetBattlePosition"
    },
    "SelectYesNo": {
        "prefix": "SelectYesNo",
        "description": "•Duel.SelectYesNo(int player, int desc)\n让玩家player选择是或否  \n",
        "body": "SelectYesNo"
    },
    "TYPE_DUAL": {
        "prefix": "TYPE_DUAL",
        "description": "二重",
        "body": "TYPE_DUAL"
    },
    "EFFECT_REMOVE_RACE": {
        "prefix": "EFFECT_REMOVE_RACE",
        "description": "删除种族",
        "body": "EFFECT_REMOVE_RACE"
    },
    "Card.IsAbleToExtra": {
        "prefix": "Card.IsAbleToExtra",
        "description": "•Card.IsAbleToExtra(Card c)\n检查c是否可以送去额外卡组  \n对于非融合、同调等额外怪兽或者非灵摆怪兽此函数均返回false  \n",
        "body": "Card.IsAbleToExtra"
    },
    "aux.MustMaterialCheck": {
        "prefix": "aux.MustMaterialCheck",
        "description": "•aux.MustMaterialCheck(Card|Group value, int player , int code)\n检查 value 中是否有 player 受到效果种类 code 影响的卡或者卡片组  \n目前代码中涉及的code有 EFFECT_MUST_BE_SMATERIAL, EFFECT_MUST_BE_XMATERIAL, EFFECT_MUST_BE_FMATERIAL, EFFECT_MUST_BE_LMATERIAL ,都是 必须成为素材的检测  \n",
        "body": "aux.MustMaterialCheck"
    },
    "RACE_WARRIOR": {
        "prefix": "RACE_WARRIOR",
        "description": "战士",
        "body": "RACE_WARRIOR"
    },
    "aux.chainreg": {
        "prefix": "aux.chainreg",
        "description": "•aux.chainreg(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n死亡魔导龙(81059524)用了此函数，用于 SetOperation ，其实就是相当于  \nfunction Auxiliary.chainreg(e,tp,eg,ep,ev,re,r,rp)  \n\tif e:GetHandler():GetFlagEffect(1)==0 then  \n\t\te:GetHandler():RegisterFlagEffect(1,RESET_EVENT+RESETS_STANDARD-RESET_TURN_SET+RESET_CHAIN,0,1)  \n\tend  \nend  \n",
        "body": "aux.chainreg"
    },
    "dabcheck": {
        "prefix": "dabcheck",
        "description": "•aux.dabcheck(Group g)\n检测卡片组 g 中是否有相同属性的卡的简单写法，返回值如果为 true 表示没有相同属性卡  \nfunction Auxiliary.dabcheck(g)  \n\treturn g:GetClassCount(Card.GetAttribute)==#g  \nend  \n",
        "body": "dabcheck"
    },
    "Card.IsDestructable": {
        "prefix": "Card.IsDestructable",
        "description": "•Card.IsDestructable(Card c[, Effect e])\n检查c是否是可被[效果 e]破坏的  \n",
        "body": "Card.IsDestructable"
    },
    "Duel.GetLocationCount": {
        "prefix": "Duel.GetLocationCount",
        "description": "•Duel.GetLocationCount(int player, int location[, int use_player, int reason = LOCATION_REASON_TOFIELD, int zone=0xff])\n返回玩家player的场上location可用的[区域 zone 里的]空格数  \nlocation只能是LOCATION_MZONE或者LOCATION_SZONE  \nreason为LOCATION_REASON_TOFIELD或LOCATION_REASON_CONTROL  \n##第三个第四个额外参数与凯撒斗技场等限制格子的效果有关  \n",
        "body": "Duel.GetLocationCount"
    },
    "GetColumnGroup": {
        "prefix": "GetColumnGroup",
        "description": "•Card.GetColumnGroup(Card c)\n返回与c同一纵列的c以外的卡片组  \n",
        "body": "GetColumnGroup"
    },
    "bdogcon": {
        "prefix": "bdogcon",
        "description": "•aux.bdogcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且是与对方怪兽战斗并战斗破坏对方怪兽送去墓地 的 condition  \nfunction Auxiliary.bdogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\tlocal bc=c:GetBattleTarget()  \n\treturn c:IsRelateToBattle() and c:IsStatus(STATUS_OPPO_BATTLE) and bc:IsLocation(LOCATION_GRAVE) and bc:IsType(TYPE_MONSTER)  \nend  \n",
        "body": "bdogcon"
    },
    "Card.GetAttackedCount": {
        "prefix": "Card.GetAttackedCount",
        "description": "•Card.GetAttackedCount(Card c)\n返回c本回合攻击过的次数  \n注：如果此值与上一个函数的返回值不同，那么说明此卡本回合进行过直接攻击  \n",
        "body": "Card.GetAttackedCount"
    },
    "ATTRIBUTE_FIRE": {
        "prefix": "ATTRIBUTE_FIRE",
        "description": "炎",
        "body": "ATTRIBUTE_FIRE"
    },
    "PreSetTarget": {
        "prefix": "PreSetTarget",
        "description": "•Debug.PreSetTarget(Card c, Card target)\n把target选为c的永续对象  \n",
        "body": "PreSetTarget"
    },
    "EFFECT_ONLY_BE_ATTACKED": {
        "prefix": "EFFECT_ONLY_BE_ATTACKED",
        "description": "只能攻击此卡",
        "body": "EFFECT_ONLY_BE_ATTACKED"
    },
    "RACE_SEASERPENT": {
        "prefix": "RACE_SEASERPENT",
        "description": "海龙",
        "body": "RACE_SEASERPENT"
    },
    "Duel.AnnounceCard": {
        "prefix": "Duel.AnnounceCard",
        "description": "•Duel.AnnounceCard(int player[, ...])\n让玩家player宣言一个卡片（比如：禁止令）  \nDuel.AnnounceCardFilter 已经被合并到这个函数里  \n如果参数只有2个，会自动加上第三个参数 OPCODE_ISTYPE  \n多个参数参考 古代的齿车机械(18486927):  \n\tlocal code=e:GetHandler():GetCode()  \n\t--c:IsSetCard(0x51) and not c:IsCode(code)  \n\tgetmetatable(e:GetHandler()).announce_filter={0x51,OPCODE_ISSETCARD,code,OPCODE_ISCODE,OPCODE_NOT,OPCODE_AND}  \n\tlocal ac=Duel.AnnounceCard(tp,table.unpack(getmetatable(e:GetHandler()).announce_filter))  \n--Opcode  \nOPCODE_ADD\t\t\t\t=0x40000000   \nOPCODE_SUB\t\t\t\t=0x40000001   \nOPCODE_MUL\t\t\t\t=0x40000002   \nOPCODE_DIV\t\t\t\t=0x40000003 --除法  \nOPCODE_AND\t\t\t\t=0x40000004 --与  \nOPCODE_OR\t\t\t\t=0x40000005 --或  \nOPCODE_NEG\t\t\t\t=0x40000006   \nOPCODE_NOT\t\t\t\t=0x40000007 --非  \nOPCODE_ISCODE\t\t\t=0x40000100 --卡片过滤条件为code  \nOPCODE_ISSETCARD\t\t=0x40000101 --卡片过滤条件为setname  \nOPCODE_ISTYPE\t\t\t=0x40000102 --卡片过滤条件为type  \nOPCODE_ISRACE\t\t\t=0x40000103 --卡片过滤条件为race  \nOPCODE_ISATTRIBUTE\t\t=0x40000104 --卡片过滤条件为attribute  \n",
        "body": "Duel.AnnounceCard"
    },
    "IsAbleToHand": {
        "prefix": "IsAbleToHand",
        "description": "•Card.IsAbleToHand(Card c)\n检查c是否可以送去手牌  \n注：仅当卡片或者玩家受到“不能加入手牌”的效果的影响时（如雷王）此函数才返回false  \n##以下几个函数类似  \n",
        "body": "IsAbleToHand"
    },
    "IsFusionSummonableCard": {
        "prefix": "IsFusionSummonableCard",
        "description": "•Card.IsFusionSummonableCard(Card c[, int sum_type])\n检查c是否是可[用 sum_type 方式]融合召唤的卡  \n",
        "body": "IsFusionSummonableCard"
    },
    "GetPreviousLevelOnField": {
        "prefix": "GetPreviousLevelOnField",
        "description": "•Card.GetPreviousLevelOnField(Card c)\n返回c位置变化之前在场上的等级  \n",
        "body": "GetPreviousLevelOnField"
    },
    "SetCondition": {
        "prefix": "SetCondition",
        "description": "•Effect.SetCondition(Effect e, function con_func)\n设置效果 e 的Condition属性  \n",
        "body": "SetCondition"
    },
    "dlvcheck": {
        "prefix": "dlvcheck",
        "description": "•aux.dlvcheck(Group g)\n检测卡片组 g 中是否有相同等级的卡的简单写法，返回值如果为 true 表示没有相同等级卡  \nfunction Auxiliary.dlvcheck(g)  \n\treturn g:GetClassCount(Card.GetLevel)==#g  \nend  \n",
        "body": "dlvcheck"
    },
    "EFFECT_CHANGE_BATTLE_DAMAGE": {
        "prefix": "EFFECT_CHANGE_BATTLE_DAMAGE",
        "description": "改变战斗伤害",
        "body": "EFFECT_CHANGE_BATTLE_DAMAGE"
    },
    "ChangeTargetParam": {
        "prefix": "ChangeTargetParam",
        "description": "•Duel.ChangeTargetParam(int chainc, int param)\n把连锁chainc的参数换成param  \nchainc=0 表示当前效果  \n",
        "body": "ChangeTargetParam"
    },
    "EVENT_BATTLED": {
        "prefix": "EVENT_BATTLED",
        "description": "伤害计算后（异女、同反转效果时点）",
        "body": "EVENT_BATTLED"
    },
    "RACE_DRAGON": {
        "prefix": "RACE_DRAGON",
        "description": "龙",
        "body": "RACE_DRAGON"
    },
    "EFFECT_FLAG_CANNOT_DISABLE": {
        "prefix": "EFFECT_FLAG_CANNOT_DISABLE",
        "description": "效果不会被无效",
        "body": "EFFECT_FLAG_CANNOT_DISABLE"
    },
    "HINTMSG_TOZONE": {
        "prefix": "HINTMSG_TOZONE",
        "description": "请选择要移动到的位置",
        "body": "HINTMSG_TOZONE"
    },
    "Duel.GetUsableMZoneCount": {
        "prefix": "Duel.GetUsableMZoneCount",
        "description": "•Duel.GetUsableMZoneCount(int player[, int use_player])\n返回玩家player场上[对于 use_player 来说]可用的怪兽区数量（？）  \n",
        "body": "Duel.GetUsableMZoneCount"
    },
    "TIMING_SUMMON": {
        "prefix": "TIMING_SUMMON",
        "description": "召唤时点",
        "body": "TIMING_SUMMON"
    },
    "Card.SetCardTarget": {
        "prefix": "Card.SetCardTarget",
        "description": "•Card.SetCardTarget(Card c1, Card c2)\n把c2作为c1的永续对象  \nc1和c2的联系会在c1或c2任意一卡离场或变成里侧表示时reset  \n",
        "body": "Card.SetCardTarget"
    },
    "Duel.CalculateDamage": {
        "prefix": "Duel.CalculateDamage",
        "description": "•Duel.CalculateDamage(Card c1, Card c2[, bool new_attack=false])\n令c1与c2进行战斗伤害计算（c1 攻击 c2）  \n若 new_attack=true 则视为 攻击的卡进行过攻击宣言（？）  \n",
        "body": "Duel.CalculateDamage"
    },
    "Duel.XyzSummon": {
        "prefix": "Duel.XyzSummon",
        "description": "•Duel.XyzSummon(int player, Card c, Group mg|nil[, int minc=0, int maxc=0])\n让玩家player用场上的卡[或mg][选minc-maxc 个素材]对c进行超量召唤手续  \nmg非空且min为0则直接把mg全部作为超量素材  \n",
        "body": "Duel.XyzSummon"
    },
    "Duel.GetLocationCountFromEx": {
        "prefix": "Duel.GetLocationCountFromEx",
        "description": "•Duel.GetLocationCountFromEx(int player[, int reason_player=player, Group|Card targets|nil, Card sc, int zone=0xff])\n返回玩家player场上[假如因玩家 reason_player 的原因让 targets 离场后，把卡片 sc 在 zone 区域特殊召唤]可用的 能让额外卡组的怪兽 出场的空格数  \n",
        "body": "Duel.GetLocationCountFromEx"
    },
    "Group.Sub": {
        "prefix": "Group.Sub",
        "description": "•Group.Sub(Group g1, Group g2)\n从g1中移除属于g2中的卡  \n注：g2本身不会发生变化  \n",
        "body": "Group.Sub"
    },
    "Card.GetLevel": {
        "prefix": "Card.GetLevel",
        "description": "•Card.GetLevel(Card c)\n返回c的当前等级  \n",
        "body": "Card.GetLevel"
    },
    "AddSynchroMixProcedure": {
        "prefix": "AddSynchroMixProcedure",
        "description": "•aux.AddSynchroMixProcedure(Card c, function f1|nil, function f2|nil, function f3|nil, function f4|nil, int minc, int maxc)\n为c添加同调召唤手续，  \nf1,f2,f3 为 1 只满足的过滤条件，f4为 minc ~ maxc只满足的过滤条件  \nf1,f2,f3,f4 之中，至少有一种为调整  \nf2 和 f3 若为nil，则等价于aux.AddSynchroProcedure(c,f1,f4,minc, maxc)  \n",
        "body": "AddSynchroMixProcedure"
    },
    "REASON_XYZ": {
        "prefix": "REASON_XYZ",
        "description": "用於超量召喚",
        "body": "REASON_XYZ"
    },
    "Duel.RockPaperScissors": {
        "prefix": "Duel.RockPaperScissors",
        "description": "•Duel.RockPaperScissors([bool repeat=true])\n猜拳，若 repeat=false 则只猜一次；否则就是直到分出胜负为止。返回胜利的玩家号码  \n",
        "body": "Duel.RockPaperScissors"
    },
    "aux.tgsval": {
        "prefix": "aux.tgsval",
        "description": "•aux.tgsval(Effect e, Effect re, int rp)\n不会成为自己的卡的效果对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.tgsval(e,re,rp)  \n\treturn rp==e:GetHandlerPlayer()  \nend  \n",
        "body": "aux.tgsval"
    },
    "Effect.SetProperty": {
        "prefix": "Effect.SetProperty",
        "description": "•Effect.SetProperty(Effect e, int prop1[, int prop2])\n设置效果 e 的Property属性  \n",
        "body": "Effect.SetProperty"
    },
    "GetCode": {
        "prefix": "GetCode",
        "description": "•Card.GetCode(Card c)\n返回c的当前代号（可能因为效果改变）  \n\n•Effect.GetCode(Effect e)\n返回效果 e 的code属性  \n\n",
        "body": "GetCode"
    },
    "EFFECT_CANNOT_M2": {
        "prefix": "EFFECT_CANNOT_M2",
        "description": "不能进入主要阶段2",
        "body": "EFFECT_CANNOT_M2"
    },
    "Card.IsXyzType": {
        "prefix": "Card.IsXyzType",
        "description": "•Card.IsXyzType(Card c, int type)\n检查c用作超量素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "Card.IsXyzType"
    },
    "Card.GetReasonCard": {
        "prefix": "Card.GetReasonCard",
        "description": "•Card.GetReasonCard(Card c)\n返回导致c的位置变化的卡  \n此函数仅在某卡被战斗破坏时，因为上级召唤被解放，或者成为特殊召唤使用的素材时有效  \n",
        "body": "Card.GetReasonCard"
    },
    "Card.GetMaterial": {
        "prefix": "Card.GetMaterial",
        "description": "•Card.GetMaterial(Card c)\n返回c出场使用的素材  \n",
        "body": "Card.GetMaterial"
    },
    "POS_FACEUP_DEFENSE": {
        "prefix": "POS_FACEUP_DEFENSE",
        "description": "表侧守备",
        "body": "POS_FACEUP_DEFENSE"
    },
    "ChangeChainOperation": {
        "prefix": "ChangeChainOperation",
        "description": "•Duel.ChangeChainOperation(int chainc, function f)\n把连锁chainc的效果的处理函数换成f，用于实现“把效果变成”等的效果  \nchainc=0 表示当前效果  \nf(e,tp,eg,ep,ev,re,r,rp)  \n",
        "body": "ChangeChainOperation"
    },
    "GetRitualMaterial": {
        "prefix": "GetRitualMaterial",
        "description": "•Duel.GetRitualMaterial(int player)\n返回玩家player可用的用于仪式召唤素材的卡片组  \n包含手上，场上可解放的以及墓地的仪式魔人等卡  \n",
        "body": "GetRitualMaterial"
    },
    "RESET_TOGRAVE": {
        "prefix": "RESET_TOGRAVE",
        "description": "去墓地重置(以下皆為事件觸發前重置)",
        "body": "RESET_TOGRAVE"
    },
    "CheckTiming": {
        "prefix": "CheckTiming",
        "description": "•Duel.CheckTiming(int timing)\n检查当前是否是timing提示时点  \nTIMING_DRAW_PHASE\t\t\t=0x1\t\t\t--抽卡阶段时点  \nTIMING_STANDBY_PHASE\t\t=0x2        \t--准备阶段时点  \nTIMING_MAIN_END\t\t\t\t=0x4        \t--主要阶段结束时点  \nTIMING_BATTLE_START\t\t\t=0x8        \t--战斗阶段开始时点  \nTIMING_BATTLE_END\t\t\t=0x10       \t--战斗阶段结束时点  \nTIMING_END_PHASE\t\t\t=0x20       \t--结束阶段时点  \nTIMING_SUMMON\t\t\t\t=0x40       \t--召唤时点  \nTIMING_SPSUMMON\t\t\t\t=0x80       \t--特殊召唤时点  \nTIMING_FLIPSUMMON\t\t\t=0x100      \t--翻转召唤时点  \nTIMING_MSET\t\t\t\t\t=0x200\t\t\t--放置怪兽时点  \nTIMING_SSET\t\t\t\t\t=0x400      \t--放置魔陷时点  \nTIMING_POS_CHANGE\t\t\t=0x800      \t--表示形式变更时点  \nTIMING_ATTACK\t\t\t\t=0x1000     \t--攻击宣言时点  \nTIMING_DAMAGE_STEP\t\t\t=0x2000     \t--伤害步骤时点  \nTIMING_DAMAGE_CAL\t\t\t=0x4000     \t--伤害计算时点  \nTIMING_CHAIN_END\t\t\t=0x8000     \t--连锁结束时点  \nTIMING_DRAW\t\t\t\t\t=0x10000    \t--抽卡时点（不是抽卡阶段  \nTIMING_DAMAGE\t\t\t\t=0x20000    \t--造成伤害时点  \nTIMING_RECOVER\t\t\t\t=0x40000\t\t--回复时点  \nTIMING_DESTROY\t\t\t\t=0x80000    \t--破坏时点  \nTIMING_REMOVE\t\t\t\t=0x100000   \t--除外时点  \nTIMING_TOHAND\t\t\t\t=0x200000   \t--加入手牌时点（检索、回收等）  \nTIMING_TODECK\t\t\t\t=0x400000   \t--回卡组时点  \nTIMING_TOGRAVE\t\t\t\t=0x800000   \t--进墓地时点  \nTIMING_BATTLE_PHASE\t\t\t=0x1000000  \t--战斗阶段时点  \nTIMING_EQUIP\t\t\t\t=0x2000000  \t--装备时点  \nTIMING_BATTLE_STEP_END\t\t=0x4000000  \t--戰鬥步驟結束時  \n",
        "body": "CheckTiming"
    },
    "CheckChainUniqueness": {
        "prefix": "CheckChainUniqueness",
        "description": "•Duel.CheckChainUniqueness()\n检查当前连锁中是否存在同名卡的发动，返回true表示无同名卡  \n",
        "body": "CheckChainUniqueness"
    },
    "EVENT_CHAIN_ACTIVATED": {
        "prefix": "EVENT_CHAIN_ACTIVATED",
        "description": "N/A",
        "body": "EVENT_CHAIN_ACTIVATED"
    },
    "TIMING_END_PHASE": {
        "prefix": "TIMING_END_PHASE",
        "description": "结束阶段时点",
        "body": "TIMING_END_PHASE"
    },
    "Duel.GetOverlayGroup": {
        "prefix": "Duel.GetOverlayGroup",
        "description": "•Duel.GetOverlayGroup(int player, int s, int o)\n返回以player来看的指定位置的所有叠放的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n",
        "body": "Duel.GetOverlayGroup"
    },
    "Group.Select": {
        "prefix": "Group.Select",
        "description": "•Group.Select(Group g, int player, int min, int max, Card|Group ex|nil)\n让玩家player从卡片组g中选择min-max张不等于ex的卡  \n",
        "body": "Group.Select"
    },
    "Card.GetRank": {
        "prefix": "Card.GetRank",
        "description": "•Card.GetRank(Card c)\n返回c的当前阶级  \n",
        "body": "Card.GetRank"
    },
    "aux.mzctcheck": {
        "prefix": "aux.mzctcheck",
        "description": "•aux.mzctcheck(Group g, int tp)\n检测玩家 tp 场上是否有卡片组 g 离开后可用的主要怪兽区格子 的简单写法  \nfunction Auxiliary.mzctcheck(g,tp)  \n\treturn Duel.GetMZoneCount(tp,g)>0  \nend  \n",
        "body": "aux.mzctcheck"
    },
    "EFFECT_PRE_MONSTER": {
        "prefix": "EFFECT_PRE_MONSTER",
        "description": "可存取怪獸的各項數值(Card.AddMonsterAttribute()專用)",
        "body": "EFFECT_PRE_MONSTER"
    },
    "tgsval": {
        "prefix": "tgsval",
        "description": "•aux.tgsval(Effect e, Effect re, int rp)\n不会成为自己的卡的效果对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.tgsval(e,re,rp)  \n\treturn rp==e:GetHandlerPlayer()  \nend  \n",
        "body": "tgsval"
    },
    "AddRitualProcEqualCode": {
        "prefix": "AddRitualProcEqualCode",
        "description": "•aux.AddRitualProcEqualCode(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \ncode1 为仪式怪兽卡号，素材的仪式等级之和必须等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcEqual(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcEqualCode"
    },
    "Duel.SetTargetPlayer": {
        "prefix": "Duel.SetTargetPlayer",
        "description": "•Duel.SetTargetPlayer(int player)\n把当前正在处理的连锁的对象玩家设置成player  \n",
        "body": "Duel.SetTargetPlayer"
    },
    "Debug.SetPlayerInfo": {
        "prefix": "Debug.SetPlayerInfo",
        "description": "•Debug.SetPlayerInfo(int playerid, int lp, int startcount, int drawcount)\n设置玩家信息，基本分为lp，初始手卡为startcount张，每回合抽drawcount张  \n在残局当中， playerid ：自己=0,对方=1  \n",
        "body": "Debug.SetPlayerInfo"
    },
    "HINTMSG_REMOVE": {
        "prefix": "HINTMSG_REMOVE",
        "description": "请选择要除外的卡",
        "body": "HINTMSG_REMOVE"
    },
    "GetOwnerTarget": {
        "prefix": "GetOwnerTarget",
        "description": "•Card.GetOwnerTarget(Card c)\n返回取c作为永续对象的所有卡  \n",
        "body": "GetOwnerTarget"
    },
    "Card.IsLevelAbove": {
        "prefix": "Card.IsLevelAbove",
        "description": "•Card.IsLevelAbove(Card c, int level)\n检查c是否是等级level以上  \n",
        "body": "Card.IsLevelAbove"
    },
    "Card.GetAttackAnnouncedCount": {
        "prefix": "Card.GetAttackAnnouncedCount",
        "description": "•Card.GetAttackAnnouncedCount(Card c)\n返回c本回合攻击宣言的次数  \n注：攻击被无效不会被计入攻击过的次数，但是会计入攻击宣言的次数  \n",
        "body": "Card.GetAttackAnnouncedCount"
    },
    "EFFECT_CANNOT_TO_GRAVE": {
        "prefix": "EFFECT_CANNOT_TO_GRAVE",
        "description": "不能去墓地",
        "body": "EFFECT_CANNOT_TO_GRAVE"
    },
    "IsPlayerCanAdditionalSummon": {
        "prefix": "IsPlayerCanAdditionalSummon",
        "description": "•Duel.IsPlayerCanAdditionalSummon(int player)\n检查玩家是否进行过额外的通常召唤  \n注：以前这个函数叫 Duel.IsPlayerExtraSummoned(int player)  \n",
        "body": "IsPlayerCanAdditionalSummon"
    },
    "Group.KeepAlive": {
        "prefix": "Group.KeepAlive",
        "description": "•Group.KeepAlive(Group g)\n让卡片组g持续，把卡片组设置为效果的LabelObject需要设置  \n",
        "body": "Group.KeepAlive"
    },
    "EFFECT_CANNOT_ATTACK": {
        "prefix": "EFFECT_CANNOT_ATTACK",
        "description": "不能攻击",
        "body": "EFFECT_CANNOT_ATTACK"
    },
    "Card.GetOriginalType": {
        "prefix": "Card.GetOriginalType",
        "description": "•Card.GetOriginalType(Card c)\n返回c的卡片记载的类型  \n",
        "body": "Card.GetOriginalType"
    },
    "Card.EnableReviveLimit": {
        "prefix": "Card.EnableReviveLimit",
        "description": "•Card.EnableReviveLimit(Card c)\n为c添加苏生限制  \n##实际上是不可复制、不会被无效的EFFECT_UNSUMMONABLE_CARD和EFFECT_REVIVE_LIMIT效果  \n",
        "body": "Card.EnableReviveLimit"
    },
    "EFFECT_CANNOT_DRAW": {
        "prefix": "EFFECT_CANNOT_DRAW",
        "description": "不能抽卡",
        "body": "EFFECT_CANNOT_DRAW"
    },
    "EFFECT_FLAG_SET_AVAILABLE": {
        "prefix": "EFFECT_FLAG_SET_AVAILABLE",
        "description": "影响场上里侧的卡/裡側狀態可發動",
        "body": "EFFECT_FLAG_SET_AVAILABLE"
    },
    "GetAttacker": {
        "prefix": "GetAttacker",
        "description": "•Duel.GetAttacker()\n返回此次战斗攻击的卡  \n",
        "body": "GetAttacker"
    },
    "Duel.Release": {
        "prefix": "Duel.Release",
        "description": "•Duel.Release(Card|Group targets, int reason)\n以reason原因解放targets ，返回值是实际解放的数量  \n如果reason含有REASON_COST，则不会检查卡片是否不受效果影响  \n",
        "body": "Duel.Release"
    },
    "Card.CancelCardTarget": {
        "prefix": "Card.CancelCardTarget",
        "description": "•Card.CancelCardTarget(Card c1, Card c2)\n取消c2为c1的永续对象  \n",
        "body": "Card.CancelCardTarget"
    },
    "GetType": {
        "prefix": "GetType",
        "description": "•Card.GetType(Card c)\n返回c的当前类型  \n\n•Effect.GetType(Effect e)\n返回效果 e 的Type属性  \n\n",
        "body": "GetType"
    },
    "Card.GetEquipCount": {
        "prefix": "Card.GetEquipCount",
        "description": "•Card.GetEquipCount(Card c)\n返回c当前装备着的卡片数量  \n",
        "body": "Card.GetEquipCount"
    },
    "SetSPSummonOnce": {
        "prefix": "SetSPSummonOnce",
        "description": "•Card.SetSPSummonOnce(Card c, int spsummon_code)\n设置c一回合只能进行1次特殊召唤（灵兽，波动龙）  \n相同的spsummon_code共用1个次数  \n",
        "body": "SetSPSummonOnce"
    },
    "Card.EnableDualState": {
        "prefix": "Card.EnableDualState",
        "description": "•Card.EnableDualState(Card c)\n把c设置成再召唤状态  \n",
        "body": "Card.EnableDualState"
    },
    "GetLinkRace": {
        "prefix": "GetLinkRace",
        "description": "•Card.GetLinkRace(Card c[, int player=PLAYER_NONE])\n返回c[由player连接召唤时]作为连接素材时的种族  \n",
        "body": "GetLinkRace"
    },
    "aux.drkcheck": {
        "prefix": "aux.drkcheck",
        "description": "•aux.drkcheck(Group g)\n检测卡片组 g 中是否有相同阶级的卡的简单写法，返回值如果为 true 表示没有相同阶级卡  \nfunction Auxiliary.drkcheck(g)  \n\treturn g:GetClassCount(Card.GetRank)==#g  \nend  \n",
        "body": "aux.drkcheck"
    },
    "EFFECT_TOSS_DICE_REPLACE": {
        "prefix": "EFFECT_TOSS_DICE_REPLACE",
        "description": "重新掷骰子",
        "body": "EFFECT_TOSS_DICE_REPLACE"
    },
    "aux.damcon1": {
        "prefix": "aux.damcon1",
        "description": "•aux.damcon1(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n玩家 tp 受到伤害 这个条件的简单写法，，用在效果注册里 SetCondition  \nfunction Auxiliary.damcon1(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal e1=Duel.IsPlayerAffectedByEffect(tp,EFFECT_REVERSE_DAMAGE)  \n\tlocal e2=Duel.IsPlayerAffectedByEffect(tp,EFFECT_REVERSE_RECOVER)  \n\tlocal rd=e1 and not e2  \n\tlocal rr=not e1 and e2  \n\tlocal ex,cg,ct,cp,cv=Duel.GetOperationInfo(ev,CATEGORY_DAMAGE)  \n\tif ex and (cp==tp or cp==PLAYER_ALL) and not rd and not Duel.IsPlayerAffectedByEffect(tp,EFFECT_NO_EFFECT_DAMAGE) then  \n\t\treturn true  \n\tend  \n\tex,cg,ct,cp,cv=Duel.GetOperationInfo(ev,CATEGORY_RECOVER)  \n\treturn ex and (cp==tp or cp==PLAYER_ALL) and rr and not Duel.IsPlayerAffectedByEffect(tp,EFFECT_NO_EFFECT_DAMAGE)  \nend  \n",
        "body": "aux.damcon1"
    },
    "GetPreviousEquipTarget": {
        "prefix": "GetPreviousEquipTarget",
        "description": "•Card.GetPreviousEquipTarget(Card c)\n返回c之前的装备对象  \n",
        "body": "GetPreviousEquipTarget"
    },
    "EVENT_ATTACK_DISABLED": {
        "prefix": "EVENT_ATTACK_DISABLED",
        "description": "攻击无效时（翻倍机会）",
        "body": "EVENT_ATTACK_DISABLED"
    },
    "imval1": {
        "prefix": "imval1",
        "description": "•aux.imval1(Effect e, Card c)\n不会成为攻击对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.imval1(e,c)  \n\treturn not c:IsImmuneToEffect(e)  \nend  \n",
        "body": "imval1"
    },
    "Duel.GetTributeGroup": {
        "prefix": "Duel.GetTributeGroup",
        "description": "•Duel.GetTributeGroup(Card c)\n返回场上用于通常召唤c可解放（上级召唤用）的卡片组  \n",
        "body": "Duel.GetTributeGroup"
    },
    "GetSummonType": {
        "prefix": "GetSummonType",
        "description": "•Card.GetSummonType(Card c)\n返回c的召唤/特殊召唤的方式  \n",
        "body": "GetSummonType"
    },
    "EFFECT_CANNOT_DISABLE_FLIP_SUMMON": {
        "prefix": "EFFECT_CANNOT_DISABLE_FLIP_SUMMON",
        "description": "翻转召唤不会无效",
        "body": "EFFECT_CANNOT_DISABLE_FLIP_SUMMON"
    },
    "Duel.ConfirmDecktop": {
        "prefix": "Duel.ConfirmDecktop",
        "description": "•Duel.ConfirmDecktop(int player, int count)\n确认玩家player卡组最上方count张卡  \n",
        "body": "Duel.ConfirmDecktop"
    },
    "EFFECT_TYPE_TRIGGER_F": {
        "prefix": "EFFECT_TYPE_TRIGGER_F",
        "description": "诱发必发效果",
        "body": "EFFECT_TYPE_TRIGGER_F"
    },
    "Draw": {
        "prefix": "Draw",
        "description": "•Duel.Draw(int player, int count, int reason)\n让玩家player以原因reason抽count张卡，返回实际抽的卡的数量  \n如果reason含有REASON_RULE则此次抽卡不受“不能抽卡”的效果的影响  \n",
        "body": "Draw"
    },
    "Card.GetOriginalLevel": {
        "prefix": "Card.GetOriginalLevel",
        "description": "•Card.GetOriginalLevel(Card c)\n返回c的卡片记载的等级  \n",
        "body": "Card.GetOriginalLevel"
    },
    "SetFlagEffectLabel": {
        "prefix": "SetFlagEffectLabel",
        "description": "•Card.SetFlagEffectLabel(Card c, int code, int label)\n返回c是否存在种类为code的标识效果，若存在则设置其Label属性为label  \n\n•Duel.SetFlagEffectLabel(int player, int code, int label)\n返回player是否存在种类为code的标识效果，并设置其Label属性为label  \n\n",
        "body": "SetFlagEffectLabel"
    },
    "EFFECT_CANNOT_TRIGGER": {
        "prefix": "EFFECT_CANNOT_TRIGGER",
        "description": "卡不能发动效果",
        "body": "EFFECT_CANNOT_TRIGGER"
    },
    "GetClassCount": {
        "prefix": "GetClassCount",
        "description": "•Group.GetClassCount(Group g, function f, ...)\n计算g中所有卡的种类数量，f为分类的依据，返回相同的值视为同一种类，从第3个参数开始为额外参数  \n比如 g:GetClassCount(Card.GetCode) 就是计算g中卡名不同的卡的数量  \n",
        "body": "GetClassCount"
    },
    "TIMING_RECOVER": {
        "prefix": "TIMING_RECOVER",
        "description": "回复时点",
        "body": "TIMING_RECOVER"
    },
    "Card.GetBattledGroup": {
        "prefix": "Card.GetBattledGroup",
        "description": "•Card.GetBattledGroup(Card c)\n返回与c本回合进行过战斗的卡片组  \n进行过战斗指发生过伤害的计算，用于剑斗兽等卡的判定  \n",
        "body": "Card.GetBattledGroup"
    },
    "EVENT_BATTLE_DESTROYED": {
        "prefix": "EVENT_BATTLE_DESTROYED",
        "description": "被战斗破坏送去墓地时（杀人番茄等）",
        "body": "EVENT_BATTLE_DESTROYED"
    },
    "Effect.IsActiveType": {
        "prefix": "Effect.IsActiveType",
        "description": "•Effect.IsActiveType(Effect e, int type)\n检查效果 e 的效果类型（怪兽·魔法·陷阱等）是否有type  \n",
        "body": "Effect.IsActiveType"
    },
    "Card.GetFusionAttribute": {
        "prefix": "Card.GetFusionAttribute",
        "description": "•Card.GetFusionAttribute(Card c[, int player=PLAYER_NONE])\n返回c[由player融合召唤时]用作融合素材时的属性  \n",
        "body": "Card.GetFusionAttribute"
    },
    "GetOriginalCode": {
        "prefix": "GetOriginalCode",
        "description": "•Card.GetOriginalCode(Card c)\n返回c的卡片记载的代号  \n",
        "body": "GetOriginalCode"
    },
    "GetLinkedGroupCount": {
        "prefix": "GetLinkedGroupCount",
        "description": "•Card.GetLinkedGroupCount(Card c)\n返回c的连接区的卡片组的卡的数量（目前只限怪兽区）  \n\n•Duel.GetLinkedGroupCount(int player, int s_range, int o_range)\n返回以玩家player来看的 s_range 和 o_range 区域的处于连接状态的卡片的数量（？）  \n\n",
        "body": "GetLinkedGroupCount"
    },
    "IsPlayerCanDraw": {
        "prefix": "IsPlayerCanDraw",
        "description": "•Duel.IsPlayerCanDraw(int player[, int count=0])\n检查玩家player是否可以效果抽[count张]卡  \n",
        "body": "IsPlayerCanDraw"
    },
    "Card.GetFusionType": {
        "prefix": "Card.GetFusionType",
        "description": "•Card.GetFusionType(Card c)\n返回c用作融合素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "Card.GetFusionType"
    },
    "DUEL_TEST_MODE": {
        "prefix": "DUEL_TEST_MODE",
        "description": "测试模式(目前暫無)",
        "body": "DUEL_TEST_MODE"
    },
    "EFFECT_TYPE_TRIGGER_O": {
        "prefix": "EFFECT_TYPE_TRIGGER_O",
        "description": "诱发选发效果",
        "body": "EFFECT_TYPE_TRIGGER_O"
    },
    "Card.IsPreviousPosition": {
        "prefix": "Card.IsPreviousPosition",
        "description": "•Card.IsPreviousPosition(Card c, int pos)\n检查c位置变化之前是否是表示形式pos  \n",
        "body": "Card.IsPreviousPosition"
    },
    "LINK_MARKER_TOP_LEFT": {
        "prefix": "LINK_MARKER_TOP_LEFT",
        "description": "↖",
        "body": "LINK_MARKER_TOP_LEFT"
    },
    "aux.AddFusionProcFunFun": {
        "prefix": "aux.AddFusionProcFunFun",
        "description": "•aux.AddFusionProcFunFun(Card c, function f1, function f2, int cc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用满足过滤条件 f1 的1只怪兽 ，和满足过滤条件 f2 的 cc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,f1,table.unpack(fun)),fun 是包含 cc 个 满足条件 f2 的卡的表  \n",
        "body": "aux.AddFusionProcFunFun"
    },
    "REASON_SUMMON": {
        "prefix": "REASON_SUMMON",
        "description": "召唤",
        "body": "REASON_SUMMON"
    },
    "CreateEffect": {
        "prefix": "CreateEffect",
        "description": "•Effect.CreateEffect(Card c)\n新建一个空效果  \n并且效果的Owner为c  \n",
        "body": "CreateEffect"
    },
    "Group.SelectSubGroup": {
        "prefix": "Group.SelectSubGroup",
        "description": "•Group.SelectSubGroup(Group g, int tp, function f, bool cancelable, int min=1, int max=#g, ...)\n从卡片组 g 中选一个满足 过滤条件 f，并且数量在 min-max 的子集， cancelable 表示是否可以取消操作  \nf 的函数原型为  \nfunction f(Group sg,...) end  \n",
        "body": "Group.SelectSubGroup"
    },
    "CheckLPCost": {
        "prefix": "CheckLPCost",
        "description": "•Duel.CheckLPCost(int player, int cost)\n检查玩家player是否能支付cost点lp  \n",
        "body": "CheckLPCost"
    },
    "SZoneSequence": {
        "prefix": "SZoneSequence",
        "description": "•aux.SZoneSequence(int seq)\n返回是第几列魔陷区，从左到右 分别是 0~4 ,不包含场地区  \n",
        "body": "SZoneSequence"
    },
    "nbcon": {
        "prefix": "nbcon",
        "description": "•aux.nbcon(int tp, Effect re)\n无效并除外  \nfunction Auxiliary.nbcon(tp,re)  \n\tlocal rc=re:GetHandler()  \n\treturn Duel.IsPlayerCanRemove(tp)  \n\t\tand (not rc:IsRelateToEffect(re) or rc:IsAbleToRemove())  \nend  \n",
        "body": "nbcon"
    },
    "penlimit": {
        "prefix": "penlimit",
        "description": "•aux.penlimit(Effect e, Effect se, int sp, int st)\n不能用 灵摆召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.penlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_PENDULUM==SUMMON_TYPE_PENDULUM  \nend  \n",
        "body": "penlimit"
    },
    "TIMING_MAIN_END": {
        "prefix": "TIMING_MAIN_END",
        "description": "主要阶段结束时点",
        "body": "TIMING_MAIN_END"
    },
    "HINTMSG_DEATTACHFROM": {
        "prefix": "HINTMSG_DEATTACHFROM",
        "description": "请选择要取除超量素材的怪兽",
        "body": "HINTMSG_DEATTACHFROM"
    },
    "REASON_RDAMAGE": {
        "prefix": "REASON_RDAMAGE",
        "description": "回復轉換後的傷害",
        "body": "REASON_RDAMAGE"
    },
    "Card.IsSynchroType": {
        "prefix": "Card.IsSynchroType",
        "description": "•Card.IsSynchroType(Card c, int type)\n检查c用作同调素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "Card.IsSynchroType"
    },
    "REASON_MATERIAL": {
        "prefix": "REASON_MATERIAL",
        "description": "作为融合/同调/超量素材或用於儀式/升級召喚",
        "body": "REASON_MATERIAL"
    },
    "Duel.CreateToken": {
        "prefix": "Duel.CreateToken",
        "description": "•Duel.CreateToken(int player, int code)\n根据code新建一个衍生物并返回这个卡，该衍生物的拥有者为player  \n如果 player 不是 0或者1，则返回false  \n",
        "body": "Duel.CreateToken"
    },
    "aux.gffcheck": {
        "prefix": "aux.gffcheck",
        "description": "•aux.gffcheck(Group g, function f1, any a1, function f2, any a2)\n--check for group with 2 cards, each card match f1 with a1, f2 with a2 as argument  \nfunction Auxiliary.gffcheck(g,f1,a1,f2,a2)  \n\tif #g~=2 then return false end  \n\tlocal c1=g:GetFirst()  \n\tlocal c2=g:GetNext()  \n\treturn f1(c1,a1) and f2(c2,a2) or f1(c2,a1) and f2(c1,a2)  \nend  \n",
        "body": "aux.gffcheck"
    },
    "Duel.RegisterFlagEffect": {
        "prefix": "Duel.RegisterFlagEffect",
        "description": "•Duel.RegisterFlagEffect(int player, int code, int reset_flag, int property, int reset_count=1[, int label=0])\n为玩家player注册全局环境下的标识效果，并返回这个效果  \n此效果总是影响玩家的(EFFECT_FLAG_PLAYER_TARGET)并且不会被无效化  \n其余部分与Card.RegisterFlagEffect相同  \n",
        "body": "Duel.RegisterFlagEffect"
    },
    "RockPaperScissors": {
        "prefix": "RockPaperScissors",
        "description": "•Duel.RockPaperScissors([bool repeat=true])\n猜拳，若 repeat=false 则只猜一次；否则就是直到分出胜负为止。返回胜利的玩家号码  \n",
        "body": "RockPaperScissors"
    },
    "SetLP": {
        "prefix": "SetLP",
        "description": "•Duel.SetLP(int player, int lp)\n设置玩家player的当前LP为lp  \n",
        "body": "SetLP"
    },
    "GetFirstMatchingCard": {
        "prefix": "GetFirstMatchingCard",
        "description": "•Duel.GetFirstMatchingCard(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的第一张卡,没有则返回nil  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n",
        "body": "GetFirstMatchingCard"
    },
    "EFFECT_CANNOT_BE_EFFECT_TARGET": {
        "prefix": "EFFECT_CANNOT_BE_EFFECT_TARGET",
        "description": "不能成为效果对象",
        "body": "EFFECT_CANNOT_BE_EFFECT_TARGET"
    },
    "AnnounceNumber": {
        "prefix": "AnnounceNumber",
        "description": "•Duel.AnnounceNumber(int player, int number, ...)\n让玩家player宣言一个数字  \n从第二个参数开始，每一个参数代表一个可宣言的数字  \n第一个返回值是宣言的数字，第二个返回值是宣言数字在所有选项中的位置  \n",
        "body": "AnnounceNumber"
    },
    "ASSUME_CODE": {
        "prefix": "ASSUME_CODE",
        "body": "ASSUME_CODE"
    },
    "Card.GetPreviousRankOnField": {
        "prefix": "Card.GetPreviousRankOnField",
        "description": "•Card.GetPreviousRankOnField(Card c)\n返回c位置变化之前在场上的阶级  \n",
        "body": "Card.GetPreviousRankOnField"
    },
    "EFFECT_COUNTER_PERMIT": {
        "prefix": "EFFECT_COUNTER_PERMIT",
        "description": "允许放置指示物类型",
        "body": "EFFECT_COUNTER_PERMIT"
    },
    "SpecialSummonStep": {
        "prefix": "SpecialSummonStep",
        "description": "•Duel.SpecialSummonStep(Card c, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos[, int zone=0xff])\n此函数是Duel.SpecialSummon的分解过程，只特殊召唤一张卡c ，其他参数用法和 Duel.SpecialSummon 一样  \n此函数用于一个效果同时特殊召唤多张参数不同的卡  \n此函数必须和Duel.SpecialSummonComplete()一起使用  \n返回值表示是否特殊召唤成功  \n",
        "body": "SpecialSummonStep"
    },
    "ReleaseRelation": {
        "prefix": "ReleaseRelation",
        "description": "•Card.ReleaseRelation(Card c1, Card c2)\n手动释放c1对于c2的联系  \n",
        "body": "ReleaseRelation"
    },
    "Card.IsDirectAttacked": {
        "prefix": "Card.IsDirectAttacked",
        "description": "•Card.IsDirectAttacked(Card c)\n检查c是否直接攻击过  \n",
        "body": "Card.IsDirectAttacked"
    },
    "EFFECT_TYPE_ACTIVATE": {
        "prefix": "EFFECT_TYPE_ACTIVATE",
        "description": "魔陷发动",
        "body": "EFFECT_TYPE_ACTIVATE"
    },
    "CHAININFO_TRIGGERING_LEVEL": {
        "prefix": "CHAININFO_TRIGGERING_LEVEL",
        "description": "连锁发生时的等级",
        "body": "CHAININFO_TRIGGERING_LEVEL"
    },
    "HINTMSG_TRIBUTE": {
        "prefix": "HINTMSG_TRIBUTE",
        "description": "请选择上级召唤用需要解放的怪兽",
        "body": "HINTMSG_TRIBUTE"
    },
    "aux.evospcon": {
        "prefix": "aux.evospcon",
        "description": "•aux.evospcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n进化龙通用效果(用「进化虫」怪兽的效果特殊召唤)的过滤条件的简单写法，用在效果注册里 SetCondition  \nfunction Auxiliary.evospcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal st=e:GetHandler():GetSummonType()  \n\treturn st>=(SUMMON_TYPE_SPECIAL+150) and st<(SUMMON_TYPE_SPECIAL+180)  \nend  \n",
        "body": "aux.evospcon"
    },
    "EVENT_ATTACK_ANNOUNCE": {
        "prefix": "EVENT_ATTACK_ANNOUNCE",
        "description": "攻击宣言时",
        "body": "EVENT_ATTACK_ANNOUNCE"
    },
    "SpecialSummonRule": {
        "prefix": "SpecialSummonRule",
        "description": "•Duel.SpecialSummonRule(int player, Card c[, int sumtype=0])\n让玩家player对卡片c[用 sumtype 方式]进行特殊召唤手续（？）  \n",
        "body": "SpecialSummonRule"
    },
    "EFFECT_FLAG_DAMAGE_STEP": {
        "prefix": "EFFECT_FLAG_DAMAGE_STEP",
        "description": "可以在伤害步骤发动",
        "body": "EFFECT_FLAG_DAMAGE_STEP"
    },
    "Duel.GetOperationCount": {
        "prefix": "Duel.GetOperationCount",
        "description": "•Duel.GetOperationCount(int chainc)\n返回连锁chainc包含的操作分类的数量  \n",
        "body": "Duel.GetOperationCount"
    },
    "Duel.GetLinkedZone": {
        "prefix": "Duel.GetLinkedZone",
        "description": "•Duel.GetLinkedZone(int player)\n返回以玩家player来看的所有连接区域  \n",
        "body": "Duel.GetLinkedZone"
    },
    "TYPE_TOON": {
        "prefix": "TYPE_TOON",
        "description": "卡通",
        "body": "TYPE_TOON"
    },
    "POS_FACEUP_ATTACK": {
        "prefix": "POS_FACEUP_ATTACK",
        "description": "表侧攻击",
        "body": "POS_FACEUP_ATTACK"
    },
    "GetDescription": {
        "prefix": "GetDescription",
        "description": "•Effect.GetDescription(Effect e)\n返回效果 e 的效果描述，没有则无返回值，下同（到 GetCategory ）  \n",
        "body": "GetDescription"
    },
    "PHASE_DRAW": {
        "prefix": "PHASE_DRAW",
        "description": "抽卡阶段",
        "body": "PHASE_DRAW"
    },
    "EFFECT_SKIP_SP": {
        "prefix": "EFFECT_SKIP_SP",
        "description": "跳过准备阶段",
        "body": "EFFECT_SKIP_SP"
    },
    "GetPreviousSequence": {
        "prefix": "GetPreviousSequence",
        "description": "•Card.GetPreviousSequence(Card c)\n返回c位置变化前的序号  \n",
        "body": "GetPreviousSequence"
    },
    "Card.GetSynchroLevel": {
        "prefix": "Card.GetSynchroLevel",
        "description": "•Card.GetSynchroLevel(Card c, Card sc)\n返回c的对于同调怪兽sc的同调用等级  \n此函数除了某些特定卡如调节支援士，返回值与Card.GetLevel(c)相同  \n",
        "body": "Card.GetSynchroLevel"
    },
    "STATUS_EFFECT_ENABLED": {
        "prefix": "STATUS_EFFECT_ENABLED",
        "description": "卡片準備就緒(不在移動、召喚、魔法陷阱發動中)",
        "body": "STATUS_EFFECT_ENABLED"
    },
    "HINTMSG_RESOLVEEFFECT": {
        "prefix": "HINTMSG_RESOLVEEFFECT",
        "description": "请选择要发动/处理的效果",
        "body": "HINTMSG_RESOLVEEFFECT"
    },
    "IsControlerCanBeChanged": {
        "prefix": "IsControlerCanBeChanged",
        "description": "•Card.IsControlerCanBeChanged(Card c[, bool ignore_mzone=false, int zone=0xff])\n检查c的控制权是否可以改变。 ignore_mzone=true 会忽视转移控制权后的玩家场上是否有空格位， zone 表示必须要使用的位置  \n",
        "body": "IsControlerCanBeChanged"
    },
    "GetOverlayTarget": {
        "prefix": "GetOverlayTarget",
        "description": "•Card.GetOverlayTarget(Card c)\n返回以c为超量素材的卡  \n",
        "body": "GetOverlayTarget"
    },
    "Duel.CheckSynchroMaterial": {
        "prefix": "Duel.CheckSynchroMaterial",
        "description": "•Duel.CheckSynchroMaterial(Card c, function f1|nil, function f2|nil, int min, int max[, Card smat|nil, Group mg|nil])\n检查场上[或mg中]是否存在一组[必须包括smat在内的（如果有mg~=nil则忽略此参数）]满足条件的卡作为同调召唤c的素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \nf1,f2 之中，至少有一种为调整的条件  \n",
        "body": "Duel.CheckSynchroMaterial"
    },
    "GetLabel": {
        "prefix": "GetLabel",
        "description": "•Effect.GetLabel(Effect e)\n返回效果 e 的Label(全部返回)  \n",
        "body": "GetLabel"
    },
    "SendtoExtraP": {
        "prefix": "SendtoExtraP",
        "description": "•Duel.SendtoExtraP(Card|Group targets, int player|nil, int reason)\n以reason原因把灵摆卡targets表侧表示送去玩家player的额外卡组，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的额外卡组  \n",
        "body": "SendtoExtraP"
    },
    "EVENT_PRE_BATTLE_DAMAGE": {
        "prefix": "EVENT_PRE_BATTLE_DAMAGE",
        "description": "即将产生战斗伤害(只能使用EFFECT_TYPE_CONTINUOUS)",
        "body": "EVENT_PRE_BATTLE_DAMAGE"
    },
    "SetCardTarget": {
        "prefix": "SetCardTarget",
        "description": "•Card.SetCardTarget(Card c1, Card c2)\n把c2作为c1的永续对象  \nc1和c2的联系会在c1或c2任意一卡离场或变成里侧表示时reset  \n",
        "body": "SetCardTarget"
    },
    "aux.imval1": {
        "prefix": "aux.imval1",
        "description": "•aux.imval1(Effect e, Card c)\n不会成为攻击对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.imval1(e,c)  \n\treturn not c:IsImmuneToEffect(e)  \nend  \n",
        "body": "aux.imval1"
    },
    "Card.IsControlerCanBeChanged": {
        "prefix": "Card.IsControlerCanBeChanged",
        "description": "•Card.IsControlerCanBeChanged(Card c[, bool ignore_mzone=false, int zone=0xff])\n检查c的控制权是否可以改变。 ignore_mzone=true 会忽视转移控制权后的玩家场上是否有空格位， zone 表示必须要使用的位置  \n",
        "body": "Card.IsControlerCanBeChanged"
    },
    "GetReason": {
        "prefix": "GetReason",
        "description": "•Card.GetReason(Card c)\n返回c的位置变化原因  \n",
        "body": "GetReason"
    },
    "TYPE_SPIRIT": {
        "prefix": "TYPE_SPIRIT",
        "description": "灵魂",
        "body": "TYPE_SPIRIT"
    },
    "aux.AddFusionProcFunFunRep": {
        "prefix": "aux.AddFusionProcFunFunRep",
        "description": "•aux.AddFusionProcFunFunRep(Card c, function f1, function f2, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用满足过滤条件 f1 的1只怪兽 ，和满足过滤条件 f2 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,false,insf,f2,minc,maxc,f1)  \n",
        "body": "aux.AddFusionProcFunFunRep"
    },
    "EFFECT_ATTACK_DISABLED": {
        "prefix": "EFFECT_ATTACK_DISABLED",
        "description": "攻击已被無效(Duel.NegateAttack()成功的標記)",
        "body": "EFFECT_ATTACK_DISABLED"
    },
    "CATEGORY_RELEASE": {
        "prefix": "CATEGORY_RELEASE",
        "description": "解放效果",
        "body": "CATEGORY_RELEASE"
    },
    "GetCardTarget": {
        "prefix": "GetCardTarget",
        "description": "•Card.GetCardTarget(Card c)\n返回c当前所有的永续对象  \n",
        "body": "GetCardTarget"
    },
    "LOCATION_ONFIELD": {
        "prefix": "LOCATION_ONFIELD",
        "description": "场上（LOCATION_MZONE+LOCATION_SZONE）",
        "body": "LOCATION_ONFIELD"
    },
    "EFFECT_SPIRIT_DONOT_RETURN": {
        "prefix": "EFFECT_SPIRIT_DONOT_RETURN",
        "description": "灵魂怪兽不返回手牌",
        "body": "EFFECT_SPIRIT_DONOT_RETURN"
    },
    "aux.AddXyzProcedure": {
        "prefix": "aux.AddXyzProcedure",
        "description": "•aux.AddXyzProcedure(Card c, function f|nil, int lv, int ct[, function alterf|nil, int desc|nil, int maxc=ct, function op|nil])\n为c添加超量召唤手续  \n用满足条件 f 的等级为 lv 的 ct[-maxc] 只怪兽进行叠放  \n或者在单个怪兽（通常是超量怪兽）上叠放  \nalterf 为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（比如 希望皇龙）  \n",
        "body": "aux.AddXyzProcedure"
    },
    "IsRelateToBattle": {
        "prefix": "IsRelateToBattle",
        "description": "•Card.IsRelateToBattle(Card c)\n检查c是否和本次战斗关联  \n注：此效果通常用于伤害计算后伤害阶段结束前，用于检查战斗的卡是否离场过  \n",
        "body": "IsRelateToBattle"
    },
    "EFFECT_CANNOT_EP": {
        "prefix": "EFFECT_CANNOT_EP",
        "description": "不能进入结束阶段",
        "body": "EFFECT_CANNOT_EP"
    },
    "EFFECT_DISABLE_CHAIN_FIELD": {
        "prefix": "EFFECT_DISABLE_CHAIN_FIELD",
        "description": "N/A",
        "body": "EFFECT_DISABLE_CHAIN_FIELD"
    },
    "IsXyzType": {
        "prefix": "IsXyzType",
        "description": "•Card.IsXyzType(Card c, int type)\n检查c用作超量素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "IsXyzType"
    },
    "CATEGORY_TOHAND": {
        "prefix": "CATEGORY_TOHAND",
        "description": "回手牌效果",
        "body": "CATEGORY_TOHAND"
    },
    "SetCoinResult": {
        "prefix": "SetCoinResult",
        "description": "•Duel.SetCoinResult(int res, ... )\n强行修改投硬币的结果为res ,最多5个参数，res只能是 0 或 1, ，其他全算作 0  \n此函数用于永续的EVENT_TOSS_COIN事件中  \n",
        "body": "SetCoinResult"
    },
    "Card.GetTurnCounter": {
        "prefix": "Card.GetTurnCounter",
        "description": "•Card.GetTurnCounter(Card c)\n返回c的回合计数器  \n",
        "body": "Card.GetTurnCounter"
    },
    "CHAININFO_DISABLE_PLAYER": {
        "prefix": "CHAININFO_DISABLE_PLAYER",
        "description": "无效的玩家",
        "body": "CHAININFO_DISABLE_PLAYER"
    },
    "CATEGORY_DICE": {
        "prefix": "CATEGORY_DICE",
        "description": "骰子效果",
        "body": "CATEGORY_DICE"
    },
    "TIMING_BATTLE_STEP_END": {
        "prefix": "TIMING_BATTLE_STEP_END",
        "description": "戰鬥步驟結束時",
        "body": "TIMING_BATTLE_STEP_END"
    },
    "HINT_CODE": {
        "prefix": "HINT_CODE",
        "body": "HINT_CODE"
    },
    "Card.GetXyzType": {
        "prefix": "Card.GetXyzType",
        "description": "•Card.GetXyzType(Card c)\n返回c用作同调素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "Card.GetXyzType"
    },
    "Group.AddCard": {
        "prefix": "Group.AddCard",
        "description": "•Group.AddCard(Group g, Card c)\n往卡片组g中增加卡片c  \n",
        "body": "Group.AddCard"
    },
    "CreateEffectRelation": {
        "prefix": "CreateEffectRelation",
        "description": "•Card.CreateEffectRelation(Card c, Effect e)\n为卡片c和效果e建立联系  \n",
        "body": "CreateEffectRelation"
    },
    "RACE_BEASTWARRIOR": {
        "prefix": "RACE_BEASTWARRIOR",
        "description": "兽战士",
        "body": "RACE_BEASTWARRIOR"
    },
    "AddFusionProcShaddoll": {
        "prefix": "AddFusionProcShaddoll",
        "description": "•aux.AddFusionProcShaddoll(Card c, int attribute)\n影依融合怪兽专用，attribute 为需要的属性  \n",
        "body": "AddFusionProcShaddoll"
    },
    "Group.IsExists": {
        "prefix": "Group.IsExists",
        "description": "•Group.IsExists(Group g, function f, int count, Card|Group ex|nil, ...)\n过滤函数，检查卡片组g中是否存在至少count张满足筛选条件f并且不等于ex的卡  \n从第5个参数开始为额外参数  \n",
        "body": "Group.IsExists"
    },
    "RACE_DIVINE": {
        "prefix": "RACE_DIVINE",
        "description": "幻神兽",
        "body": "RACE_DIVINE"
    },
    "SetValue": {
        "prefix": "SetValue",
        "description": "•Effect.SetValue(Effect e, function|int|bool val)\n设置效果 e 的Value属性  \n",
        "body": "SetValue"
    },
    "HINTMSG_DISCARD": {
        "prefix": "HINTMSG_DISCARD",
        "description": "请选择要丢弃的手牌",
        "body": "HINTMSG_DISCARD"
    },
    "EFFECT_SEND_REPLACE": {
        "prefix": "EFFECT_SEND_REPLACE",
        "description": "可以不送去XX而送去OO（甜点城堡等）",
        "body": "EFFECT_SEND_REPLACE"
    },
    "CheckWithSumGreater": {
        "prefix": "CheckWithSumGreater",
        "description": "•Group.CheckWithSumGreater(Group g, function f, int sum, ...)\n子集求和判定函数之二，f为返回一个interger值的函数  \n检查卡片组g中是否存在一个子集满足以f对子集的每一个元素求值的和刚好大于或者等于sum，从第4个参数开始为额外参数  \n比如：g:CheckWithSumGreater(Card.GetRitualLevel,8)  \n\t检查g中是否存在一个子集满足子集的仪式用等级之和大于等于8  \n\t注：判定必须是“刚好”大于或者等于  \n\t以等级为例，要使等级合计大于等于8，可以选择LV1+LV7而不可以选择LV1+LV4+LV4(在这些选择都满足的情况下)  \n",
        "body": "CheckWithSumGreater"
    },
    "Card.IsReleasable": {
        "prefix": "Card.IsReleasable",
        "description": "•Card.IsReleasable(Card c)\n检查c是否可以被解放（非上级召唤用）  \n如果 c 满足以下条件，都会返回 false  \n召唤(广义的)之际、 在墓地或者除外、 在手卡并且是魔法·陷阱、 玩家受到不能把卡解放的效果影响、 不能做上级召唤以外的祭品  \n",
        "body": "Card.IsReleasable"
    },
    "EFFECT_DRAW_COUNT": {
        "prefix": "EFFECT_DRAW_COUNT",
        "description": "抽卡阶段的抽卡数",
        "body": "EFFECT_DRAW_COUNT"
    },
    "Card.GetFusionCode": {
        "prefix": "Card.GetFusionCode",
        "description": "•Card.GetFusionCode(Card c)\n返回c作为融合素材时的卡号（包括c原本的卡号）  \n",
        "body": "Card.GetFusionCode"
    },
    "Card.IsCanBeXyzMaterial": {
        "prefix": "Card.IsCanBeXyzMaterial",
        "description": "•Card.IsCanBeXyzMaterial(Card c, Card sc|nil)\n检查c是否可以成为[超量怪兽sc的]超量素材,没有指定sc的场合，必须填nil  \n",
        "body": "Card.IsCanBeXyzMaterial"
    },
    "Card.IsRankAbove": {
        "prefix": "Card.IsRankAbove",
        "description": "•Card.IsRankAbove(Card c, int rank)\n检查c是否是阶级rank以上  \n",
        "body": "Card.IsRankAbove"
    },
    "Debug.PreAddCounter": {
        "prefix": "Debug.PreAddCounter",
        "description": "•Debug.PreAddCounter(Card c, int counter_type[, int count=0])\n为c添加count个counter_type的指示物  \n",
        "body": "Debug.PreAddCounter"
    },
    "Card.IsRelateToBattle": {
        "prefix": "Card.IsRelateToBattle",
        "description": "•Card.IsRelateToBattle(Card c)\n检查c是否和本次战斗关联  \n注：此效果通常用于伤害计算后伤害阶段结束前，用于检查战斗的卡是否离场过  \n",
        "body": "Card.IsRelateToBattle"
    },
    "bdgcon": {
        "prefix": "bdgcon",
        "description": "•aux.bdgcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且战斗破坏对方怪兽送去墓地 的 condition  \nfunction Auxiliary.bdgcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\tlocal bc=c:GetBattleTarget()  \n\treturn c:IsRelateToBattle() and bc:IsLocation(LOCATION_GRAVE) and bc:IsType(TYPE_MONSTER)  \nend  \n",
        "body": "bdgcon"
    },
    "EFFECT_CANNOT_DISEFFECT": {
        "prefix": "EFFECT_CANNOT_DISEFFECT",
        "description": "效果處理時不能被无效",
        "body": "EFFECT_CANNOT_DISEFFECT"
    },
    "Effect.GetOwnerPlayer": {
        "prefix": "Effect.GetOwnerPlayer",
        "description": "•Effect.GetOwnerPlayer(Effect e)\n返回效果 e 的OwnerPlayer属性，一般是Owner的控制者  \n",
        "body": "Effect.GetOwnerPlayer"
    },
    "Card.EnableCounterPermit": {
        "prefix": "Card.EnableCounterPermit",
        "description": "•Card.EnableCounterPermit(Card c, int countertype[, int location, function filter])\n允许c[在位置location]放置[满足条件 filter 的]需要“可以放置”才能放置的指示物countertype  \nlocation的默认值与c的种类有关，灵摆怪兽需要指定能否在怪兽区域或灵摆区域放置指示物  \n",
        "body": "Card.EnableCounterPermit"
    },
    "RESETS_STANDARD": {
        "prefix": "RESETS_STANDARD",
        "description": "RESET_TOFIELD+RESET_LEAVE+RESET_TODECK+RESET_TOHAND+RESET_TEMP_REMOVE+RESET_REMOVE+RESET_TOGRAVE+RESET_TURN_SET",
        "body": "RESETS_STANDARD"
    },
    "aux.AddRitualProcGreater2Code2": {
        "prefix": "aux.AddRitualProcGreater2Code2",
        "description": "•aux.AddRitualProcGreater2Code2(Card c, int code1, int code2, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \ncode1,code2 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1,code2)  \n\taux.AddRitualProcGreater2(c,aux.FilterBoolFunction(Card.IsCode,code1,code2),Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcGreater2Code2"
    },
    "Card.SetCounterLimit": {
        "prefix": "Card.SetCounterLimit",
        "description": "•Card.SetCounterLimit(Card c, int countertype, int count)\n设定c放置countertype类型指示物的上限  \n",
        "body": "Card.SetCounterLimit"
    },
    "Card.GetLinkAttribute": {
        "prefix": "Card.GetLinkAttribute",
        "description": "•Card.GetLinkAttribute(Card c[, int player=PLAYER_NONE])\n返回c[由player连接召唤时]用作连接素材时的属性  \n",
        "body": "Card.GetLinkAttribute"
    },
    "GetValueType": {
        "prefix": "GetValueType",
        "description": "•aux.GetValueType(any value)\n返回 value 在lua中的type  \n",
        "body": "GetValueType"
    },
    "Group.__band": {
        "prefix": "Group.__band",
        "description": "•Group.__band(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 和 target2 中相同的卡（就是那张卡同时存在于 target1 和 target2 ）全部添加到 这个卡片组里，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n",
        "body": "Group.__band"
    },
    "EFFECT_SET_POSITION": {
        "prefix": "EFFECT_SET_POSITION",
        "description": "設定表示形式",
        "body": "EFFECT_SET_POSITION"
    },
    "CATEGORY_TODECK": {
        "prefix": "CATEGORY_TODECK",
        "description": "回卡组效果",
        "body": "CATEGORY_TODECK"
    },
    "EVENT_MSET": {
        "prefix": "EVENT_MSET",
        "description": "放置怪兽时",
        "body": "EVENT_MSET"
    },
    "Duel.SwapControl": {
        "prefix": "Duel.SwapControl",
        "description": "•Duel.SwapControl(Card|Group targets1, Card|Group targets2[, int reset_phase=0, int reset_count=0])\n交换targets1与targets2的控制权，返回值表示是否成功  \n第三个第四个参数同 Duel.GetControl  \n",
        "body": "Duel.SwapControl"
    },
    "STATUS_SUMMON_TURN": {
        "prefix": "STATUS_SUMMON_TURN",
        "description": "在本回合召喚/SET",
        "body": "STATUS_SUMMON_TURN"
    },
    "PHASE_BATTLE": {
        "prefix": "PHASE_BATTLE",
        "description": "战斗阶段結束",
        "body": "PHASE_BATTLE"
    },
    "EFFECT_USE_EXTRA_SZONE": {
        "prefix": "EFFECT_USE_EXTRA_SZONE",
        "description": "魔法区域封锁",
        "body": "EFFECT_USE_EXTRA_SZONE"
    },
    "dogcon": {
        "prefix": "dogcon",
        "description": "•aux.dogcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否是被对方破坏送去墓地 SetCondition  \nfunction Auxiliary.dogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:GetPreviousControler()==tp and c:IsReason(REASON_DESTROY) and rp==1-tp  \nend  \n",
        "body": "dogcon"
    },
    "AddRitualProcGreater2Code2": {
        "prefix": "AddRitualProcGreater2Code2",
        "description": "•aux.AddRitualProcGreater2Code2(Card c, int code1, int code2, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \ncode1,code2 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1,code2)  \n\taux.AddRitualProcGreater2(c,aux.FilterBoolFunction(Card.IsCode,code1,code2),Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcGreater2Code2"
    },
    "RACE_CREATORGOD": {
        "prefix": "RACE_CREATORGOD",
        "description": "创造神",
        "body": "RACE_CREATORGOD"
    },
    "Group.Clone": {
        "prefix": "Group.Clone",
        "description": "•Group.Clone(Group g)\n新建卡片组g的副本  \n",
        "body": "Group.Clone"
    },
    "Duel.RaiseEvent": {
        "prefix": "Duel.RaiseEvent",
        "description": "•Duel.RaiseEvent(Group|Card eg, int code, Effect re, int r, int rp, int ep, int ev)\n以eg,ep,ev,re,r,rp触发一个时点 code  \n",
        "body": "Duel.RaiseEvent"
    },
    "Card.ResetEffect": {
        "prefix": "Card.ResetEffect",
        "description": "•Card.ResetEffect(Card c, int reset_code, int reset_type)\n以重置类型为reset_type、重置种类为reset_code手动重置c受到的效果的影响  \nreset_type只能是以下类型，对应的重置种类为  \nRESET_EVENT       发生事件重置        reset_code为事件  \nRESET_PHASE       阶段结束重置        reset_code为阶段  \nRESET_CODE        重置指定code的效果  reset_code为效果的种类code，只能重置EFFECT_TYPE_SINGLE的永续型效果  \nRESET_COPY        重置复制的效果      reset_code为copy_id  \nRESET_CARD        重置卡片的效果      reset_code为效果owner的卡号  \n",
        "body": "Card.ResetEffect"
    },
    "GetRank": {
        "prefix": "GetRank",
        "description": "•Card.GetRank(Card c)\n返回c的当前阶级  \n",
        "body": "GetRank"
    },
    "CopyEffect": {
        "prefix": "CopyEffect",
        "description": "•Card.CopyEffect(Card c, int code, int reset_flag[, int reset_count=1])\n为c添加卡号是code的卡的可复制的效果，并且添加额外的reset条件  \n返回值是表示复制效果的代号id  \n",
        "body": "CopyEffect"
    },
    "EFFECT_REMOVE_REDIRECT": {
        "prefix": "EFFECT_REMOVE_REDIRECT",
        "description": "除外时重新指定去向",
        "body": "EFFECT_REMOVE_REDIRECT"
    },
    "Effect.GetLabelObject": {
        "prefix": "Effect.GetLabelObject",
        "description": "•Effect.GetLabelObject(Effect e)\n返回效果 e 的LabelObject属性  \n",
        "body": "Effect.GetLabelObject"
    },
    "EFFECT_UPDATE_LEVEL": {
        "prefix": "EFFECT_UPDATE_LEVEL",
        "description": "改变等级",
        "body": "EFFECT_UPDATE_LEVEL"
    },
    "ACTIVITY_BATTLE_PHASE": {
        "prefix": "ACTIVITY_BATTLE_PHASE",
        "description": "not available in custom counter",
        "body": "ACTIVITY_BATTLE_PHASE"
    },
    "EFFECT_OVERLAY_REMOVE_REPLACE": {
        "prefix": "EFFECT_OVERLAY_REMOVE_REPLACE",
        "description": "代替去除超量素材",
        "body": "EFFECT_OVERLAY_REMOVE_REPLACE"
    },
    "aux.MZoneSequence": {
        "prefix": "aux.MZoneSequence",
        "description": "•aux.MZoneSequence(int seq)\n返回是第几列怪兽区，从左到右 分别是 0~4 ,若在 额外怪兽区，则返回 左 1 或者 右 3   \n",
        "body": "aux.MZoneSequence"
    },
    "RitualUltimateFilter": {
        "prefix": "RitualUltimateFilter",
        "description": "•aux.RitualUltimateFilter(Card c, function filter, Effect e, int tp, Group m1, Group m2, function level_function, string greater_or_equal, bool chk)\n仪式素材检测。检测 m1 和 m2 中是否存在满足条件的用于仪式召唤 c 的素材。m1 必须要有  \nfilter 为仪式怪兽满足的条件， level_function 表示仪式召唤要满足的等级(返回值为int类型的函数)  \ngreater_or_equal 的值只有 \"Greater\" 和 \"Equal\"  \nchk 这个参数似乎不是必须要有  \n",
        "body": "RitualUltimateFilter"
    },
    "Card.IsAbleToHandAsCost": {
        "prefix": "Card.IsAbleToHandAsCost",
        "description": "•Card.IsAbleToHandAsCost(Card c)\n检查c是否可以作为cost送去手牌  \n注：此函数会在Card.IsAbleToHand的基础上追加检测c的实际目的地  \n当c送往手牌会被送去其它地方时（如缩退回路适用中，或者c是融合、同调 等额外怪兽的一种），此函数返回false  \n##以下几个函数类似  \n",
        "body": "Card.IsAbleToHandAsCost"
    },
    "EFFECT_TOSS_COIN_REPLACE": {
        "prefix": "EFFECT_TOSS_COIN_REPLACE",
        "description": "重新抛硬币",
        "body": "EFFECT_TOSS_COIN_REPLACE"
    },
    "ConfirmExtratop": {
        "prefix": "ConfirmExtratop",
        "description": "•Duel.ConfirmExtratop(int player, int count)\n确认玩家player额外卡组里侧的卡 最上方count张卡  \n",
        "body": "ConfirmExtratop"
    },
    "PreEquip": {
        "prefix": "PreEquip",
        "description": "•Debug.PreEquip(Card equip_card, Card target)\n为target添加装备equip_card ，返回值表示是否成功  \n",
        "body": "PreEquip"
    },
    "IsPlayerCanSummon": {
        "prefix": "IsPlayerCanSummon",
        "description": "•Duel.IsPlayerCanSummon(int player[, int sumtype, Card c])\n检查玩家player是否可以通常召唤[c，以sumtype方式]  \n如果需要可选参数，则必须全部使用  \n仅当玩家受到“不能召唤”等效果的影响时返回false  \n",
        "body": "IsPlayerCanSummon"
    },
    "RACE_ZOMBIE": {
        "prefix": "RACE_ZOMBIE",
        "description": "不死",
        "body": "RACE_ZOMBIE"
    },
    "ShuffleHand": {
        "prefix": "ShuffleHand",
        "description": "•Duel.ShuffleHand(int player)\n手动洗切玩家player的手卡  \n注：会重置洗卡检测的状态  \n",
        "body": "ShuffleHand"
    },
    "AddCodeList": {
        "prefix": "AddCodeList",
        "description": "•aux.AddCodeList(Card c, int code1[, ...])\n为卡片 c 添加卡名记述  \n",
        "body": "AddCodeList"
    },
    "IsDirectAttacked": {
        "prefix": "IsDirectAttacked",
        "description": "•Card.IsDirectAttacked(Card c)\n检查c是否直接攻击过  \n",
        "body": "IsDirectAttacked"
    },
    "CheckFusionMaterial": {
        "prefix": "CheckFusionMaterial",
        "description": "•Card.CheckFusionMaterial(Card c[, Group mg|nil, Card gc|nil, int chkf=PLAYER_NONE, int not_material=FALSE])\n检查场上[或mg]是否包含了c需要[必须包含gc在内]的一组融合素材  \n##根据c的种类为EFFECT_FUSION_MATERIAL的效果的Condition函数检查  \n",
        "body": "CheckFusionMaterial"
    },
    "Card.IsCanBeBattleTarget": {
        "prefix": "Card.IsCanBeBattleTarget",
        "description": "•Card.IsCanBeBattleTarget(Card c1, Card c2)\n检查c1是否可以成为c2的攻击目标  \n",
        "body": "Card.IsCanBeBattleTarget"
    },
    "SelectWithSumGreater": {
        "prefix": "SelectWithSumGreater",
        "description": "•Group.SelectWithSumGreater(Group g, int player, function f, int sum, ...)\n让玩家player从卡片组g中选取一个子集使子集的特定函数f的和刚好大于等于sum，从第5个参数开始为额外参数  \n",
        "body": "SelectWithSumGreater"
    },
    "EFFECT_EXTRA_RELEASE": {
        "prefix": "EFFECT_EXTRA_RELEASE",
        "description": "必須使用的代替解放（灵魂交错）",
        "body": "EFFECT_EXTRA_RELEASE"
    },
    "EVENT_REMOVE": {
        "prefix": "EVENT_REMOVE",
        "description": "除外时",
        "body": "EVENT_REMOVE"
    },
    "aux.IsInGroup": {
        "prefix": "aux.IsInGroup",
        "description": "•aux.IsInGroup(Card c, Group g)\nfunction Auxiliary.IsInGroup(c,g)  \n\treturn g:IsContains(c)  \nend  \n",
        "body": "aux.IsInGroup"
    },
    "EFFECT_EXTRA_RELEASE_NONSUM": {
        "prefix": "EFFECT_EXTRA_RELEASE_NONSUM",
        "description": "代替效果COST的解放（闇黒世界）",
        "body": "EFFECT_EXTRA_RELEASE_NONSUM"
    },
    "Duel.AnnounceNumber": {
        "prefix": "Duel.AnnounceNumber",
        "description": "•Duel.AnnounceNumber(int player, int number, ...)\n让玩家player宣言一个数字  \n从第二个参数开始，每一个参数代表一个可宣言的数字  \n第一个返回值是宣言的数字，第二个返回值是宣言数字在所有选项中的位置  \n",
        "body": "Duel.AnnounceNumber"
    },
    "Duel.GetReleaseGroup": {
        "prefix": "Duel.GetReleaseGroup",
        "description": "•Duel.GetReleaseGroup(int player[, bool use_hand=false])\n返回玩家player可解放（非上级召唤用）的卡片组， use_hand=true 则包括手卡  \n",
        "body": "Duel.GetReleaseGroup"
    },
    "Duel.SwapDeckAndGrave": {
        "prefix": "Duel.SwapDeckAndGrave",
        "description": "•Duel.SwapDeckAndGrave(int player)\n现世与冥界的逆转专用。把玩家player的卡组和墓地交换  \n",
        "body": "Duel.SwapDeckAndGrave"
    },
    "STATUS_ACT_FROM_HAND": {
        "prefix": "STATUS_ACT_FROM_HAND",
        "description": "從手牌发动",
        "body": "STATUS_ACT_FROM_HAND"
    },
    "IsLinkSummonable": {
        "prefix": "IsLinkSummonable",
        "description": "•Card.IsLinkSummonable(Card c, Group mg|nil[, Card lcard, minc=0, maxc=0])\n检查是否可以用[包含卡 lcard 的]场上[或mg]的卡[中选出 minc-maxc 个连接素材]对c进行连接召唤手续  \n如果mg为nil，并且没有 lcard，则此函数与 c:IsSpecialSummonable(SUMMON_TYPE_LINK)作用相同  \nc 如果不是连接会返回 false  \n",
        "body": "IsLinkSummonable"
    },
    "REASON_EFFECT": {
        "prefix": "REASON_EFFECT",
        "description": "效果",
        "body": "REASON_EFFECT"
    },
    "TYPE_COUNTER": {
        "prefix": "TYPE_COUNTER",
        "description": "反击",
        "body": "TYPE_COUNTER"
    },
    "REASON_FUSION": {
        "prefix": "REASON_FUSION",
        "description": "用於融合召喚",
        "body": "REASON_FUSION"
    },
    "IsAllColumn": {
        "prefix": "IsAllColumn",
        "description": "•Card.IsAllColumn(Card c)\n检查与c同一纵列的区域是否全都有卡  \n",
        "body": "IsAllColumn"
    },
    "EFFECT_INDESTRUCTABLE_BATTLE": {
        "prefix": "EFFECT_INDESTRUCTABLE_BATTLE",
        "description": "不会被战斗破坏",
        "body": "EFFECT_INDESTRUCTABLE_BATTLE"
    },
    "GetPreviousRankOnField": {
        "prefix": "GetPreviousRankOnField",
        "description": "•Card.GetPreviousRankOnField(Card c)\n返回c位置变化之前在场上的阶级  \n",
        "body": "GetPreviousRankOnField"
    },
    "Select": {
        "prefix": "Select",
        "description": "•Group.Select(Group g, int player, int min, int max, Card|Group ex|nil)\n让玩家player从卡片组g中选择min-max张不等于ex的卡  \n",
        "body": "Select"
    },
    "HINTMSG_ATTRIBUTE": {
        "prefix": "HINTMSG_ATTRIBUTE",
        "description": "请选择要宣言的属性",
        "body": "HINTMSG_ATTRIBUTE"
    },
    "EFFECT_DISABLE_EFFECT": {
        "prefix": "EFFECT_DISABLE_EFFECT",
        "description": "效果无效（聖杯）",
        "body": "EFFECT_DISABLE_EFFECT"
    },
    "TIMING_EQUIP": {
        "prefix": "TIMING_EQUIP",
        "description": "装备时点",
        "body": "TIMING_EQUIP"
    },
    "Card.IsNotTuner": {
        "prefix": "Card.IsNotTuner",
        "description": "•Card.IsNotTuner(Card c)\n检查c是否可以当成非调整来使用  \n",
        "body": "Card.IsNotTuner"
    },
    "aux.IsNotDualState": {
        "prefix": "aux.IsNotDualState",
        "description": "•aux.IsNotDualState(Effect e)\naux.IsDualState的反义（用于效果的Condition属性）  \n",
        "body": "aux.IsNotDualState"
    },
    "EFFECT_ACTIVATE_COST": {
        "prefix": "EFFECT_ACTIVATE_COST",
        "description": "发动代价（魔力之枷）",
        "body": "EFFECT_ACTIVATE_COST"
    },
    "Hint": {
        "prefix": "Hint",
        "description": "•Duel.Hint(int hint_type, int player, int desc)\n给玩家player发送hint_type类型的消息提示，提示内容为desc  \n#hint_type只能为以下类型：  \n#HINT_SELECTMSG\t\t将提示内容写入缓存，用于选择卡片的提示，例如Duel.SelectMatchingCard等  \n#HINT_OPSELECTED\t向player提示“对方选择了：...”，常用于向对方玩家提示选择发动了什么效果  \n#HINT_CARD\t\t\t此时desc应为卡号，手动显示卡片发动的动画，常用于提示不入连锁的处理  \n#HINT_RACE\t\t\t此时desc应为种族，向player提示“对方宣言了：...”种族  \n#HINT_ATTRIB\t\t此时desc应为属性，向player提示“对方宣言了：...”属性  \n#HINT_CODE\t\t\t此时desc应为卡号，向player提示“对方宣言了：...”卡片  \n#HINT_NUMBER\t\t此时desc视为单纯的数字，向player提示“对方选择了：...”数字  \n#HINT_MESSAGE\t\t弹出一个对话框显示信息  \n#HINT_EVENT\t\t\t将提示内容写入缓存，用于时点的提示信息（诱发即时效果的提示）  \n#HINT_EFFECT\t\t同HINT_CARD  \n",
        "body": "Hint"
    },
    "Duel.HintSelection": {
        "prefix": "Duel.HintSelection",
        "description": "•Duel.HintSelection(Group g)\n手动为卡片组g显示被选为对象的动画效果，并记录这些卡被选为对象(广义的)  \n",
        "body": "Duel.HintSelection"
    },
    "EFFECT_FLAG_IGNORE_IMMUNE": {
        "prefix": "EFFECT_FLAG_IGNORE_IMMUNE",
        "description": "无视效果免疫",
        "body": "EFFECT_FLAG_IGNORE_IMMUNE"
    },
    "EVENT_DESTROYED": {
        "prefix": "EVENT_DESTROYED",
        "description": "被破坏时",
        "body": "EVENT_DESTROYED"
    },
    "EFFECT_EXTRA_ATTACK_MONSTER": {
        "prefix": "EFFECT_EXTRA_ATTACK_MONSTER",
        "description": "對怪獸攻擊X次",
        "body": "EFFECT_EXTRA_ATTACK_MONSTER"
    },
    "tgoval": {
        "prefix": "tgoval",
        "description": "•aux.tgoval(Effect e, Effect re, int rp)\n不会成为对方的卡的效果对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.tgoval(e,re,rp)  \n\treturn rp==1-e:GetHandlerPlayer()  \nend  \n",
        "body": "tgoval"
    },
    "GetMaxGroup": {
        "prefix": "GetMaxGroup",
        "description": "•Group.GetMaxGroup(Group g, function f, ...)\nf为返回一个interger值的函数，从g中筛选出具有最大的f的值的卡  \n第2个返回值为这个最大值，从第3个参数开始为额外参数  \n要使用第2个返回值注意检查g非空  \n",
        "body": "GetMaxGroup"
    },
    "Card.GetPreviousPosition": {
        "prefix": "Card.GetPreviousPosition",
        "description": "•Card.GetPreviousPosition(Card c)\n返回c位置变化前的表示形式  \n",
        "body": "Card.GetPreviousPosition"
    },
    "STATUS_BATTLE_RESULT": {
        "prefix": "STATUS_BATTLE_RESULT",
        "description": "傷害計算結果預計要破壞的怪獸",
        "body": "STATUS_BATTLE_RESULT"
    },
    "Card.GetAttribute": {
        "prefix": "Card.GetAttribute",
        "description": "•Card.GetAttribute(Card c)\n返回c的当前属性  \n注：对某些多属性怪兽如光与暗之龙，此函数的返回值可能是几个属性的组合值  \n",
        "body": "Card.GetAttribute"
    },
    "IsAbleToGraveAsCost": {
        "prefix": "IsAbleToGraveAsCost",
        "description": "•Card.IsAbleToGraveAsCost(Card c)\n检查c是否可以作为cost送去墓地  \n",
        "body": "IsAbleToGraveAsCost"
    },
    "Card.IsStatus": {
        "prefix": "Card.IsStatus",
        "description": "•Card.IsStatus(Card c, int status)\n检查c是否包含某个状态码  \n",
        "body": "Card.IsStatus"
    },
    "EFFECT_FLAG2_COF": {
        "prefix": "EFFECT_FLAG2_COF",
        "description": "通常魔法卡在MP1以外发动（邪恶的仪式的特殊处理）",
        "body": "EFFECT_FLAG2_COF"
    },
    "GetBattledGroupCount": {
        "prefix": "GetBattledGroupCount",
        "description": "•Card.GetBattledGroupCount(Card c)\n返回与c本回合进行过战斗的的卡片数量  \n",
        "body": "GetBattledGroupCount"
    },
    "EFFECT_MATCH_KILL": {
        "prefix": "EFFECT_MATCH_KILL",
        "description": "Match胜利(胜利龙)",
        "body": "EFFECT_MATCH_KILL"
    },
    "SetSelectedCard": {
        "prefix": "SetSelectedCard",
        "description": "•Duel.SetSelectedCard(Card|Group targets)\n将 targets 设置为必须选择的卡（？）  \n",
        "body": "SetSelectedCard"
    },
    "HINT_ATTRIB": {
        "prefix": "HINT_ATTRIB",
        "body": "HINT_ATTRIB"
    },
    "IsLinkState": {
        "prefix": "IsLinkState",
        "description": "•Card.IsLinkState(Card c)\n检查c是否是连接状态  \n",
        "body": "IsLinkState"
    },
    "DUEL_ATTACK_FIRST_TURN": {
        "prefix": "DUEL_ATTACK_FIRST_TURN",
        "description": "第一回合可以攻击(用于残局)",
        "body": "DUEL_ATTACK_FIRST_TURN"
    },
    "GetSequence": {
        "prefix": "GetSequence",
        "description": "•Card.GetSequence(Card c)\n返回c在当前位置的序号  \n在场上时，序号代表所在的格子，从左往右分别是0-4，场地魔法格的序号为5，左右灵摆区域为6-7  \n在其它地方时，序号表示的是第几张卡，最下面的卡的序号为0  \n",
        "body": "GetSequence"
    },
    "Card.GetOriginalCodeRule": {
        "prefix": "Card.GetOriginalCodeRule",
        "description": "•Card.GetOriginalCodeRule(Card c)\n返回c规则上的代号（这张卡规则上当作...使用）  \n",
        "body": "Card.GetOriginalCodeRule"
    },
    "IsCanBeEffectTarget": {
        "prefix": "IsCanBeEffectTarget",
        "description": "•Card.IsCanBeEffectTarget(Card c[, Effect e])\n检查c是否可以成为效果[e的]对象  \n",
        "body": "IsCanBeEffectTarget"
    },
    "DUEL_SIMPLE_AI": {
        "prefix": "DUEL_SIMPLE_AI",
        "description": "AI(用于残局)",
        "body": "DUEL_SIMPLE_AI"
    },
    "Card.GetEquipTarget": {
        "prefix": "Card.GetEquipTarget",
        "description": "•Card.GetEquipTarget(Card c)\n返回c当前的装备对象  \n",
        "body": "Card.GetEquipTarget"
    },
    "POS_FACEDOWN_ATTACK": {
        "prefix": "POS_FACEDOWN_ATTACK",
        "description": "(reserved)",
        "body": "POS_FACEDOWN_ATTACK"
    },
    "OPCODE_SUB": {
        "prefix": "OPCODE_SUB",
        "body": "OPCODE_SUB"
    },
    "HINTMSG_DICE": {
        "prefix": "HINTMSG_DICE",
        "description": "请选择骰子的结果",
        "body": "HINTMSG_DICE"
    },
    "EFFECT_FLAG_COUNT_LIMIT": {
        "prefix": "EFFECT_FLAG_COUNT_LIMIT",
        "description": "发动次数限制",
        "body": "EFFECT_FLAG_COUNT_LIMIT"
    },
    "Card.GetLeaveFieldDest": {
        "prefix": "Card.GetLeaveFieldDest",
        "description": "•Card.GetLeaveFieldDest(Card c)\n返回c离场时因改变去向的效果（如大宇宙）的目的地  \n",
        "body": "Card.GetLeaveFieldDest"
    },
    "Effect.GetCondition": {
        "prefix": "Effect.GetCondition",
        "description": "•Effect.GetCondition(Effect e)\n返回效果 e 的condition属性  \n",
        "body": "Effect.GetCondition"
    },
    "Duel.RaiseSingleEvent": {
        "prefix": "Duel.RaiseSingleEvent",
        "description": "•Duel.RaiseSingleEvent(Card eg, int code, Effect re, int r, int rp, int ep, int ev)\n以eg,ep,ev,re,r,rp为卡片ec触发一个单体时点 code  \n",
        "body": "Duel.RaiseSingleEvent"
    },
    "ASSUME_RACE": {
        "prefix": "ASSUME_RACE",
        "body": "ASSUME_RACE"
    },
    "EFFECT_CANNOT_PLACE_COUNTER": {
        "prefix": "EFFECT_CANNOT_PLACE_COUNTER",
        "description": "不能放置counter",
        "body": "EFFECT_CANNOT_PLACE_COUNTER"
    },
    "EFFECT_ADD_TYPE": {
        "prefix": "EFFECT_ADD_TYPE",
        "description": "增加卡片种类（types）",
        "body": "EFFECT_ADD_TYPE"
    },
    "CHINT_ATTRIBUTE": {
        "prefix": "CHINT_ATTRIBUTE",
        "body": "CHINT_ATTRIBUTE"
    },
    "EVENT_TO_GRAVE": {
        "prefix": "EVENT_TO_GRAVE",
        "description": "送去墓地时(不含REASON_RETURN)",
        "body": "EVENT_TO_GRAVE"
    },
    "Card.SetFlagEffectLabel": {
        "prefix": "Card.SetFlagEffectLabel",
        "description": "•Card.SetFlagEffectLabel(Card c, int code, int label)\n返回c是否存在种类为code的标识效果，若存在则设置其Label属性为label  \n",
        "body": "Card.SetFlagEffectLabel"
    },
    "EFFECT_DESTROY_REPLACE": {
        "prefix": "EFFECT_DESTROY_REPLACE",
        "description": "可選的代替破壞(將破壞改成其他動作)",
        "body": "EFFECT_DESTROY_REPLACE"
    },
    "EFFECT_SYNCHRO_MATERIAL": {
        "prefix": "EFFECT_SYNCHRO_MATERIAL",
        "description": "可以当作同调素材",
        "body": "EFFECT_SYNCHRO_MATERIAL"
    },
    "EFFECT_FLAG_SINGLE_RANGE": {
        "prefix": "EFFECT_FLAG_SINGLE_RANGE",
        "description": "只对自己有效",
        "body": "EFFECT_FLAG_SINGLE_RANGE"
    },
    "Card.AddMonsterAttribute": {
        "prefix": "Card.AddMonsterAttribute",
        "description": "•Card.AddMonsterAttribute(Card c, int type[, int attribute, int race, int level, int atk, int def])\n为魔陷卡c添加怪兽数值,type 为怪兽类型，不能是没有等级的怪兽  \n注：在数据库中有记录的数值视为原本数值  \n不再需要 Card.AddMonsterAttributeComplete(Card c)  \n",
        "body": "Card.AddMonsterAttribute"
    },
    "IsFacedown": {
        "prefix": "IsFacedown",
        "description": "•Card.IsFacedown(Card c)\n检查c是否是里侧表示  \n",
        "body": "IsFacedown"
    },
    "aux.DualNormalCondition": {
        "prefix": "aux.DualNormalCondition",
        "description": "•aux.DualNormalCondition(Effect e)\n检查二重怪兽e:GetHandler()是否为被视为通常怪兽的状态（用于效果的Condition属性）  \n",
        "body": "aux.DualNormalCondition"
    },
    "EFFECT_CHANGE_LEVEL_FINAL": {
        "prefix": "EFFECT_CHANGE_LEVEL_FINAL",
        "description": "N/A",
        "body": "EFFECT_CHANGE_LEVEL_FINAL"
    },
    "GetBattledCount": {
        "prefix": "GetBattledCount",
        "description": "•Duel.GetBattledCount(int player)\n返回玩家player这回合战斗过的次数   \n",
        "body": "GetBattledCount"
    },
    "ChangePosition": {
        "prefix": "ChangePosition",
        "description": "•Duel.ChangePosition(Card|Group targets, int au[, int ad=au, int du=au, int dd=au, bool noflip=false, bool setavailable=false])\n根据对应位置的参数改变targets里 对应形式 的表示形式。返回实际操作的数量。  \n若只有2个参数，则不管什么表示形式，都变成 第二个参数 代表的形式  \n表侧攻击表示 = au  \n里侧攻击表示 = ad  \n表侧守备表示 = du  \n里侧守备表示 = dd  \n如果noflip=true则不触发反转效果（但会触发反转时的诱发效果）  \n如果setavailable=true则对象之后变成里侧也发动反转效果  \n比如: Duel.ChangePosition(g,POS_FACEUP_DEFENSE,POS_FACEUP_DEFENSE,POS_FACEUP_ATTACK,POS_FACEUP_DEFENSE)  \n就表示 把卡片组g 中 原本(表侧攻击表示的卡 和 里侧攻击表示的卡 和 里侧守备表示的卡) 变成 表侧守备表示，  \n\t原本 表侧守备表示的卡 变成 表侧攻击表示  \n",
        "body": "ChangePosition"
    },
    "DUEL_TAG_MODE": {
        "prefix": "DUEL_TAG_MODE",
        "description": "双打PP",
        "body": "DUEL_TAG_MODE"
    },
    "EFFECT_FLAG_BOTH_SIDE": {
        "prefix": "EFFECT_FLAG_BOTH_SIDE",
        "description": "双方都能使用（部分场地，弹压）",
        "body": "EFFECT_FLAG_BOTH_SIDE"
    },
    "EVENT_DETACH_MATERIAL": {
        "prefix": "EVENT_DETACH_MATERIAL",
        "description": "去除超量素材时",
        "body": "EVENT_DETACH_MATERIAL"
    },
    "RACE_FIEND": {
        "prefix": "RACE_FIEND",
        "description": "恶魔",
        "body": "RACE_FIEND"
    },
    "CheckTribute": {
        "prefix": "CheckTribute",
        "description": "•Duel.CheckTribute(Card c, int min[, int max=min, Group mg|nil, int toplayer=c:GetControler(), int zone=0x1f])\n判断场上[或mg中]是否存在用于通常召唤c[到toplayer场上的区域 zone]的min[到max]个祭品  \n",
        "body": "CheckTribute"
    },
    "GetOperationCount": {
        "prefix": "GetOperationCount",
        "description": "•Duel.GetOperationCount(int chainc)\n返回连锁chainc包含的操作分类的数量  \n",
        "body": "GetOperationCount"
    },
    "GetHandler": {
        "prefix": "GetHandler",
        "description": "•Effect.GetHandler(Effect e)\n返回效果 e 在哪一张卡上生效(通常是用Card.RegisterEffect注册该效果的卡)  \n",
        "body": "GetHandler"
    },
    "REASON_REDIRECT": {
        "prefix": "REASON_REDIRECT",
        "description": "改变去向（大宇宙，带菌等）",
        "body": "REASON_REDIRECT"
    },
    "Duel.SelectReleaseGroup": {
        "prefix": "Duel.SelectReleaseGroup",
        "description": "•Duel.SelectReleaseGroup(int sel_player, function f|nil, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家sel_player从场上选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）  \n第6个参数开始为额外参数  \n",
        "body": "Duel.SelectReleaseGroup"
    },
    "EVENT_SPSUMMON": {
        "prefix": "EVENT_SPSUMMON",
        "description": "特殊召唤之际",
        "body": "EVENT_SPSUMMON"
    },
    "EFFECT_CANNOT_DISCARD_DECK": {
        "prefix": "EFFECT_CANNOT_DISCARD_DECK",
        "description": "不能把卡组的卡送去墓地",
        "body": "EFFECT_CANNOT_DISCARD_DECK"
    },
    "EFFECT_CHAIN_MATERIAL": {
        "prefix": "EFFECT_CHAIN_MATERIAL",
        "description": "玩家受到連鎖物質的效果影響",
        "body": "EFFECT_CHAIN_MATERIAL"
    },
    "Duel.IsCanRemoveCounter": {
        "prefix": "Duel.IsCanRemoveCounter",
        "description": "•Duel.IsCanRemoveCounter(int player, int s, int o, int countertype, int count, int reason)\n检查玩家player以reason为原因是否能移除场上的countertype类型的count个指示物  \ns表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置  \n",
        "body": "Duel.IsCanRemoveCounter"
    },
    "Duel.GetBattleDamage": {
        "prefix": "Duel.GetBattleDamage",
        "description": "•Duel.GetBattleDamage(int player)\n返回玩家player在本次战斗中受到的伤害  \n",
        "body": "Duel.GetBattleDamage"
    },
    "Duel.SetCoinResult": {
        "prefix": "Duel.SetCoinResult",
        "description": "•Duel.SetCoinResult(int res, ... )\n强行修改投硬币的结果为res ,最多5个参数，res只能是 0 或 1, ，其他全算作 0  \n此函数用于永续的EVENT_TOSS_COIN事件中  \n",
        "body": "Duel.SetCoinResult"
    },
    "TYPE_RITUAL": {
        "prefix": "TYPE_RITUAL",
        "description": "仪式",
        "body": "TYPE_RITUAL"
    },
    "EFFECT_UNION_STATUS": {
        "prefix": "EFFECT_UNION_STATUS",
        "description": "同盟状态",
        "body": "EFFECT_UNION_STATUS"
    },
    "GetValue": {
        "prefix": "GetValue",
        "description": "•Effect.GetValue(Effect e)\n返回效果 e 的value属性  \n",
        "body": "GetValue"
    },
    "aux.AddFusionProcShaddoll": {
        "prefix": "aux.AddFusionProcShaddoll",
        "description": "•aux.AddFusionProcShaddoll(Card c, int attribute)\n影依融合怪兽专用，attribute 为需要的属性  \n",
        "body": "aux.AddFusionProcShaddoll"
    },
    "GetOriginalLeftScale": {
        "prefix": "GetOriginalLeftScale",
        "description": "•Card.GetOriginalLeftScale(Card c)\n返回c的原本的左灵摆刻度  \n",
        "body": "GetOriginalLeftScale"
    },
    "Card.IsAttackAbove": {
        "prefix": "Card.IsAttackAbove",
        "description": "•Card.IsAttackAbove(Card c, int atk)\n检查c是否是攻击力atk以上  \n",
        "body": "Card.IsAttackAbove"
    },
    "Duel.BreakEffect": {
        "prefix": "Duel.BreakEffect",
        "description": "•Duel.BreakEffect()\n中断当前效果，使之后的效果处理视为不同时处理，此函数会造成错时点  \n",
        "body": "Duel.BreakEffect"
    },
    "__sub": {
        "prefix": "__sub",
        "description": "•Group.__sub(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 中的 全部卡添加到这个卡片组，然后再从这个卡片组把 target2 的卡全部删除，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n",
        "body": "__sub"
    },
    "Card.IsCanTurnSet": {
        "prefix": "Card.IsCanTurnSet",
        "description": "•Card.IsCanTurnSet(Card c)\n检查c是否可以转成里侧表示  \n",
        "body": "Card.IsCanTurnSet"
    },
    "Duel.ConfirmCards": {
        "prefix": "Duel.ConfirmCards",
        "description": "•Duel.ConfirmCards(int player, Card|Group targets)\n给玩家player确认targets  \n",
        "body": "Duel.ConfirmCards"
    },
    "IsStatus": {
        "prefix": "IsStatus",
        "description": "•Card.IsStatus(Card c, int status)\n检查c是否包含某个状态码  \n",
        "body": "IsStatus"
    },
    "HINTMSG_SET": {
        "prefix": "HINTMSG_SET",
        "description": "请选择要盖放的卡",
        "body": "HINTMSG_SET"
    },
    "EFFECT_FLAG_CARD_TARGET": {
        "prefix": "EFFECT_FLAG_CARD_TARGET",
        "description": "取对象效果",
        "body": "EFFECT_FLAG_CARD_TARGET"
    },
    "Debug.ReloadFieldBegin": {
        "prefix": "Debug.ReloadFieldBegin",
        "description": "•Debug.ReloadFieldBegin(int flag[, int rule=3])\n以选项flag开始布局  \n\tflag 残局： DUEL_ATTACK_FIRST_TURN+DUEL_SIMPLE_AI  \n\t\t 大师1规则： DUEL_OBSOLETE_RULING  \n\trule=4 是新大师规则  \n",
        "body": "Debug.ReloadFieldBegin"
    },
    "EVENT_LEAVE_FIELD_P": {
        "prefix": "EVENT_LEAVE_FIELD_P",
        "description": "離場的卡片移動前",
        "body": "EVENT_LEAVE_FIELD_P"
    },
    "Card.IsHasEffect": {
        "prefix": "Card.IsHasEffect",
        "description": "•Card.IsHasEffect(Card c, int code[, int check_player])\n检查c是否受到效果种类是code的效果的影响  \n没有则返回nil  \n有则返回那些效果  \n",
        "body": "Card.IsHasEffect"
    },
    "EFFECT_SPSUMMON_COUNT_LIMIT": {
        "prefix": "EFFECT_SPSUMMON_COUNT_LIMIT",
        "description": "特殊召唤次数限制",
        "body": "EFFECT_SPSUMMON_COUNT_LIMIT"
    },
    "Equal": {
        "prefix": "Equal",
        "description": "•Group.Equal(Group g1, Group g2)\n判断g1和g2是否相同  \n",
        "body": "Equal"
    },
    "Debug.PreSetTarget": {
        "prefix": "Debug.PreSetTarget",
        "description": "•Debug.PreSetTarget(Card c, Card target)\n把target选为c的永续对象  \n",
        "body": "Debug.PreSetTarget"
    },
    "FromCards": {
        "prefix": "FromCards",
        "description": "•Group.FromCards(...)\n不定参数，把传入的所有卡组合成一个卡片组g并返回，所有参数只能是 Card 类型。没有参数时，相当于Group.CreateGroup()  \n",
        "body": "FromCards"
    },
    "EFFECT_ADD_LINK_SETCODE": {
        "prefix": "EFFECT_ADD_LINK_SETCODE",
        "description": "reserve",
        "body": "EFFECT_ADD_LINK_SETCODE"
    },
    "CARD_TWINKLE_MOSS": {
        "prefix": "CARD_TWINKLE_MOSS",
        "description": "光輝苔蘚",
        "body": "CARD_TWINKLE_MOSS"
    },
    "EFFECT_REVERSE_DECK": {
        "prefix": "EFFECT_REVERSE_DECK",
        "description": "翻转卡组",
        "body": "EFFECT_REVERSE_DECK"
    },
    "Card.GetEffectCount": {
        "prefix": "Card.GetEffectCount",
        "description": "•Card.GetEffectCount(Card c, int code)\n返回c受到影响的种类是code的效果的数量  \n",
        "body": "Card.GetEffectCount"
    },
    "EFFECT_FUSION_SUBSTITUTE": {
        "prefix": "EFFECT_FUSION_SUBSTITUTE",
        "description": "代替融合素材",
        "body": "EFFECT_FUSION_SUBSTITUTE"
    },
    "Duel.CheckChainUniqueness": {
        "prefix": "Duel.CheckChainUniqueness",
        "description": "•Duel.CheckChainUniqueness()\n检查当前连锁中是否存在同名卡的发动，返回true表示无同名卡  \n",
        "body": "Duel.CheckChainUniqueness"
    },
    "Effect.SetCategory": {
        "prefix": "Effect.SetCategory",
        "description": "•Effect.SetCategory(Effect e, int cate)\n设置效果 e 的Category属性  \n",
        "body": "Effect.SetCategory"
    },
    "IsPlayerCanDiscardDeck": {
        "prefix": "IsPlayerCanDiscardDeck",
        "description": "•Duel.IsPlayerCanDiscardDeck(int player, int count)\n检查玩家player是否可以把卡组顶端count张卡送去墓地  \n",
        "body": "IsPlayerCanDiscardDeck"
    },
    "STATUS_OPPO_BATTLE": {
        "prefix": "STATUS_OPPO_BATTLE",
        "description": "和對手的怪兽戰鬥",
        "body": "STATUS_OPPO_BATTLE"
    },
    "dscon": {
        "prefix": "dscon",
        "description": "•aux.dscon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 不是伤害阶段 或者 不是已经进行过伤害计算 的简单写法 SetCondition  \nfunction Auxiliary.bpcon(e,tp,eg,ep,ev,re,r,rp)  \n\treturn Duel.GetCurrentPhase()~=PHASE_DAMAGE or not Duel.IsDamageCalculated()  \nend  \n",
        "body": "dscon"
    },
    "EFFECT_FLAG_CLIENT_HINT": {
        "prefix": "EFFECT_FLAG_CLIENT_HINT",
        "description": "客户端提示",
        "body": "EFFECT_FLAG_CLIENT_HINT"
    },
    "EVENT_FLIP_SUMMON_SUCCESS": {
        "prefix": "EVENT_FLIP_SUMMON_SUCCESS",
        "description": "翻转召唤成功时",
        "body": "EVENT_FLIP_SUMMON_SUCCESS"
    },
    "Card.IsAttribute": {
        "prefix": "Card.IsAttribute",
        "description": "•Card.IsAttribute(Card c, int attribute)\n检查c是否属于属性attribute  \n",
        "body": "Card.IsAttribute"
    },
    "REASON_REPLACE": {
        "prefix": "REASON_REPLACE",
        "description": "代替",
        "body": "REASON_REPLACE"
    },
    "RACE_DINOSAUR": {
        "prefix": "RACE_DINOSAUR",
        "description": "恐龙",
        "body": "RACE_DINOSAUR"
    },
    "Card.SetUniqueOnField": {
        "prefix": "Card.SetUniqueOnField",
        "description": "•Card.SetUniqueOnField(Card c, int s, int o, function|int unique_code[, int unique_location=LOCATIOIN_ONFIELD])\n设置c以unique_code只能在场上[或怪兽区域或魔陷区域，由unique_location决定]只能存在1张,function 的返回值类型必须是int  \ns不为0会检查自己场上的唯一性，o不为0则检查对方场上的唯一性  \n",
        "body": "Card.SetUniqueOnField"
    },
    "EFFECT_DISABLE_FIELD": {
        "prefix": "EFFECT_DISABLE_FIELD",
        "description": "无效区域（扰乱王等）",
        "body": "EFFECT_DISABLE_FIELD"
    },
    "EFFECT_CANNOT_CHANGE_CONTROL": {
        "prefix": "EFFECT_CANNOT_CHANGE_CONTROL",
        "description": "不能改变控制权",
        "body": "EFFECT_CANNOT_CHANGE_CONTROL"
    },
    "aux.BeginPuzzle": {
        "prefix": "aux.BeginPuzzle",
        "description": "•aux.BeginPuzzle()\n开始残局  \n##此函数注册3个全局效果：  \n##回合结束时玩家的基本分变成0  \n##跳过玩家抽卡阶段与准备阶段  \n",
        "body": "aux.BeginPuzzle"
    },
    "RACE_THUNDER": {
        "prefix": "RACE_THUNDER",
        "description": "雷",
        "body": "RACE_THUNDER"
    },
    "GetAttackableTarget": {
        "prefix": "GetAttackableTarget",
        "description": "•Card.GetAttackableTarget(Card c)\n返回c可攻击的卡片组以及能否直接攻击  \n",
        "body": "GetAttackableTarget"
    },
    "GetOperatedGroup": {
        "prefix": "GetOperatedGroup",
        "description": "•Duel.GetOperatedGroup()\n此函数返回之前一次卡片操作实际操作的卡片组。包括  \nDuel.Destroy, Duel.Remove, Duel.SendtoGrave,   \nDuel.SendtoHand, Duel.SendtoDeck, Duel.SendtoExtraP, Duel.Release,   \nDuel.ChangePosition, Duel.SpecialSummon, Duel.DiscardDeck  \n",
        "body": "GetOperatedGroup"
    },
    "EFFECT_CANNOT_TO_HAND": {
        "prefix": "EFFECT_CANNOT_TO_HAND",
        "description": "不能加入手牌",
        "body": "EFFECT_CANNOT_TO_HAND"
    },
    "Card.GetOverlayCount": {
        "prefix": "Card.GetOverlayCount",
        "description": "•Card.GetOverlayCount(Card c)\n返回c当前叠放着的卡片数量  \n",
        "body": "Card.GetOverlayCount"
    },
    "TIMING_TOGRAVE": {
        "prefix": "TIMING_TOGRAVE",
        "description": "进墓地时点",
        "body": "TIMING_TOGRAVE"
    },
    "EFFECT_TO_DECK_REDIRECT": {
        "prefix": "EFFECT_TO_DECK_REDIRECT",
        "description": "回卡组时重新指定去向",
        "body": "EFFECT_TO_DECK_REDIRECT"
    },
    "Card.ReleaseRelation": {
        "prefix": "Card.ReleaseRelation",
        "description": "•Card.ReleaseRelation(Card c1, Card c2)\n手动释放c1对于c2的联系  \n",
        "body": "Card.ReleaseRelation"
    },
    "SetTarget": {
        "prefix": "SetTarget",
        "description": "•Effect.SetTarget(Effect e, function targ_func)\n设置效果 e 的Target属性  \n",
        "body": "SetTarget"
    },
    "EFFECT_ADD_LINK_RACE": {
        "prefix": "EFFECT_ADD_LINK_RACE",
        "description": "用作连接素材时的种族",
        "body": "EFFECT_ADD_LINK_RACE"
    },
    "aux.IsDualState": {
        "prefix": "aux.IsDualState",
        "description": "•aux.IsDualState(Effect e)\n检查二重怪兽e:GetHandler()是否是再度召唤状态（用于效果的Condition属性）  \n常用于二重怪兽再度召唤获得的效果e的Condition属性  \n",
        "body": "aux.IsDualState"
    },
    "aux.NecroValleyFilter": {
        "prefix": "aux.NecroValleyFilter",
        "description": "•aux.NecroValleyFilter(function f)\n根据过滤条件f返回一个新的过滤条件：满足f并且没有受王家长眠之谷的影响的卡  \nfunction Auxiliary.NecroValleyFilter(f)  \n\treturn\tfunction(target,...)  \n\t\t\t\treturn f(target,...) and not (target:IsHasEffect(EFFECT_NECRO_VALLEY) and Duel.IsChainDisablable(0))  \n\t\t\tend  \nend  \n",
        "body": "aux.NecroValleyFilter"
    },
    "AddSynchroProcedure2": {
        "prefix": "AddSynchroProcedure2",
        "description": "•aux.AddSynchroProcedure2(Card c, function f1, function f2)\n等价于aux.AddSynchroProcedure(c,f1,f2,1,1)  \n",
        "body": "AddSynchroProcedure2"
    },
    "Duel.AnnounceCoin": {
        "prefix": "Duel.AnnounceCoin",
        "description": "•Duel.AnnounceCoin(int player)\n让玩家player宣言硬币的正反面  \n",
        "body": "Duel.AnnounceCoin"
    },
    "AddRitualProcEqual2": {
        "prefix": "AddRitualProcEqual2",
        "description": "•aux.AddRitualProcEqual2(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcEqual2"
    },
    "RESET_TODECK": {
        "prefix": "RESET_TODECK",
        "description": "回卡组重置",
        "body": "RESET_TODECK"
    },
    "CheckSubGroup": {
        "prefix": "CheckSubGroup",
        "description": "•Group.CheckSubGroup(Group g, function f, int min=1, int max=#g, ...)\n检测卡片组 g 中是否存在满足 过滤条件 f，并且数量在 min-max 的子集  \nf 的函数原型为  \nfunction f(Group sg,...) end  \n",
        "body": "CheckSubGroup"
    },
    "LINK_MARKER_RIGHT": {
        "prefix": "LINK_MARKER_RIGHT",
        "description": "→",
        "body": "LINK_MARKER_RIGHT"
    },
    "RESET_LEAVE": {
        "prefix": "RESET_LEAVE",
        "description": "从场上移到其他位置/超量叠放重置",
        "body": "RESET_LEAVE"
    },
    "Duel.Summon": {
        "prefix": "Duel.Summon",
        "description": "•Duel.Summon(int player, Card c, bool ignore_count, Effect e|nil[, int min=0, int zone=0x1f])\n让玩家 player 以效果e对卡片c[在区域 zone]进行通常召唤(非set)，至少使用min个祭品  \n如果e=nil,那么就按照一般的通常召唤规则进行通常召唤  \n如果ignore_count=true，则忽略每回合的通常召唤次数限制  \n",
        "body": "Duel.Summon"
    },
    "GetCount": {
        "prefix": "GetCount",
        "description": "•Group.GetCount(Group g)\n返回卡片组g中卡的数量  \n",
        "body": "GetCount"
    },
    "HINTMSG_ATTACK": {
        "prefix": "HINTMSG_ATTACK",
        "description": "请选择攻击表示的怪兽",
        "body": "HINTMSG_ATTACK"
    },
    "Duel.Overlay": {
        "prefix": "Duel.Overlay",
        "description": "•Duel.Overlay(Card c, Card|Group ocard)\n把ocard作为c的叠放卡叠放  \n",
        "body": "Duel.Overlay"
    },
    "Effect.GetDescription": {
        "prefix": "Effect.GetDescription",
        "description": "•Effect.GetDescription(Effect e)\n返回效果 e 的效果描述，没有则无返回值，下同（到 GetCategory ）  \n",
        "body": "Effect.GetDescription"
    },
    "RACE_PSYCHO": {
        "prefix": "RACE_PSYCHO",
        "description": "念动力",
        "body": "RACE_PSYCHO"
    },
    "Duel.IsPlayerAffectedByEffect": {
        "prefix": "Duel.IsPlayerAffectedByEffect",
        "description": "•Duel.IsPlayerAffectedByEffect(int player, int code)\n检查player是否受到种类为code的效果影响，如果有就返回那些效果，没有则返回nil ,player 为0和1以外的数值时，也会返回nil  \n",
        "body": "Duel.IsPlayerAffectedByEffect"
    },
    "SUMMON_TYPE_FUSION": {
        "prefix": "SUMMON_TYPE_FUSION",
        "description": "融合召唤",
        "body": "SUMMON_TYPE_FUSION"
    },
    "Duel.GetFlagEffectLabel": {
        "prefix": "Duel.GetFlagEffectLabel",
        "description": "•Duel.GetFlagEffectLabel(int player, int code)\n返回玩家player的种类为code的标识效果的全部Label，没有此效果标识则返回nil  \n",
        "body": "Duel.GetFlagEffectLabel"
    },
    "Card.IsSpecialSummonable": {
        "prefix": "Card.IsSpecialSummonable",
        "description": "•Card.IsSpecialSummonable(Card c[, int sum_type])\n检查是否可以对c[用 sum_type 方式]进行特殊召唤手续  \n",
        "body": "Card.IsSpecialSummonable"
    },
    "STATUS_SPSUMMON_TURN": {
        "prefix": "STATUS_SPSUMMON_TURN",
        "description": "在本回合特殊召唤",
        "body": "STATUS_SPSUMMON_TURN"
    },
    "ReverseInDeck": {
        "prefix": "ReverseInDeck",
        "description": "•Card.ReverseInDeck(Card c)\n设置c在卡组中正面表示（POS_FACEUP_DEFENSE）  \n",
        "body": "ReverseInDeck"
    },
    "EFFECT_SET_ATTACK": {
        "prefix": "EFFECT_SET_ATTACK",
        "description": "设置攻击力(永續型效果、攻擊力變成X特殊召喚)",
        "body": "EFFECT_SET_ATTACK"
    },
    "Duel.IsPlayerCanMSet": {
        "prefix": "Duel.IsPlayerCanMSet",
        "description": "•Duel.IsPlayerCanMSet(int player[, int sumtype, Card c])\n检查玩家player是否可以盖放怪兽[c，以sumtype方式]  \n如果需要可选参数，则必须全部使用  \n",
        "body": "Duel.IsPlayerCanMSet"
    },
    "IsRelateToChain": {
        "prefix": "IsRelateToChain",
        "description": "•Card.IsRelateToChain(Card c, int chainc)\n检查c是否和连锁chainc有联系  \n注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象  \n（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）  \n会自动与那个效果建立联系，一旦离场，联系会重置  \n",
        "body": "IsRelateToChain"
    },
    "GetEffectCount": {
        "prefix": "GetEffectCount",
        "description": "•Card.GetEffectCount(Card c, int code)\n返回c受到影响的种类是code的效果的数量  \n",
        "body": "GetEffectCount"
    },
    "Group.CheckSubGroup": {
        "prefix": "Group.CheckSubGroup",
        "description": "•Group.CheckSubGroup(Group g, function f, int min=1, int max=#g, ...)\n检测卡片组 g 中是否存在满足 过滤条件 f，并且数量在 min-max 的子集  \nf 的函数原型为  \nfunction f(Group sg,...) end  \n",
        "body": "Group.CheckSubGroup"
    },
    "RESET_CONTROL": {
        "prefix": "RESET_CONTROL",
        "description": "控制者变更重置",
        "body": "RESET_CONTROL"
    },
    "PreSummon": {
        "prefix": "PreSummon",
        "description": "•Debug.PreSummon(Card c, int sum_type[, int sum_location=0])\n设置卡片c的召唤信息：以 sum_type 方法(通常召唤、特殊召唤等)[从 sum_location]出场  \n",
        "body": "PreSummon"
    },
    "RESET_DISABLE": {
        "prefix": "RESET_DISABLE",
        "description": "效果无效重置(只適用於owner",
        "body": "RESET_DISABLE"
    },
    "HINGMSG_NUMBER": {
        "prefix": "HINGMSG_NUMBER",
        "description": "请选择一个数字",
        "body": "HINGMSG_NUMBER"
    },
    "Duel.IsDamageCalculated": {
        "prefix": "Duel.IsDamageCalculated",
        "description": "•Duel.IsDamageCalculated()\n用于在伤害阶段检查是否已经计算了战斗伤害  \n",
        "body": "Duel.IsDamageCalculated"
    },
    "GetOperationInfo": {
        "prefix": "GetOperationInfo",
        "description": "•Duel.GetOperationInfo(int chainc, int category)\n返回连锁chainc的category分类的操作信息，存在的话，则返回值为5个， chainc=0 则是表示当前连锁  \n第一个返回值是false的话表示不存在该分类  \n后4个返回值对应Duel.SetOperationInfo的后4个参数：Card|Group targets, int count, int target_player, int target_param  \n",
        "body": "GetOperationInfo"
    },
    "EFFECT_CANNOT_USE_AS_COST": {
        "prefix": "EFFECT_CANNOT_USE_AS_COST",
        "description": "不能作为COST使用",
        "body": "EFFECT_CANNOT_USE_AS_COST"
    },
    "Group.RemoveCard": {
        "prefix": "Group.RemoveCard",
        "description": "•Group.RemoveCard(Group g, Card c)\n把卡片c从卡片组g中移除  \n",
        "body": "Group.RemoveCard"
    },
    "GetOwnerPlayer": {
        "prefix": "GetOwnerPlayer",
        "description": "•Effect.GetOwnerPlayer(Effect e)\n返回效果 e 的OwnerPlayer属性，一般是Owner的控制者  \n",
        "body": "GetOwnerPlayer"
    },
    "EFFECT_CHANGE_RSCALE": {
        "prefix": "EFFECT_CHANGE_RSCALE",
        "description": "设置右刻度",
        "body": "EFFECT_CHANGE_RSCALE"
    },
    "GetAttackTarget": {
        "prefix": "GetAttackTarget",
        "description": "•Duel.GetAttackTarget()\n返回此次战斗被攻击的卡，如果返回nil表示是直接攻击  \n",
        "body": "GetAttackTarget"
    },
    "aux.xyzlimit": {
        "prefix": "aux.xyzlimit",
        "description": "•aux.xyzlimit(Effect e, Effect se, int sp, int st)\n不能用 超量召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.xyzlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_XYZ==SUMMON_TYPE_XYZ  \nend  \n",
        "body": "aux.xyzlimit"
    },
    "bdcon": {
        "prefix": "bdcon",
        "description": "•aux.bdcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING 的 condition  \nfunction Auxiliary.bdcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsRelateToBattle()  \nend  \n",
        "body": "bdcon"
    },
    "ShuffleSetCard": {
        "prefix": "ShuffleSetCard",
        "description": "•Duel.ShuffleSetCard(Group g)\n洗切覆盖的卡片组 g （实例：魔术礼帽），若g中有表侧表示的卡，则此函数无效  \n此函数现在可以洗切魔陷区的覆盖卡  \n",
        "body": "ShuffleSetCard"
    },
    "aux.disfilter1": {
        "prefix": "aux.disfilter1",
        "description": "•aux.disfilter1(Card c)\n检测是否是 可以被无效效果的 怪兽  \nfunction Auxiliary.disfilter1(c)  \n\treturn c:IsFaceup() and not c:IsDisabled() and (not c:IsType(TYPE_NORMAL) or c:GetOriginalType()&TYPE_EFFECT~=0)  \nend  \n",
        "body": "aux.disfilter1"
    },
    "IsCanBeSpecialSummoned": {
        "prefix": "IsCanBeSpecialSummoned",
        "description": "•Card.IsCanBeSpecialSummoned(Card c, Effect e, int sumtype, int sumplayer, bool nocheck, bool nolimit[, int sumpos=POS_FACEUP, int toplayer=sumplayer, int zone=0xff])\n检查c是否可以被玩家sumplayer用效果e[以sumtype方式和sumpos表示形式]特殊召唤[到玩家 toplayer 的区域zone]  \n如果nocheck是true则不检查c的召唤条件，如果nolimit是true则不检查c的苏生限制  \n",
        "body": "IsCanBeSpecialSummoned"
    },
    "HINTMSG_RACE": {
        "prefix": "HINTMSG_RACE",
        "description": "请选择要宣言的种族",
        "body": "HINTMSG_RACE"
    },
    "Card.IsRank": {
        "prefix": "Card.IsRank",
        "description": "•Card.IsRank(Card c, int rank1[, int rank2,...])\n检查c是否是阶级 rank1[, 或者为 rank2...]  \n",
        "body": "Card.IsRank"
    },
    "aux.dncheck": {
        "prefix": "aux.dncheck",
        "description": "•aux.dncheck(Group g)\n检测卡片组 g 中是否有同名卡的简单写法，返回值如果为 true 表示没有同名卡  \nfunction Auxiliary.dncheck(g)  \n\treturn g:GetClassCount(Card.GetCode)==#g  \nend  \n",
        "body": "aux.dncheck"
    },
    "IsReleasable": {
        "prefix": "IsReleasable",
        "description": "•Card.IsReleasable(Card c)\n检查c是否可以被解放（非上级召唤用）  \n如果 c 满足以下条件，都会返回 false  \n召唤(广义的)之际、 在墓地或者除外、 在手卡并且是魔法·陷阱、 玩家受到不能把卡解放的效果影响、 不能做上级召唤以外的祭品  \n",
        "body": "IsReleasable"
    },
    "Card.IsChainAttackable": {
        "prefix": "Card.IsChainAttackable",
        "description": "•Card.IsChainAttackable(Card c[, int ac = 2, bool monsteronly = false])\n检查c是否可以连续攻击，c的攻击宣言次数>=ac则返回false  \nmonsteronly = true 则表示只能对怪兽攻击  \n注：当c因为闪光之双剑等效果进行过多次攻击之后此函数返回false  \n",
        "body": "Card.IsChainAttackable"
    },
    "IsOriginalCodeRule": {
        "prefix": "IsOriginalCodeRule",
        "description": "•Card.IsOriginalCodeRule(Card c, int code1[, int code2,...])\n检查c的卡号是否规则上（就是CDB里显示的卡密）是 code1[, 或者为 code2...]  \n",
        "body": "IsOriginalCodeRule"
    },
    "aux.bdogcon": {
        "prefix": "aux.bdogcon",
        "description": "•aux.bdogcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且是与对方怪兽战斗并战斗破坏对方怪兽送去墓地 的 condition  \nfunction Auxiliary.bdogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\tlocal bc=c:GetBattleTarget()  \n\treturn c:IsRelateToBattle() and c:IsStatus(STATUS_OPPO_BATTLE) and bc:IsLocation(LOCATION_GRAVE) and bc:IsType(TYPE_MONSTER)  \nend  \n",
        "body": "aux.bdogcon"
    },
    "Duel.SelectSynchroMaterial": {
        "prefix": "Duel.SelectSynchroMaterial",
        "description": "•Duel.SelectSynchroMaterial(int player, Card c, function f1|nil, function f2|nil, int min, int max[, Card smat|nil, Group mg|nil])\n让玩家player从场上[或mg中]选择用于同调c需要的[必须包含smat在内（如果有mg~=nil则忽略此参数）]满足条件的一组素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \nf1,f2 之中，至少有一种为调整的条件  \n",
        "body": "Duel.SelectSynchroMaterial"
    },
    "GetFusionType": {
        "prefix": "GetFusionType",
        "description": "•Card.GetFusionType(Card c)\n返回c用作融合素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "GetFusionType"
    },
    "Group.GetSum": {
        "prefix": "Group.GetSum",
        "description": "•Group.GetSum(Group g, function f, ...)\n计算g中所有卡的取值的总和，f为为每张卡的取值函数，从第3个参数开始为额外参数  \n等价于：  \nfunction GetSum(g,f,...)  \n\tlocal ct=0  \n\tlocal val={...}  \n\tfor tc in aux.Next(g)  \n\t\tif f(tc,table.unpack(val)) then ct=ct+1 end  \n\tend  \n\treturn ct  \nend  \n",
        "body": "Group.GetSum"
    },
    "FilterBoolFunction": {
        "prefix": "FilterBoolFunction",
        "description": "•aux.FilterBoolFunction(function f, ...)\n用于过滤满足单一过滤条件 f 的卡,,返回的是一个 有 bool 返回值类型的 函数，第2个参数开始为额外参数  \nfunction Auxiliary.FilterBoolFunction(f,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))  \n\t\t\tend  \nend  \n",
        "body": "FilterBoolFunction"
    },
    "Card.IsFusionSummonableCard": {
        "prefix": "Card.IsFusionSummonableCard",
        "description": "•Card.IsFusionSummonableCard(Card c[, int sum_type])\n检查c是否是可[用 sum_type 方式]融合召唤的卡  \n",
        "body": "Card.IsFusionSummonableCard"
    },
    "AddFusionProcCode4": {
        "prefix": "AddFusionProcCode4",
        "description": "•aux.AddFusionProcCode4(Card c, int code1, int code2, int code3, int code4, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为code1,code2,code3,code4的4只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2,code4)  \n",
        "body": "AddFusionProcCode4"
    },
    "EnableSpiritReturn": {
        "prefix": "EnableSpiritReturn",
        "description": "•aux.EnableSpiritReturn(Card c, int event1,...)\n为c添加灵魂怪兽结束阶段回到手卡的效果（发生事件event1,...的回合，结束阶段回到手卡）  \n",
        "body": "EnableSpiritReturn"
    },
    "HINTMSG_ATOHAND": {
        "prefix": "HINTMSG_ATOHAND",
        "description": "请选择要加入手牌的卡",
        "body": "HINTMSG_ATOHAND"
    },
    "Duel.LinkSummon": {
        "prefix": "Duel.LinkSummon",
        "description": "•Duel.LinkSummon(int player, Card c, Group mg|nil[, Card lc, int minc=0, int maxc=0])\n让玩家player用场上[或mg][包含卡片 lc 在内][minc-maxc 张]的卡对c进行连接召唤手续  \n",
        "body": "Duel.LinkSummon"
    },
    "AddFusionProcCode3": {
        "prefix": "AddFusionProcCode3",
        "description": "•aux.AddFusionProcCode3(Card c, int code1, int code2, int code3, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为code1,code2,code3的3只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2,code3)  \n",
        "body": "AddFusionProcCode3"
    },
    "AddFusionProcCode2": {
        "prefix": "AddFusionProcCode2",
        "description": "•aux.AddFusionProcCode2(Card c, int code1, int code2, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为code1和code2的2只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2)  \n",
        "body": "AddFusionProcCode2"
    },
    "Win": {
        "prefix": "Win",
        "description": "•Duel.Win(int player, int win_reason)\n当前效果处理完令player以win_reason决斗胜利  \n",
        "body": "Win"
    },
    "EFFECT_CANNOT_BE_SYNCHRO_MATERIAL": {
        "prefix": "EFFECT_CANNOT_BE_SYNCHRO_MATERIAL",
        "description": "不能做同调素材",
        "body": "EFFECT_CANNOT_BE_SYNCHRO_MATERIAL"
    },
    "GetLabelObject": {
        "prefix": "GetLabelObject",
        "description": "•Effect.GetLabelObject(Effect e)\n返回效果 e 的LabelObject属性  \n",
        "body": "GetLabelObject"
    },
    "TIMING_BATTLE_END": {
        "prefix": "TIMING_BATTLE_END",
        "description": "战斗阶段结束时点",
        "body": "TIMING_BATTLE_END"
    },
    "GetReasonEffect": {
        "prefix": "GetReasonEffect",
        "description": "•Card.GetReasonEffect(Card c)\n返回导致c的位置变化的效果  \n",
        "body": "GetReasonEffect"
    },
    "EFFECT_REMOVE_BRAINWASHING": {
        "prefix": "EFFECT_REMOVE_BRAINWASHING",
        "description": "洗脑解除",
        "body": "EFFECT_REMOVE_BRAINWASHING"
    },
    "Duel.AnnounceAttribute": {
        "prefix": "Duel.AnnounceAttribute",
        "description": "•Duel.AnnounceAttribute(int player, int count, int available)\n让玩家player从可选的属性中宣言count个属性  \navailable是所有可选属性的组合值，可以自行组合，可以直接将名字相加  \nATTRIBUTE_EARTH\t\t=0x01\t\t--地  \nATTRIBUTE_WATER\t\t=0x02\t\t--水  \nATTRIBUTE_FIRE\t\t=0x04\t\t--炎  \nATTRIBUTE_WIND\t\t=0x08\t\t--风  \nATTRIBUTE_LIGHT\t\t=0x10\t\t--光  \nATTRIBUTE_DARK\t\t=0x20\t\t--暗  \nATTRIBUTE_DEVINE\t=0x40\t\t--神  \n",
        "body": "Duel.AnnounceAttribute"
    },
    "AddFusionProcFunRep": {
        "prefix": "AddFusionProcFunRep",
        "description": "•aux.AddFusionProcFunRep(Card c, function f, int cc, bool insf)\n为c 添加融合召唤手续  \n用 cc 个 满足相同条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,table.unpack(fun)),fun 是包含 cc 个 满足条件 f 的卡的表  \n",
        "body": "AddFusionProcFunRep"
    },
    "Effect.SetCountLimit": {
        "prefix": "Effect.SetCountLimit",
        "description": "•Effect.SetCountLimit(Effect e, int count=1[, int code=0])\n设置效果 e 的一回合可以发动的次数count（仅触发型效果有效），相同的code(不等于0或1时)共用1个次数  \ncode包含以下数值具有特殊的性质  \nEFFECT_COUNT_CODE_OATH          誓约使用次数  \nEFFECT_COUNT_CODE_DUEL          决斗中使用次数  \nEFFECT_COUNT_CODE_SINGLE        同一张卡多个效果公共使用次数（不限制同名卡）  \n",
        "body": "Effect.SetCountLimit"
    },
    "HintSelection": {
        "prefix": "HintSelection",
        "description": "•Duel.HintSelection(Group g)\n手动为卡片组g显示被选为对象的动画效果，并记录这些卡被选为对象(广义的)  \n",
        "body": "HintSelection"
    },
    "CATEGORY_DAMAGE": {
        "prefix": "CATEGORY_DAMAGE",
        "description": "伤害效果",
        "body": "CATEGORY_DAMAGE"
    },
    "Debug.AddCard": {
        "prefix": "Debug.AddCard",
        "description": "•Debug.AddCard(int code, int owner, int player, int location, int seq, int pos[, bool proc=false])\n添加卡片，将卡号为code的卡片的持有者设置为owner，以表示形式pos放置在player的场上位于location上序号为seq的格子处  \nproc=true则完成正规召唤程序(即解除苏生限制)  \n",
        "body": "Debug.AddCard"
    },
    "TIMING_BATTLE_PHASE": {
        "prefix": "TIMING_BATTLE_PHASE",
        "description": "战斗阶段时点",
        "body": "TIMING_BATTLE_PHASE"
    },
    "Group.CreateGroup": {
        "prefix": "Group.CreateGroup",
        "description": "•Group.CreateGroup()\n新建一个空的卡片组  \n",
        "body": "Group.CreateGroup"
    },
    "Effect.SetAbsoluteRange": {
        "prefix": "Effect.SetAbsoluteRange",
        "description": "•Effect.SetAbsoluteRange(Effect e, int playerid, int s_range, int o_range)\n设置效果 e 的target range属性并设置 EFFECT_FLAG_ABSOLUTE_TARGET 标志  \n\t如果 playerid != 0 ，s_range和o_range反转  \n",
        "body": "Effect.SetAbsoluteRange"
    },
    "GetTurnPlayer": {
        "prefix": "GetTurnPlayer",
        "description": "•Duel.GetTurnPlayer()\n返回当前的回合玩家  \n",
        "body": "GetTurnPlayer"
    },
    "SELECT_TAILS": {
        "prefix": "SELECT_TAILS",
        "description": "反面",
        "body": "SELECT_TAILS"
    },
    "EFFECT_MUST_ATTACK_MONSTER": {
        "prefix": "EFFECT_MUST_ATTACK_MONSTER",
        "description": "若攻擊則必須攻擊X",
        "body": "EFFECT_MUST_ATTACK_MONSTER"
    },
    "Card.GetRealFieldID": {
        "prefix": "Card.GetRealFieldID",
        "description": "•Card.GetRealFieldID(Card c)\n返回c转移到当前位置的真实的时间标识  \n卡片从里侧翻开不会改变此数值  \n",
        "body": "Card.GetRealFieldID"
    },
    "Duel.NegateSummon": {
        "prefix": "Duel.NegateSummon",
        "description": "•Duel.NegateSummon(Card|Group targets)\n使正在召唤·反转召唤·特殊召唤的targets的召唤无效  \n",
        "body": "Duel.NegateSummon"
    },
    "Card.IsDefenseAbove": {
        "prefix": "Card.IsDefenseAbove",
        "description": "•Card.IsDefenseAbove(Card c, int def)\n检查c是否是守备力def以上  \n",
        "body": "Card.IsDefenseAbove"
    },
    "aux.nbcon": {
        "prefix": "aux.nbcon",
        "description": "•aux.nbcon(int tp, Effect re)\n无效并除外  \nfunction Auxiliary.nbcon(tp,re)  \n\tlocal rc=re:GetHandler()  \n\treturn Duel.IsPlayerCanRemove(tp)  \n\t\tand (not rc:IsRelateToEffect(re) or rc:IsAbleToRemove())  \nend  \n",
        "body": "aux.nbcon"
    },
    "EFFECT_UPDATE_LSCALE": {
        "prefix": "EFFECT_UPDATE_LSCALE",
        "description": "改变左刻度",
        "body": "EFFECT_UPDATE_LSCALE"
    },
    "Duel.SendtoGrave": {
        "prefix": "Duel.SendtoGrave",
        "description": "•Duel.SendtoGrave(Card|Group targets, int reason)\n以reason原因把targets送去墓地，返回值是实际被操作的数量  \n",
        "body": "Duel.SendtoGrave"
    },
    "LOCATION_FZONE": {
        "prefix": "LOCATION_FZONE",
        "description": "场地区",
        "body": "LOCATION_FZONE"
    },
    "EnableDualState": {
        "prefix": "EnableDualState",
        "description": "•Card.EnableDualState(Card c)\n把c设置成再召唤状态  \n",
        "body": "EnableDualState"
    },
    "SetOperation": {
        "prefix": "SetOperation",
        "description": "•Effect.SetOperation(Effect e, nil|function op_func)\n设置效果 e 的Operation属性  \n",
        "body": "SetOperation"
    },
    "GLOBALFLAG_DETACH_EVENT": {
        "prefix": "GLOBALFLAG_DETACH_EVENT",
        "description": "EVENT_DETACH_MATERIAL",
        "body": "GLOBALFLAG_DETACH_EVENT"
    },
    "GetSynchroLevel": {
        "prefix": "GetSynchroLevel",
        "description": "•Card.GetSynchroLevel(Card c, Card sc)\n返回c的对于同调怪兽sc的同调用等级  \n此函数除了某些特定卡如调节支援士，返回值与Card.GetLevel(c)相同  \n",
        "body": "GetSynchroLevel"
    },
    "ClearOperationInfo": {
        "prefix": "ClearOperationInfo",
        "description": "•Duel.ClearOperationInfo(int chainc)\n清除连锁chainc的所有操作分类  \n",
        "body": "ClearOperationInfo"
    },
    "EFFECT_MAX_MZONE": {
        "prefix": "EFFECT_MAX_MZONE",
        "description": "怪獸区格數上限",
        "body": "EFFECT_MAX_MZONE"
    },
    "EFFECT_SPSUMMON_PROC_G": {
        "prefix": "EFFECT_SPSUMMON_PROC_G",
        "description": "P召唤规则",
        "body": "EFFECT_SPSUMMON_PROC_G"
    },
    "SelectTunerMaterial": {
        "prefix": "SelectTunerMaterial",
        "description": "•Duel.SelectTunerMaterial(int player, Card c, Card tuner, function f1|nil, function f2|nil, int min, int max[, Group mg|nil])\n让玩家从场上[或mg中]选择用于同调c需要的满足条件的以tuner作为调整的min-max张卡的一组素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \n",
        "body": "SelectTunerMaterial"
    },
    "ASSUME_RANK": {
        "prefix": "ASSUME_RANK",
        "body": "ASSUME_RANK"
    },
    "EFFECT_EXTRA_LINK_MATERIAL": {
        "prefix": "EFFECT_EXTRA_LINK_MATERIAL",
        "description": "手卡的连接素材",
        "body": "EFFECT_EXTRA_LINK_MATERIAL"
    },
    "SUMMON_TYPE_XYZ": {
        "prefix": "SUMMON_TYPE_XYZ",
        "description": "超量召唤",
        "body": "SUMMON_TYPE_XYZ"
    },
    "GetOriginalType": {
        "prefix": "GetOriginalType",
        "description": "•Card.GetOriginalType(Card c)\n返回c的卡片记载的类型  \n",
        "body": "GetOriginalType"
    },
    "AddFusionProcMix": {
        "prefix": "AddFusionProcMix",
        "description": "•aux.AddFusionProcMix(Card c, bool sub, bool insf, ...)\n为c 添加融合召唤手续  \n用额外参数里的卡各1张为融合素材,额外参数的类型 可以是 function 或者 卡密(int code),  \nsub表示能否使用融合代替素材，insf 为false表示必须用素材融合召唤。若这只怪兽融合召唤只能使用上述的卡进行，sub 和 insf 都要填 false  \n#以下融合函数这2个参数相同  \n",
        "body": "AddFusionProcMix"
    },
    "HINTMSG_DESTROY": {
        "prefix": "HINTMSG_DESTROY",
        "description": "请选择要破坏的卡",
        "body": "HINTMSG_DESTROY"
    },
    "EFFECT_FLAG_UNCOPYABLE": {
        "prefix": "EFFECT_FLAG_UNCOPYABLE",
        "description": "不能复制（效果外文本）",
        "body": "EFFECT_FLAG_UNCOPYABLE"
    },
    "EFFECT_TYPE_FLIP": {
        "prefix": "EFFECT_TYPE_FLIP",
        "description": "翻转效果",
        "body": "EFFECT_TYPE_FLIP"
    },
    "GetDrawCount": {
        "prefix": "GetDrawCount",
        "description": "•Duel.GetDrawCount(int player)\n返回玩家player每回合的规则抽卡数量  \n",
        "body": "GetDrawCount"
    },
    "EFFECT_RCOUNTER_REPLACE": {
        "prefix": "EFFECT_RCOUNTER_REPLACE",
        "description": "代替取除指示物",
        "body": "EFFECT_RCOUNTER_REPLACE"
    },
    "Duel.IsPlayerCanDiscardDeck": {
        "prefix": "Duel.IsPlayerCanDiscardDeck",
        "description": "•Duel.IsPlayerCanDiscardDeck(int player, int count)\n检查玩家player是否可以把卡组顶端count张卡送去墓地  \n",
        "body": "Duel.IsPlayerCanDiscardDeck"
    },
    "Duel.GetCustomActivityCount": {
        "prefix": "Duel.GetCustomActivityCount",
        "description": "•Duel.GetCustomActivityCount(int counter_id, int player, int activity_type)\n代号为counter_id的计数器的计数，返回player进行以下操作的次数（目前最多为1）  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的set）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的set）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_CHAIN          =7\t--发动效果  \n",
        "body": "Duel.GetCustomActivityCount"
    },
    "Card.GetLinkedZone": {
        "prefix": "Card.GetLinkedZone",
        "description": "•Card.GetLinkedZone(Card c[, int player=c:GetControler()])\n返回c的[以 player 来看的场上的]连接区域  \n",
        "body": "Card.GetLinkedZone"
    },
    "GetPreviousCodeOnField": {
        "prefix": "GetPreviousCodeOnField",
        "description": "•Card.GetPreviousCodeOnField(Card c)\n返回c位置变化之前在场上的卡号  \n",
        "body": "GetPreviousCodeOnField"
    },
    "GetLinkedGroup": {
        "prefix": "GetLinkedGroup",
        "description": "•Card.GetLinkedGroup(Card c)\n返回c的连接区的卡片组（目前只限怪兽区）  \n\n•Duel.GetLinkedGroup(int player, int s_range, int o_range)\n返回以玩家player来看的 s_range 和 o_range 区域的处于连接状态的卡片组[其实只要后面2个参数不为0就行，只要不为0，都会变成LOCATION_MZONE]（？）  \n\n",
        "body": "GetLinkedGroup"
    },
    "TIMING_FLIPSUMMON": {
        "prefix": "TIMING_FLIPSUMMON",
        "description": "翻转召唤时点",
        "body": "TIMING_FLIPSUMMON"
    },
    "IsExtraLinkState": {
        "prefix": "IsExtraLinkState",
        "description": "•Card.IsExtraLinkState(Card c)\n检查c是否是额外连接状态  \n",
        "body": "IsExtraLinkState"
    },
    "IsAbleToDeck": {
        "prefix": "IsAbleToDeck",
        "description": "•Card.IsAbleToDeck(Card c)\n检查c是否可以送去卡组  \n",
        "body": "IsAbleToDeck"
    },
    "STATUS_CONTINUOUS_POS": {
        "prefix": "STATUS_CONTINUOUS_POS",
        "description": "改變後再次設定成其他表示形式",
        "body": "STATUS_CONTINUOUS_POS"
    },
    "TIMING_ATTACK": {
        "prefix": "TIMING_ATTACK",
        "description": "攻击宣言时点",
        "body": "TIMING_ATTACK"
    },
    "Card.GetOverlayTarget": {
        "prefix": "Card.GetOverlayTarget",
        "description": "•Card.GetOverlayTarget(Card c)\n返回以c为超量素材的卡  \n",
        "body": "Card.GetOverlayTarget"
    },
    "Card.GetMutualLinkedGroupCount": {
        "prefix": "Card.GetMutualLinkedGroupCount",
        "description": "•Card.GetMutualLinkedGroupCount(Card c)\n返回和c互相连接状态的卡片组的数量  \n",
        "body": "Card.GetMutualLinkedGroupCount"
    },
    "EFFECT_PUBLIC": {
        "prefix": "EFFECT_PUBLIC",
        "description": "公开手牌",
        "body": "EFFECT_PUBLIC"
    },
    "Duel.RDComplete": {
        "prefix": "Duel.RDComplete",
        "description": "•Duel.RDComplete()\n在调用Duel.Damage/Duel.Recover时，若is_step参数为true，则需调用此函数触发时点  \n",
        "body": "Duel.RDComplete"
    },
    "Card.GetType": {
        "prefix": "Card.GetType",
        "description": "•Card.GetType(Card c)\n返回c的当前类型  \n",
        "body": "Card.GetType"
    },
    "AddFusionProcFun2": {
        "prefix": "AddFusionProcFun2",
        "description": "•aux.AddFusionProcFun2(Card c, function f1, function f2, bool insf)\n为c 添加融合召唤手续  \n用满足条件 f1 与 f2 的怪兽 各1只为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,f1,f2)  \n",
        "body": "AddFusionProcFun2"
    },
    "Duel.GetMatchingGroup": {
        "prefix": "Duel.GetMatchingGroup",
        "description": "•Duel.GetMatchingGroup(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n",
        "body": "Duel.GetMatchingGroup"
    },
    "Card.GetFlagEffect": {
        "prefix": "Card.GetFlagEffect",
        "description": "•Card.GetFlagEffect(Card c, int code)\n返回c的种类是code的标识效果的数量  \n",
        "body": "Card.GetFlagEffect"
    },
    "EFFECT_MUST_BE_XMATERIAL": {
        "prefix": "EFFECT_MUST_BE_XMATERIAL",
        "description": "必须作为超量素材",
        "body": "EFFECT_MUST_BE_XMATERIAL"
    },
    "Duel.GetFieldGroupCount": {
        "prefix": "Duel.GetFieldGroupCount",
        "description": "•Duel.GetFieldGroupCount(int player, int s, int o)\n同 Duel.GetFieldGroup ，只是返回的是卡的数量  \n",
        "body": "Duel.GetFieldGroupCount"
    },
    "OPCODE_ISATTRIBUTE": {
        "prefix": "OPCODE_ISATTRIBUTE",
        "body": "OPCODE_ISATTRIBUTE"
    },
    "IsMaterialListSetCard": {
        "prefix": "IsMaterialListSetCard",
        "description": "•aux.IsMaterialListSetCard(Card c, int setcode])\n检测 c 是否是有字段 setcode 为素材的卡  \nc.material_setcode  \n",
        "body": "IsMaterialListSetCard"
    },
    "CHAININFO_TRIGGERING_RANK": {
        "prefix": "CHAININFO_TRIGGERING_RANK",
        "description": "连锁发生时的阶级",
        "body": "CHAININFO_TRIGGERING_RANK"
    },
    "RACE_WYRM": {
        "prefix": "RACE_WYRM",
        "description": "幻龙",
        "body": "RACE_WYRM"
    },
    "CompleteProcedure": {
        "prefix": "CompleteProcedure",
        "description": "•Card.CompleteProcedure(Card c)\n使c完成正规的召唤手续  \n##此函数也可通过 c:SetStatus(STATUS_PROC_COMPLETE,true)实现  \n",
        "body": "CompleteProcedure"
    },
    "Effect.GetTarget": {
        "prefix": "Effect.GetTarget",
        "description": "•Effect.GetTarget(Effect e)\n返回效果 e 的target属性  \n",
        "body": "Effect.GetTarget"
    },
    "aux.AddRitualProcEqual2Code": {
        "prefix": "aux.AddRitualProcEqual2Code",
        "description": "•aux.AddRitualProcEqual2Code(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \ncode1 为仪式怪兽卡号，素材的等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcEqual2(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcEqual2Code"
    },
    "ACTIVITY_SPSUMMON": {
        "prefix": "ACTIVITY_SPSUMMON",
        "body": "ACTIVITY_SPSUMMON"
    },
    "aux.CheckUnionEquip": {
        "prefix": "aux.CheckUnionEquip",
        "description": "•aux.CheckUnionEquip(Card uc, Card tc)\n检查同盟怪兽uc能否作为同盟装备在怪兽tc上  \n",
        "body": "aux.CheckUnionEquip"
    },
    "STATUS_DISABLED": {
        "prefix": "STATUS_DISABLED",
        "description": "效果被无效",
        "body": "STATUS_DISABLED"
    },
    "EFFECT_FLAG_CANNOT_NEGATE": {
        "prefix": "EFFECT_FLAG_CANNOT_NEGATE",
        "description": "含有'此效果不會被無效'的敘述",
        "body": "EFFECT_FLAG_CANNOT_NEGATE"
    },
    "GetLinkCount": {
        "prefix": "GetLinkCount",
        "description": "•aux.GetLinkCount(Card c)\n返回卡片 c 作为连接素材时当做的素材数量  \nfunction Auxiliary.GetLinkCount(c)  \n\tif c:IsType(TYPE_LINK) and c:GetLink()>1 then  \n\t\treturn 1+0x10000*c:GetLink()  \n\telse return 1 end  \nend  \n",
        "body": "GetLinkCount"
    },
    "RESET_CODE": {
        "prefix": "RESET_CODE",
        "description": "重置指定Code的single效果(不含EFFECT_FLAG_SINGLE_RANGE)",
        "body": "RESET_CODE"
    },
    "SpecialSummon": {
        "prefix": "SpecialSummon",
        "description": "•Duel.SpecialSummon(Card|Group targets, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos[, int zone=0xff])\n让玩家 sumplayer 以sumtype方式，pos表示形式把targets特殊召唤到target_player场上[的区域 zone]  \n如果nocheck为true则无视卡的召唤条件，如果nolimit为true则无视卡的苏生限制  \n返回值是特殊召唤成功的卡的数量  \n",
        "body": "SpecialSummon"
    },
    "GetLocationCount": {
        "prefix": "GetLocationCount",
        "description": "•Duel.GetLocationCount(int player, int location[, int use_player, int reason = LOCATION_REASON_TOFIELD, int zone=0xff])\n返回玩家player的场上location可用的[区域 zone 里的]空格数  \nlocation只能是LOCATION_MZONE或者LOCATION_SZONE  \nreason为LOCATION_REASON_TOFIELD或LOCATION_REASON_CONTROL  \n##第三个第四个额外参数与凯撒斗技场等限制格子的效果有关  \n",
        "body": "GetLocationCount"
    },
    "EFFECT_NO_BATTLE_DAMAGE": {
        "prefix": "EFFECT_NO_BATTLE_DAMAGE",
        "description": "不会给对方造成战斗伤害",
        "body": "EFFECT_NO_BATTLE_DAMAGE"
    },
    "DeleteGroup": {
        "prefix": "DeleteGroup",
        "description": "•Group.DeleteGroup(Group g)\n删除卡片组g  \n",
        "body": "DeleteGroup"
    },
    "Card.GetLinkType": {
        "prefix": "Card.GetLinkType",
        "description": "•Card.GetLinkType(Card c)\n返回c用作link素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "Card.GetLinkType"
    },
    "EFFECT_FLAG_EVENT_PLAYER": {
        "prefix": "EFFECT_FLAG_EVENT_PLAYER",
        "description": "视为对方玩家的效果（动作？）",
        "body": "EFFECT_FLAG_EVENT_PLAYER"
    },
    "SetChainLimit": {
        "prefix": "SetChainLimit",
        "description": "•Duel.SetChainLimit(function f)\n设定连锁条件，f的函数原型为 bool f(e,ep,tp)  \ne表示要限制连锁的效果，ep表示要限制连锁的玩家，tp表示发动该效果的玩家  \n在cost或者target处理中调用此函数可以限制可以连锁的效果的种类（如超融合）  \n如果f返回false表示不能连锁，一旦设置连锁条件后发生了新的连锁那么连锁条件将会解除  \n",
        "body": "SetChainLimit"
    },
    "Card.GetOriginalRank": {
        "prefix": "Card.GetOriginalRank",
        "description": "•Card.GetOriginalRank(Card c)\n返回c的卡片记载的阶级  \n",
        "body": "Card.GetOriginalRank"
    },
    "IsImmuneToEffect": {
        "prefix": "IsImmuneToEffect",
        "description": "•Card.IsImmuneToEffect(Card c, Effect e)\n检查c是否免疫效果e（即不受效果e的影响）  \n",
        "body": "IsImmuneToEffect"
    },
    "ACTIVITY_CHAIN": {
        "prefix": "ACTIVITY_CHAIN",
        "description": "only available in custom counter",
        "body": "ACTIVITY_CHAIN"
    },
    "GetFlagEffectLabel": {
        "prefix": "GetFlagEffectLabel",
        "description": "•Card.GetFlagEffectLabel(Card c, int code)\n返回c的种类为code的标识效果的Label(数量可能不止一个)，没有此效果则返回nil  \n\n•Duel.GetFlagEffectLabel(int player, int code)\n返回玩家player的种类为code的标识效果的全部Label，没有此效果标识则返回nil  \n\n",
        "body": "GetFlagEffectLabel"
    },
    "EFFECT_UNSUMMONABLE_CARD": {
        "prefix": "EFFECT_UNSUMMONABLE_CARD",
        "description": "N/A",
        "body": "EFFECT_UNSUMMONABLE_CARD"
    },
    "EFFECT_MAX_SZONE": {
        "prefix": "EFFECT_MAX_SZONE",
        "description": "魔陷区格數上限",
        "body": "EFFECT_MAX_SZONE"
    },
    "aux.SetUnionState": {
        "prefix": "aux.SetUnionState",
        "description": "•aux.SetUnionState(Card c)\n为c添加同盟怪兽属性  \n",
        "body": "aux.SetUnionState"
    },
    "RESET_TURN_SET": {
        "prefix": "RESET_TURN_SET",
        "description": "变里侧重置",
        "body": "RESET_TURN_SET"
    },
    "ASSUME_ATTRIBUTE": {
        "prefix": "ASSUME_ATTRIBUTE",
        "body": "ASSUME_ATTRIBUTE"
    },
    "Card.AssumeProperty": {
        "prefix": "Card.AssumeProperty",
        "description": "•Card.AssumeProperty(Card c,int assume_type, int assume_value)\n把c的assume_type的数值当作assume_value使用（基因组斗士）  \nassume_type为以下类型  \nASSUME_CODE         卡号  \nASSUME_TYPE         类型  \nASSUME_LEVEL        等级  \nASSUME_RANK         阶级  \nASSUME_ATTRIBUTE    属性  \nASSUME_RACE         种族  \nASSUME_ATTACK       攻击力  \nASSUME_DEFENSE      守备力  \n",
        "body": "Card.AssumeProperty"
    },
    "ClearEffectRelation": {
        "prefix": "ClearEffectRelation",
        "description": "•Card.ClearEffectRelation(Card c)\n清空c所有联系的效果  \n",
        "body": "ClearEffectRelation"
    },
    "Group.CheckWithSumEqual": {
        "prefix": "Group.CheckWithSumEqual",
        "description": "•Group.CheckWithSumEqual(Group g, function f, int sum, int min=0, int max, ...)\n子集求和判定函数，f为返回一个interger值的函数  \n检查卡片组g中是否存在一个数量为min-max的子集满足以f对子集的每一个元素求值的和等于sum，从第6个参数开始为额外参数  \n\t比如：g:CheckWithSumEqual(Card.GetSynchroLevel,7,2,99)  \n\t检查g中是否存在一个子集元素数量在2-99之间的子集，并且满足子集的同调用等级之和等于7  \n",
        "body": "Group.CheckWithSumEqual"
    },
    "Card.IsFusionCode": {
        "prefix": "Card.IsFusionCode",
        "description": "•Card.IsFusionCode(Card c, int code[, ...])\n检查c作为融合素材时能否当作卡号为code的卡，额外参数是其他code  \n",
        "body": "Card.IsFusionCode"
    },
    "ACTIVITY_ATTACK": {
        "prefix": "ACTIVITY_ATTACK",
        "body": "ACTIVITY_ATTACK"
    },
    "GetActivityCount": {
        "prefix": "GetActivityCount",
        "description": "•Duel.GetActivityCount(int player, int activity_type, ...)\n返回player进行对应的activity_type操作的次数  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的放置）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的放置）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_BATTLE_PHASE   =6\t--进入战斗阶段  \n",
        "body": "GetActivityCount"
    },
    "LOCATION_REMOVED": {
        "prefix": "LOCATION_REMOVED",
        "description": "除外区",
        "body": "LOCATION_REMOVED"
    },
    "AddXyzProcedure": {
        "prefix": "AddXyzProcedure",
        "description": "•aux.AddXyzProcedure(Card c, function f|nil, int lv, int ct[, function alterf|nil, int desc|nil, int maxc=ct, function op|nil])\n为c添加超量召唤手续  \n用满足条件 f 的等级为 lv 的 ct[-maxc] 只怪兽进行叠放  \n或者在单个怪兽（通常是超量怪兽）上叠放  \nalterf 为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（比如 希望皇龙）  \n",
        "body": "AddXyzProcedure"
    },
    "HINT_CARD": {
        "prefix": "HINT_CARD",
        "body": "HINT_CARD"
    },
    "FilterCount": {
        "prefix": "FilterCount",
        "description": "•Group.FilterCount(Group g, function f, Card|Group ex|nil, ...)\n过滤函数，和Group.Filter基本相同，不同之处在于此函数只返回满足条件的卡的数量  \n",
        "body": "FilterCount"
    },
    "Duel.IsExistingTarget": {
        "prefix": "Duel.IsExistingTarget",
        "description": "•Duel.IsExistingTarget(function f|nil, int player, int s, int o, int count, Card|Group ex|nil, ...)\n基本同Duel.IsExistingMatchingCard ，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象  \n",
        "body": "Duel.IsExistingTarget"
    },
    "EFFECT_DUAL_STATUS": {
        "prefix": "EFFECT_DUAL_STATUS",
        "description": "二重状态",
        "body": "EFFECT_DUAL_STATUS"
    },
    "Card.GetLocation": {
        "prefix": "Card.GetLocation",
        "description": "•Card.GetLocation(Card c)\n返回c当前的所在位置  \n",
        "body": "Card.GetLocation"
    },
    "ForEach": {
        "prefix": "ForEach",
        "description": "•Group.ForEach(Group g, function f,...)\n为卡片组g中的每一张卡调用一次f ,第三个参数开始为额外参数  \n",
        "body": "ForEach"
    },
    "GLOBALFLAG_SPSUMMON_COUNT": {
        "prefix": "GLOBALFLAG_SPSUMMON_COUNT",
        "description": "玩家的特殊召唤次数限制",
        "body": "GLOBALFLAG_SPSUMMON_COUNT"
    },
    "REASON_DESTROY": {
        "prefix": "REASON_DESTROY",
        "description": "破坏",
        "body": "REASON_DESTROY"
    },
    "Effect.GetOperation": {
        "prefix": "Effect.GetOperation",
        "description": "•Effect.GetOperation(Effect e)\n返回效果 e 的operation属性  \n",
        "body": "Effect.GetOperation"
    },
    "TYPE_EQUIP": {
        "prefix": "TYPE_EQUIP",
        "description": "装备",
        "body": "TYPE_EQUIP"
    },
    "Card.IsDefensePos": {
        "prefix": "Card.IsDefensePos",
        "description": "•Card.IsDefensePos(Card c)\n检查c是否是守备表示  \n",
        "body": "Card.IsDefensePos"
    },
    "EFFECT_CANNOT_MSET": {
        "prefix": "EFFECT_CANNOT_MSET",
        "description": "不能覆盖怪兽",
        "body": "EFFECT_CANNOT_MSET"
    },
    "Duel.GetTurnPlayer": {
        "prefix": "Duel.GetTurnPlayer",
        "description": "•Duel.GetTurnPlayer()\n返回当前的回合玩家  \n",
        "body": "Duel.GetTurnPlayer"
    },
    "IsPlayerCanSpecialSummon": {
        "prefix": "IsPlayerCanSpecialSummon",
        "description": "•Duel.IsPlayerCanSpecialSummon(int player[, int sumtype, int sumpos, int target_player, Card c])\n检查玩家player能否特殊召唤[c到target_player场上，以sumtype召唤方式，sumpos表示形式]  \n如果需要可选参数，则必须全部使用  \n",
        "body": "IsPlayerCanSpecialSummon"
    },
    "GetChainEvent": {
        "prefix": "GetChainEvent",
        "description": "•Duel.GetChainEvent(int chainc)\n返回连锁 chainc 的相关参数，如果 chainc=0，则返回当前正在处理的连锁的相关参数  \n返回6个参数，eg,ep,ev,re,r,rp  \n",
        "body": "GetChainEvent"
    },
    "STATUS_NO_LEVEL": {
        "prefix": "STATUS_NO_LEVEL",
        "description": "无等级",
        "body": "STATUS_NO_LEVEL"
    },
    "STATUS_FLIP_SUMMON_TURN": {
        "prefix": "STATUS_FLIP_SUMMON_TURN",
        "description": "在本回合反转召唤",
        "body": "STATUS_FLIP_SUMMON_TURN"
    },
    "Effect.GlobalEffect": {
        "prefix": "Effect.GlobalEffect",
        "description": "•Effect.GlobalEffect()\n新建一个全局效果  \n",
        "body": "Effect.GlobalEffect"
    },
    "GetEquipGroup": {
        "prefix": "GetEquipGroup",
        "description": "•Card.GetEquipGroup(Card c)\n返回c当前装备着的卡片组  \n",
        "body": "GetEquipGroup"
    },
    "aux.Tuner": {
        "prefix": "aux.Tuner",
        "description": "•aux.Tuner(function f, ...)\n用于过滤满足单一过滤条件 f 的调整，,返回的是一个 有 bool 返回值类型的 函数，只要求是 调整怪兽的话，就写 aux.Tuner(nil)  \n第2个参数开始为额外参数  \n",
        "body": "aux.Tuner"
    },
    "Card.GetDefense": {
        "prefix": "Card.GetDefense",
        "description": "•Card.GetDefense(Card c)\n返回c的当前守备力  \n",
        "body": "Card.GetDefense"
    },
    "Duel.CheckChainTarget": {
        "prefix": "Duel.CheckChainTarget",
        "description": "•Duel.CheckChainTarget(int chainc, Card c)\n检查c是否是连锁chainc的效果的正确的对象  \n",
        "body": "Duel.CheckChainTarget"
    },
    "Effect.GetHandlerPlayer": {
        "prefix": "Effect.GetHandlerPlayer",
        "description": "•Effect.GetHandlerPlayer(Effect e)\n返回效果 e 的当前控制者，一般是Handle的控制者  \n",
        "body": "Effect.GetHandlerPlayer"
    },
    "aux.EnableSpiritReturn": {
        "prefix": "aux.EnableSpiritReturn",
        "description": "•aux.EnableSpiritReturn(Card c, int event1,...)\n为c添加灵魂怪兽结束阶段回到手卡的效果（发生事件event1,...的回合，结束阶段回到手卡）  \n",
        "body": "aux.EnableSpiritReturn"
    },
    "IsType": {
        "prefix": "IsType",
        "description": "•Card.IsType(Card c, int type)\n检查c是否属于类型type  \n",
        "body": "IsType"
    },
    "aux.AddFusionProcCodeFunRep": {
        "prefix": "aux.AddFusionProcCodeFunRep",
        "description": "•aux.AddFusionProcCodeFunRep(Card c, int code, function f, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为 code 的1只怪兽 ，和满足过滤条件 f 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,f,minc,maxc,code1)  \n",
        "body": "aux.AddFusionProcCodeFunRep"
    },
    "EFFECT_XYZ_MATERIAL": {
        "prefix": "EFFECT_XYZ_MATERIAL",
        "description": "可以当作超量素材",
        "body": "EFFECT_XYZ_MATERIAL"
    },
    "Duel.GetLP": {
        "prefix": "Duel.GetLP",
        "description": "•Duel.GetLP(int player)\n返回玩家player的当前LP  \n",
        "body": "Duel.GetLP"
    },
    "Duel.GetChainInfo": {
        "prefix": "Duel.GetChainInfo",
        "description": "•Duel.GetChainInfo(int chainc, ...)\n返回连锁chainc的信息，如果chainc=0，则返回当前正在处理的连锁的信息  \n此函数根据传入的参数个数按顺序返回相应数量的返回值参数可以是:  \nCHAININFO_CHAIN_COUNT               连锁序号  \nCHAININFO_TRIGGERING_EFFECT         连锁的效果  \nCHAININFO_TRIGGERING_PLAYER         连锁的玩家  \nCHAININFO_TRIGGERING_CONTROLER      连锁发生位置所属玩家  \nCHAININFO_TRIGGERING_LOCATION       连锁发生位置  \nCHAININFO_TRIGGERING_SEQUENCE       连锁发生的位置的序号  \nCHAININFO_TARGET_CARDS              连锁的对象卡片组  \nCHAININFO_TARGET_PLAYER             连锁的对象玩家  \nCHAININFO_TARGET_PARAM              连锁的对象参数  \nCHAININFO_DISABLE_REASON            连锁被无效的原因效果  \nCHAININFO_DISABLE_PLAYER            连锁被无效的原因玩家  \nCHAININFO_CHAIN_ID                  连锁的唯一标识  \nCHAININFO_TYPE                      连锁卡片的类型（怪兽·魔法·陷阱）  \nCHAININFO_EXTTYPE                   连锁卡片的具体类型（例如同调怪兽·永续魔法·反击陷阱）  \n举例：  \nDuel.GetChainInfo(0,CHAININFO_TRIGGERING_LOCATION,CHAININFO_TARGET_CARDS)  \n将会返回当前连锁发生的位置和对象卡  \n",
        "body": "Duel.GetChainInfo"
    },
    "GetTargetCount": {
        "prefix": "GetTargetCount",
        "description": "•Duel.GetTargetCount(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n基本同Duel.GetMatchingGroupCount ，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象  \n",
        "body": "GetTargetCount"
    },
    "IsPlayerCanSendtoHand": {
        "prefix": "IsPlayerCanSendtoHand",
        "description": "•Duel.IsPlayerCanSendtoHand(int player[, Card c])\n检查玩家是否能把卡片[c]送去手牌  \n",
        "body": "IsPlayerCanSendtoHand"
    },
    "EFFECT_IGNORE_BATTLE_TARGET": {
        "prefix": "EFFECT_IGNORE_BATTLE_TARGET",
        "description": "不能成为攻击对象-鶸型（传说的渔人）",
        "body": "EFFECT_IGNORE_BATTLE_TARGET"
    },
    "Duel.GetDiceResult": {
        "prefix": "Duel.GetDiceResult",
        "description": "•Duel.GetDiceResult()\n返回当前掷骰子的结果  \n",
        "body": "Duel.GetDiceResult"
    },
    "EVENT_DAMAGE_STEP_END": {
        "prefix": "EVENT_DAMAGE_STEP_END",
        "description": "伤害步骤结束时",
        "body": "EVENT_DAMAGE_STEP_END"
    },
    "HINTMSG_FACEDOWNATTACK": {
        "prefix": "HINTMSG_FACEDOWNATTACK",
        "description": "请选择里侧攻击表示的怪兽",
        "body": "HINTMSG_FACEDOWNATTACK"
    },
    "GetSummonLocation": {
        "prefix": "GetSummonLocation",
        "description": "•Card.GetSummonLocation(Card c)\n返回c的召唤/特殊召唤的位置  \n",
        "body": "GetSummonLocation"
    },
    "NegateActivation": {
        "prefix": "NegateActivation",
        "description": "•Duel.NegateActivation(int chainc)\n使连锁chainc的发动无效，返回值表示是否成功  \nchainc=0 表示当前效果  \n",
        "body": "NegateActivation"
    },
    "SendtoDeck": {
        "prefix": "SendtoDeck",
        "description": "•Duel.SendtoDeck(Card|Group targets, int player|nil, int seq, int reason)\n以reason原因把targets送去玩家player的卡组，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的卡组  \n如果seq=0，则是返回卡组最顶端；seq=1则是返回卡组最底端；  \n其余情况则是返回最顶端并且标记需要洗卡组  \n",
        "body": "SendtoDeck"
    },
    "Duel.CheckReleaseGroupEx": {
        "prefix": "Duel.CheckReleaseGroupEx",
        "description": "•Duel.CheckReleaseGroupEx(int player, function f|nil, int count, Card|Group ex|nil, ...)\n检查玩家player场上·手卡是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第5个参数开始为额外参数  \n",
        "body": "Duel.CheckReleaseGroupEx"
    },
    "GetMinGroup": {
        "prefix": "GetMinGroup",
        "description": "•Group.GetMinGroup(Group g, function f, ...)\nf为返回一个interger值的函数，从卡片组g中筛选出具有最小的f的值的卡  \n第2个返回值为这个最小值，从第3个参数开始为额外参数  \n要使用第2个返回值注意检查g非空  \n",
        "body": "GetMinGroup"
    },
    "SelectWithSumEqual": {
        "prefix": "SelectWithSumEqual",
        "description": "•Group.SelectWithSumEqual(Group g, int player, function f, int sum, int min, int max, ...)\n让玩家player从卡片组g中选取一个数量为min-max的子集使子集的特定函数 f 的和等于sum，从第7个参数开始为额外参数  \n",
        "body": "SelectWithSumEqual"
    },
    "CATEGORY_DISABLE_SUMMON": {
        "prefix": "CATEGORY_DISABLE_SUMMON",
        "description": "无效召唤效果",
        "body": "CATEGORY_DISABLE_SUMMON"
    },
    "Card.GetFirstCardTarget": {
        "prefix": "Card.GetFirstCardTarget",
        "description": "•Card.GetFirstCardTarget(Card c)\n返回c当前第一个永续对象，没有则返回 nil  \n",
        "body": "Card.GetFirstCardTarget"
    },
    "AddFusionProcFunRep2": {
        "prefix": "AddFusionProcFunRep2",
        "description": "•aux.AddFusionProcFunRep2(Card c, function f, int minc, int maxc, bool insf)\n为c 添加融合召唤手续  \n用 minc-maxc 个 满足相同条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,false,insf,f,minc,maxc)  \n",
        "body": "AddFusionProcFunRep2"
    },
    "EVENT_CHAIN_NEGATED": {
        "prefix": "EVENT_CHAIN_NEGATED",
        "description": "连锁发动无效时（EVENT_CHAIN_ACTIVATING之後）",
        "body": "EVENT_CHAIN_NEGATED"
    },
    "Effect.IsHasCategory": {
        "prefix": "Effect.IsHasCategory",
        "description": "•Effect.IsHasCategory(Effect e, int cate)\n检查效果e是否含有效果分类cate  \n",
        "body": "Effect.IsHasCategory"
    },
    "Duel.AddCustomActivityCounter": {
        "prefix": "Duel.AddCustomActivityCounter",
        "description": "•Duel.AddCustomActivityCounter(int counter_id, int activity_type, function f)\n设置操作类型为activity_type、代号为counter_id的计数器，放在initial_effect函数内  \nf为过滤函数，以Card类型为参数，返回值为false的卡片进行以下类型的操作，计数器增加1（目前最多为1）  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的set）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的set）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_CHAIN          =7\t--发动效果  \n",
        "body": "Duel.AddCustomActivityCounter"
    },
    "Debug.ReloadFieldEnd": {
        "prefix": "Debug.ReloadFieldEnd",
        "description": "•Debug.ReloadFieldEnd()\n布局结束  \n",
        "body": "Debug.ReloadFieldEnd"
    },
    "HINT_RACE": {
        "prefix": "HINT_RACE",
        "body": "HINT_RACE"
    },
    "Duel.GetMatchingGroupCount": {
        "prefix": "Duel.GetMatchingGroupCount",
        "description": "•Duel.GetMatchingGroupCount(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的卡的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n",
        "body": "Duel.GetMatchingGroupCount"
    },
    "GetTributeRequirement": {
        "prefix": "GetTributeRequirement",
        "description": "•Card.GetTributeRequirement(Card c)\n返回通常召唤c所需要的祭品的最小和最大数量  \n",
        "body": "GetTributeRequirement"
    },
    "RegisterEffect": {
        "prefix": "RegisterEffect",
        "description": "•Card.RegisterEffect(Card c, Effect e[, bool forced=false])\n把效果e注册给c，返回效果的全局id，并设置e的Handler为c  \n默认情况下注册时如果c带有免疫e的效果那么注册会失败  \n如果forced为true则不会检查c对e的免疫效果  \n\n•Duel.RegisterEffect(Effect e, int player)\n把效果e作为玩家player的效果注册给全局环境  \n\n",
        "body": "RegisterEffect"
    },
    "Card.GetPreviousRaceOnField": {
        "prefix": "Card.GetPreviousRaceOnField",
        "description": "•Card.GetPreviousRaceOnField(Card c)\n返回c位置变化之前在场上的种族  \n",
        "body": "Card.GetPreviousRaceOnField"
    },
    "CHINT_DESC": {
        "prefix": "CHINT_DESC",
        "body": "CHINT_DESC"
    },
    "Duel.DiscardHand": {
        "prefix": "Duel.DiscardHand",
        "description": "•Duel.DiscardHand(int player, function f, int min, int max, int reason, Card|Group ex|nil, ...)\n过滤函数让玩家player选择并以reason原因丢弃满足筛选条件f并不等于ex的min-max张手卡  \n第7个参数开始为额外参数  \n",
        "body": "Duel.DiscardHand"
    },
    "Card.CreateEffectRelation": {
        "prefix": "Card.CreateEffectRelation",
        "description": "•Card.CreateEffectRelation(Card c, Effect e)\n为卡片c和效果e建立联系  \n",
        "body": "Card.CreateEffectRelation"
    },
    "MSet": {
        "prefix": "MSet",
        "description": "•Duel.MSet(int player, Card c, bool ignore_count, Effect e|nil[,int min=0, int zone=0x1f])\n让玩家 player 以效果e对卡片c[在区域 zone]进行通常召唤的Set，至少使用min个祭品  \n如果e=nil,那么就按照一般的通常召唤规则进行通常召唤  \n如果ignore_count=true，则忽略每回合的通常召唤次数限制  \n",
        "body": "MSet"
    },
    "GetLocationCountFromEx": {
        "prefix": "GetLocationCountFromEx",
        "description": "•Duel.GetLocationCountFromEx(int player[, int reason_player=player, Group|Card targets|nil, Card sc, int zone=0xff])\n返回玩家player场上[假如因玩家 reason_player 的原因让 targets 离场后，把卡片 sc 在 zone 区域特殊召唤]可用的 能让额外卡组的怪兽 出场的空格数  \n",
        "body": "GetLocationCountFromEx"
    },
    "Duel.AnnounceType": {
        "prefix": "Duel.AnnounceType",
        "description": "•Duel.AnnounceType(int player)\n让玩家player宣言一个卡片类型（怪兽·魔法·陷阱）  \n别想着直接宣言 复合类型（永续魔法 等）  \n",
        "body": "Duel.AnnounceType"
    },
    "SetLabel": {
        "prefix": "SetLabel",
        "description": "•Effect.SetLabel(Effect e, int label[, int label2, ...])\n设置效果 e 的Label(可以设置多个)  \n",
        "body": "SetLabel"
    },
    "Card.IsAbleToChangeControler": {
        "prefix": "Card.IsAbleToChangeControler",
        "description": "•Card.IsAbleToChangeControler(Card c)\n检查c是否可以改变控制权  \n注：仅当卡收到了“不能改变控制权”的效果的影响时，此函数返回false  \n",
        "body": "Card.IsAbleToChangeControler"
    },
    "GetPreviousAttackOnField": {
        "prefix": "GetPreviousAttackOnField",
        "description": "•Card.GetPreviousAttackOnField(Card c)\n返回c位置变化之前在场上的攻击力  \n",
        "body": "GetPreviousAttackOnField"
    },
    "SetAIName": {
        "prefix": "SetAIName",
        "description": "•Debug.SetAIName(string name)\n设置AI的名字，最大长度 100 个字符（1个汉字2个字符）  \n",
        "body": "SetAIName"
    },
    "IsRankBelow": {
        "prefix": "IsRankBelow",
        "description": "•Card.IsRankBelow(Card c, int rank)\n检查c是否是阶级rank以下（至少为1）  \n",
        "body": "IsRankBelow"
    },
    "nzdef": {
        "prefix": "nzdef",
        "description": "•aux.nzdef(Card c)\n守备力不为0的表侧表示的怪兽的过滤函数的简单写法  \nfunction Auxiliary.nzdef(c)  \n\treturn c:IsFaceup() and c:GetDefense()>0  \nend  \n",
        "body": "nzdef"
    },
    "EFFECT_CANNOT_DISABLE_SUMMON": {
        "prefix": "EFFECT_CANNOT_DISABLE_SUMMON",
        "description": "召唤不会无效",
        "body": "EFFECT_CANNOT_DISABLE_SUMMON"
    },
    "CreateRelation": {
        "prefix": "CreateRelation",
        "description": "•Card.CreateRelation(Card c1, Card c2, int reset_flag)\n为c1建立与c2的联系，此联系仅会由于c1发生RESET_EVENT的事件reset  \n",
        "body": "CreateRelation"
    },
    "STATUS_SPSUMMON_STEP": {
        "prefix": "STATUS_SPSUMMON_STEP",
        "description": "效果特召處理中",
        "body": "STATUS_SPSUMMON_STEP"
    },
    "Card.GetLinkCode": {
        "prefix": "Card.GetLinkCode",
        "description": "•Card.GetLinkCode(Card c)\n返回c作为link素材的卡号（包括c原本的卡号）  \n",
        "body": "Card.GetLinkCode"
    },
    "STATUS_COPYING_EFFECT": {
        "prefix": "STATUS_COPYING_EFFECT",
        "description": "复制效果",
        "body": "STATUS_COPYING_EFFECT"
    },
    "Remove": {
        "prefix": "Remove",
        "description": "•Group.Remove(Group g, function f, Card ex|nil, ...)\n从g中移除满足筛选条件f并且不等于ex的所有卡，第4个参数开始是额外参数  \n\n•Duel.Remove(Card|Group targets, int pos, int reason)\n以reason原因，pos表示形式除外targets，返回值是实际被操作的数量  \n如果reason包含REASON_TEMPORARY，那么视为是暂时除外，可以通过Duel.ReturnToField返回到场上  \n\n",
        "body": "Remove"
    },
    "aux.IsMaterialListCode": {
        "prefix": "aux.IsMaterialListCode",
        "description": "•aux.IsMaterialListCode(Card c, int code])\n检测 c 是否是有卡名 code 为素材的卡  \nc.material  \n",
        "body": "aux.IsMaterialListCode"
    },
    "EFFECT_CANNOT_REMOVE": {
        "prefix": "EFFECT_CANNOT_REMOVE",
        "description": "不能除外",
        "body": "EFFECT_CANNOT_REMOVE"
    },
    "GetMatchingGroupCount": {
        "prefix": "GetMatchingGroupCount",
        "description": "•Duel.GetMatchingGroupCount(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的卡的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n",
        "body": "GetMatchingGroupCount"
    },
    "EFFECT_CHANGE_LSCALE": {
        "prefix": "EFFECT_CHANGE_LSCALE",
        "description": "设置左刻度",
        "body": "EFFECT_CHANGE_LSCALE"
    },
    "Card.IsDefense": {
        "prefix": "Card.IsDefense",
        "description": "•Card.IsDefense(Card c, int def[, int atk2,...])\n检查c的守备力是否是 def1[, 或者为 def2...]，如果c不是怪兽卡，或者不在 LOCATION_MZONE 则都返回false  \n",
        "body": "Card.IsDefense"
    },
    "EFFECT_NECRO_VALLEY": {
        "prefix": "EFFECT_NECRO_VALLEY",
        "description": "王家长眠之谷",
        "body": "EFFECT_NECRO_VALLEY"
    },
    "IsLinkBelow": {
        "prefix": "IsLinkBelow",
        "description": "•Card.IsLinkBelow(Card c, int link)\n检查c是否连接标记数量是link以下（至少为1）  \n",
        "body": "IsLinkBelow"
    },
    "IsDefenseBelow": {
        "prefix": "IsDefenseBelow",
        "description": "•Card.IsDefenseBelow(Card c, int def)\n检查c是否是守备力def以下（至少为0）  \n",
        "body": "IsDefenseBelow"
    },
    "GLOBALFLAG_DELAYED_QUICKEFFECT": {
        "prefix": "GLOBALFLAG_DELAYED_QUICKEFFECT",
        "description": "N/A",
        "body": "GLOBALFLAG_DELAYED_QUICKEFFECT"
    },
    "synlimit": {
        "prefix": "synlimit",
        "description": "•aux.synlimit(Effect e, Effect se, int sp, int st)\n不能用 同调召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.synlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_SYNCHRO==SUMMON_TYPE_SYNCHRO  \nend  \n",
        "body": "synlimit"
    },
    "GLOBALFLAG_DECK_REVERSE_CHECK": {
        "prefix": "GLOBALFLAG_DECK_REVERSE_CHECK",
        "description": "卡组翻转标记",
        "body": "GLOBALFLAG_DECK_REVERSE_CHECK"
    },
    "EFFECT_HAND_LIMIT": {
        "prefix": "EFFECT_HAND_LIMIT",
        "description": "手牌数量限制",
        "body": "EFFECT_HAND_LIMIT"
    },
    "Auxiliary.fuslimit": {
        "prefix": "Auxiliary.fuslimit",
        "description": "•Auxiliary.fuslimit(Effect e, Effect se, int sp, int st)\n不能用 融合召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.fuslimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_FUSION==SUMMON_TYPE_FUSION  \nend  \n",
        "body": "Auxiliary.fuslimit"
    },
    "CATEGORY_ATKCHANGE": {
        "prefix": "CATEGORY_ATKCHANGE",
        "description": "改变攻击效果",
        "body": "CATEGORY_ATKCHANGE"
    },
    "aux.nzatk": {
        "prefix": "aux.nzatk",
        "description": "•aux.nzatk(Card c)\n攻击力不为0的表侧表示的怪兽的过滤函数的简单写法  \nfunction Auxiliary.nzatk(c)  \n\treturn c:IsFaceup() and c:GetAttack()>0  \nend  \n",
        "body": "aux.nzatk"
    },
    "EFFECT_DUAL_SUMMONABLE": {
        "prefix": "EFFECT_DUAL_SUMMONABLE",
        "description": "可以再度召唤",
        "body": "EFFECT_DUAL_SUMMONABLE"
    },
    "Card.IsRace": {
        "prefix": "Card.IsRace",
        "description": "•Card.IsRace(Card c, int race)\n检查c是否属于种族race  \n",
        "body": "Card.IsRace"
    },
    "IsCanOverlay": {
        "prefix": "IsCanOverlay",
        "description": "•Card.IsCanOverlay(Card c[, int player)\n检查c是否可以被[玩家 player]叠放  \n衍生物、不在场上的卡或者是被禁止的卡、不是玩家 player 的卡并且不会被改变控制权的卡 都会返回false  \n",
        "body": "IsCanOverlay"
    },
    "Card.IsLinkSummonable": {
        "prefix": "Card.IsLinkSummonable",
        "description": "•Card.IsLinkSummonable(Card c, Group mg|nil[, Card lcard, minc=0, maxc=0])\n检查是否可以用[包含卡 lcard 的]场上[或mg]的卡[中选出 minc-maxc 个连接素材]对c进行连接召唤手续  \n如果mg为nil，并且没有 lcard，则此函数与 c:IsSpecialSummonable(SUMMON_TYPE_LINK)作用相同  \nc 如果不是连接会返回 false  \n",
        "body": "Card.IsLinkSummonable"
    },
    "IsCodeListed": {
        "prefix": "IsCodeListed",
        "description": "•aux.IsCodeListed(Card c, int code)\n检测 c 是否是有卡名 code 记述的卡  \n",
        "body": "IsCodeListed"
    },
    "EFFECT_FLAG_COF": {
        "prefix": "EFFECT_FLAG_COF",
        "description": "N/A",
        "body": "EFFECT_FLAG_COF"
    },
    "HINTMSG_FMATERIAL": {
        "prefix": "HINTMSG_FMATERIAL",
        "description": "请选择要作为融合素材的卡",
        "body": "HINTMSG_FMATERIAL"
    },
    "STATUS_TO_ENABLE": {
        "prefix": "STATUS_TO_ENABLE",
        "description": "将变成有效",
        "body": "STATUS_TO_ENABLE"
    },
    "IsActiveType": {
        "prefix": "IsActiveType",
        "description": "•Effect.IsActiveType(Effect e, int type)\n检查效果 e 的效果类型（怪兽·魔法·陷阱等）是否有type  \n",
        "body": "IsActiveType"
    },
    "ATTRIBUTE_DIVINE": {
        "prefix": "ATTRIBUTE_DIVINE",
        "description": "神",
        "body": "ATTRIBUTE_DIVINE"
    },
    "GetBattleDamage": {
        "prefix": "GetBattleDamage",
        "description": "•Duel.GetBattleDamage(int player)\n返回玩家player在本次战斗中受到的伤害  \n",
        "body": "GetBattleDamage"
    },
    "Card.GetMaterialCount": {
        "prefix": "Card.GetMaterialCount",
        "description": "•Card.GetMaterialCount(Card c)\n返回c出场使用的素材数量  \n",
        "body": "Card.GetMaterialCount"
    },
    "PayLPCost": {
        "prefix": "PayLPCost",
        "description": "•Duel.PayLPCost(int player, int cost)\n让玩家player支付cost点lp  \n",
        "body": "PayLPCost"
    },
    "EVENT_ADD_COUNTER": {
        "prefix": "EVENT_ADD_COUNTER",
        "description": "增加指示物时",
        "body": "EVENT_ADD_COUNTER"
    },
    "Duel.GetDrawCount": {
        "prefix": "Duel.GetDrawCount",
        "description": "•Duel.GetDrawCount(int player)\n返回玩家player每回合的规则抽卡数量  \n",
        "body": "Duel.GetDrawCount"
    },
    "aux.gfcheck": {
        "prefix": "aux.gfcheck",
        "description": "•aux.gfcheck(Group g, function f, any a1, any a2)\n--check for group with 2 cards, each card match f with a1/a2 as argument  \nfunction Auxiliary.gfcheck(g,f,a1,a2)  \n\tif #g~=2 then return false end  \n\tlocal c1=g:GetFirst()  \n\tlocal c2=g:GetNext()  \n\treturn f(c1,a1) and f(c2,a2) or f(c2,a1) and f(c1,a2)  \nend  \n",
        "body": "aux.gfcheck"
    },
    "HINTMSG_SPSUMMON": {
        "prefix": "HINTMSG_SPSUMMON",
        "description": "请选择要特殊召唤的卡",
        "body": "HINTMSG_SPSUMMON"
    },
    "aux.linklimit": {
        "prefix": "aux.linklimit",
        "description": "•aux.linklimit(Effect e, Effect se, int sp, int st)\n不能用 连接召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.linklimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_LINK==SUMMON_TYPE_LINK  \nend  \n",
        "body": "aux.linklimit"
    },
    "Duel.SelectTunerMaterial": {
        "prefix": "Duel.SelectTunerMaterial",
        "description": "•Duel.SelectTunerMaterial(int player, Card c, Card tuner, function f1|nil, function f2|nil, int min, int max[, Group mg|nil])\n让玩家从场上[或mg中]选择用于同调c需要的满足条件的以tuner作为调整的min-max张卡的一组素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \n",
        "body": "Duel.SelectTunerMaterial"
    },
    "Card.IsLinkAttribute": {
        "prefix": "Card.IsLinkAttribute",
        "description": "•Card.IsLinkAttribute(Card c, int attribute[, int player=PLAYER_NONE])\n检查c[由player连接召唤时]用作连接素材是否属于属性attribute  \n",
        "body": "Card.IsLinkAttribute"
    },
    "Card.CheckRemoveOverlayCard": {
        "prefix": "Card.CheckRemoveOverlayCard",
        "description": "•Card.CheckRemoveOverlayCard(Card c, int player, int count, int reason)\n检查玩家player能否以reason为原因，至少移除c叠放的count张卡  \n",
        "body": "Card.CheckRemoveOverlayCard"
    },
    "IsCode": {
        "prefix": "IsCode",
        "description": "•Card.IsCode(Card c, int code1[, int code2,...])\n检查c的卡号是否是 code1[, 或者为 code2...]  \n",
        "body": "IsCode"
    },
    "SetReset": {
        "prefix": "SetReset",
        "description": "•Effect.SetReset(Effect e, int reset_flag[, int reset_count=1])\n设置效果 e 的reset参数  \n",
        "body": "SetReset"
    },
    "Card.GetLink": {
        "prefix": "Card.GetLink",
        "description": "•Card.GetLink(Card c)\n返回c的连接标记数量  \n",
        "body": "Card.GetLink"
    },
    "IsAttackBelow": {
        "prefix": "IsAttackBelow",
        "description": "•Card.IsAttackBelow(Card c, int atk)\n检查c是否是攻击力atk以下（至少为0）  \n",
        "body": "IsAttackBelow"
    },
    "EFFECT_ADD_LINK_ATTRIBUTE": {
        "prefix": "EFFECT_ADD_LINK_ATTRIBUTE",
        "description": "用作连接素材时的属性",
        "body": "EFFECT_ADD_LINK_ATTRIBUTE"
    },
    "TIMING_BATTLED": {
        "prefix": "TIMING_BATTLED",
        "description": "伤害计算后时点",
        "body": "TIMING_BATTLED"
    },
    "EFFECT_CANNOT_FLIP_SUMMON": {
        "prefix": "EFFECT_CANNOT_FLIP_SUMMON",
        "description": "不能翻转召唤怪兽",
        "body": "EFFECT_CANNOT_FLIP_SUMMON"
    },
    "GetFirst": {
        "prefix": "GetFirst",
        "description": "•Group.GetFirst(Group g)\n返回卡片组g中第一张卡，并重置当前指针到g中第一张卡  \n如果g中不存在卡则返回nil  \n",
        "body": "GetFirst"
    },
    "EFFECT_CHANGE_DAMAGE": {
        "prefix": "EFFECT_CHANGE_DAMAGE",
        "description": "改变伤害数值",
        "body": "EFFECT_CHANGE_DAMAGE"
    },
    "EFFECT_CHANGE_CODE": {
        "prefix": "EFFECT_CHANGE_CODE",
        "description": "改变卡名",
        "body": "EFFECT_CHANGE_CODE"
    },
    "GetUsableMZoneCount": {
        "prefix": "GetUsableMZoneCount",
        "description": "•Duel.GetUsableMZoneCount(int player[, int use_player])\n返回玩家player场上[对于 use_player 来说]可用的怪兽区数量（？）  \n",
        "body": "GetUsableMZoneCount"
    },
    "Duel.Remove": {
        "prefix": "Duel.Remove",
        "description": "•Duel.Remove(Card|Group targets, int pos, int reason)\n以reason原因，pos表示形式除外targets，返回值是实际被操作的数量  \n如果reason包含REASON_TEMPORARY，那么视为是暂时除外，可以通过Duel.ReturnToField返回到场上  \n",
        "body": "Duel.Remove"
    },
    "HINTMSG_FACEUPDEFENSE": {
        "prefix": "HINTMSG_FACEUPDEFENSE",
        "description": "请选择表侧守备表示的怪兽",
        "body": "HINTMSG_FACEUPDEFENSE"
    },
    "IsExists": {
        "prefix": "IsExists",
        "description": "•Group.IsExists(Group g, function f, int count, Card|Group ex|nil, ...)\n过滤函数，检查卡片组g中是否存在至少count张满足筛选条件f并且不等于ex的卡  \n从第5个参数开始为额外参数  \n",
        "body": "IsExists"
    },
    "AddRitualProcGreater": {
        "prefix": "AddRitualProcGreater",
        "description": "•aux.AddRitualProcGreater(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetOriginalLevel,\"Greater\",summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcGreater"
    },
    "Effect.IsActivatable": {
        "prefix": "Effect.IsActivatable",
        "description": "•Effect.IsActivatable(Effect e, int player[, bool neglect_loc=false, bool neglect_target=false])\n检查效果e能否由player发动  \nneglect_loc=true 为不检测发动位置， neglect_target=true 为不检测对象要求  \n",
        "body": "Effect.IsActivatable"
    },
    "IsDefense": {
        "prefix": "IsDefense",
        "description": "•Card.IsDefense(Card c, int def[, int atk2,...])\n检查c的守备力是否是 def1[, 或者为 def2...]，如果c不是怪兽卡，或者不在 LOCATION_MZONE 则都返回false  \n",
        "body": "IsDefense"
    },
    "GetFusionCode": {
        "prefix": "GetFusionCode",
        "description": "•Card.GetFusionCode(Card c)\n返回c作为融合素材时的卡号（包括c原本的卡号）  \n",
        "body": "GetFusionCode"
    },
    "IsPreviousPosition": {
        "prefix": "IsPreviousPosition",
        "description": "•Card.IsPreviousPosition(Card c, int pos)\n检查c位置变化之前是否是表示形式pos  \n",
        "body": "IsPreviousPosition"
    },
    "EFFECT_SPSUMMON_COST": {
        "prefix": "EFFECT_SPSUMMON_COST",
        "description": "特殊召唤代价（暴君龙）",
        "body": "EFFECT_SPSUMMON_COST"
    },
    "HINTMSG_DEFENSE": {
        "prefix": "HINTMSG_DEFENSE",
        "description": "请选择守备表示的怪兽",
        "body": "HINTMSG_DEFENSE"
    },
    "IsChainDisablable": {
        "prefix": "IsChainDisablable",
        "description": "•Duel.IsChainDisablable(int chainc)\n检查连锁chainc的效果能否被无效  \n",
        "body": "IsChainDisablable"
    },
    "EFFECT_TO_HAND_REDIRECT": {
        "prefix": "EFFECT_TO_HAND_REDIRECT",
        "description": "回手牌时重新指定去向",
        "body": "EFFECT_TO_HAND_REDIRECT"
    },
    "GetFusionAttribute": {
        "prefix": "GetFusionAttribute",
        "description": "•Card.GetFusionAttribute(Card c[, int player=PLAYER_NONE])\n返回c[由player融合召唤时]用作融合素材时的属性  \n",
        "body": "GetFusionAttribute"
    },
    "Duel.CheckPhaseActivity": {
        "prefix": "Duel.CheckPhaseActivity",
        "description": "•Duel.CheckPhaseActivity()\n检查玩家在当前阶段是否有操作（是否处于阶段开始时，如七皇之剑）  \n",
        "body": "Duel.CheckPhaseActivity"
    },
    "ReleaseEffectRelation": {
        "prefix": "ReleaseEffectRelation",
        "description": "•Card.ReleaseEffectRelation(Card c, Effect e)\n手动释放c与效果e的联系  \n",
        "body": "ReleaseEffectRelation"
    },
    "EVENT_RETURN_TO_GRAVE": {
        "prefix": "EVENT_RETURN_TO_GRAVE",
        "description": "回到墓地时",
        "body": "EVENT_RETURN_TO_GRAVE"
    },
    "Effect.GetValue": {
        "prefix": "Effect.GetValue",
        "description": "•Effect.GetValue(Effect e)\n返回效果 e 的value属性  \n",
        "body": "Effect.GetValue"
    },
    "__band": {
        "prefix": "__band",
        "description": "•Group.__band(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 和 target2 中相同的卡（就是那张卡同时存在于 target1 和 target2 ）全部添加到 这个卡片组里，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n",
        "body": "__band"
    },
    "BreakEffect": {
        "prefix": "BreakEffect",
        "description": "•Duel.BreakEffect()\n中断当前效果，使之后的效果处理视为不同时处理，此函数会造成错时点  \n",
        "body": "BreakEffect"
    },
    "TIMING_SSET": {
        "prefix": "TIMING_SSET",
        "description": "放置魔陷时点",
        "body": "TIMING_SSET"
    },
    "Duel.ReleaseRitualMaterial": {
        "prefix": "Duel.ReleaseRitualMaterial",
        "description": "•Duel.ReleaseRitualMaterial(Group g)\n解放仪式用的素材g，如果是墓地的仪式魔人等卡则除外  \n",
        "body": "Duel.ReleaseRitualMaterial"
    },
    "EFFECT_UNRELEASABLE_EFFECT": {
        "prefix": "EFFECT_UNRELEASABLE_EFFECT",
        "description": "不能被解放",
        "body": "EFFECT_UNRELEASABLE_EFFECT"
    },
    "EVENT_CHAIN_SOLVING": {
        "prefix": "EVENT_CHAIN_SOLVING",
        "description": "连锁处理开始时（EVENT_CHAIN_ACTIVATING之後）",
        "body": "EVENT_CHAIN_SOLVING"
    },
    "HINTMSG_LMATERIAL": {
        "prefix": "HINTMSG_LMATERIAL",
        "description": "请选择要作为连接素材的卡",
        "body": "HINTMSG_LMATERIAL"
    },
    "GetControler": {
        "prefix": "GetControler",
        "description": "•Card.GetControler(Card c)\n返回c的当前控制者  \n",
        "body": "GetControler"
    },
    "GetLocation": {
        "prefix": "GetLocation",
        "description": "•Card.GetLocation(Card c)\n返回c当前的所在位置  \n",
        "body": "GetLocation"
    },
    "SetSynchroMaterial": {
        "prefix": "SetSynchroMaterial",
        "description": "•Duel.SetSynchroMaterial(Group g)\n设置g为需要使用的同调素材  \n",
        "body": "SetSynchroMaterial"
    },
    "GetRace": {
        "prefix": "GetRace",
        "description": "•Card.GetRace(Card c)\n返回c的当前种族  \n注：对某些多种族怪兽如动画效果的魔术猿，此函数的返回值可能是几个种族的组合值  \n",
        "body": "GetRace"
    },
    "drccheck": {
        "prefix": "drccheck",
        "description": "•aux.drccheck(Group g)\n检测卡片组 g 中是否有相同种族的卡的简单写法，返回值如果为 true 表示没有相同种族卡  \nfunction Auxiliary.drccheck(g)  \n\treturn g:GetClassCount(Card.GetRace)==#g  \nend  \n",
        "body": "drccheck"
    },
    "CATEGORY_SPECIAL_SUMMON": {
        "prefix": "CATEGORY_SPECIAL_SUMMON",
        "description": "含特殊召唤的效果",
        "body": "CATEGORY_SPECIAL_SUMMON"
    },
    "EFFECT_SYNCHRO_CHECK": {
        "prefix": "EFFECT_SYNCHRO_CHECK",
        "description": "基因组斗士",
        "body": "EFFECT_SYNCHRO_CHECK"
    },
    "Group.GetMinGroup": {
        "prefix": "Group.GetMinGroup",
        "description": "•Group.GetMinGroup(Group g, function f, ...)\nf为返回一个interger值的函数，从卡片组g中筛选出具有最小的f的值的卡  \n第2个返回值为这个最小值，从第3个参数开始为额外参数  \n要使用第2个返回值注意检查g非空  \n",
        "body": "Group.GetMinGroup"
    },
    "IsPreviousLocation": {
        "prefix": "IsPreviousLocation",
        "description": "•Card.IsPreviousLocation(Card c, int location)\n检查c之前的位置是否是location  \n",
        "body": "IsPreviousLocation"
    },
    "Card.GetBattleTarget": {
        "prefix": "Card.GetBattleTarget",
        "description": "•Card.GetBattleTarget(Card c)\n返回与c进行战斗的卡，没有则返回nil  \n",
        "body": "Card.GetBattleTarget"
    },
    "EFFECT_EXTRA_RELEASE_SUM": {
        "prefix": "EFFECT_EXTRA_RELEASE_SUM",
        "description": "代替召唤解放（帝王的烈旋）",
        "body": "EFFECT_EXTRA_RELEASE_SUM"
    },
    "__add": {
        "prefix": "__add",
        "description": "•Group.__add(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 和 target2 中的 全部卡添加到这个卡片组，并返回这个卡片组，若有相同的卡只会添加1次， target1,target2 本身不会有任何变化  \n",
        "body": "__add"
    },
    "HINTMSG_RTOHAND": {
        "prefix": "HINTMSG_RTOHAND",
        "description": "请选择要返回手牌的卡",
        "body": "HINTMSG_RTOHAND"
    },
    "Card.IsFaceup": {
        "prefix": "Card.IsFaceup",
        "description": "•Card.IsFaceup(Card c)\n检查c是否是表侧表示  \n",
        "body": "Card.IsFaceup"
    },
    "GetPosition": {
        "prefix": "GetPosition",
        "description": "•Card.GetPosition(Card c)\n返回c当前的表示形式  \n",
        "body": "GetPosition"
    },
    "Group.__bxor": {
        "prefix": "Group.__bxor",
        "description": "•Group.__bxor(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 和 target2 中不同的卡（就是只存在于 target1 或者 target2 里的卡）全部添加到 这个卡片组里，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n",
        "body": "Group.__bxor"
    },
    "PHASE_MAIN2": {
        "prefix": "PHASE_MAIN2",
        "description": "主要阶段2",
        "body": "PHASE_MAIN2"
    },
    "PHASE_MAIN1": {
        "prefix": "PHASE_MAIN1",
        "description": "主要阶段1",
        "body": "PHASE_MAIN1"
    },
    "KeepAlive": {
        "prefix": "KeepAlive",
        "description": "•Group.KeepAlive(Group g)\n让卡片组g持续，把卡片组设置为效果的LabelObject需要设置  \n",
        "body": "KeepAlive"
    },
    "POS_FACEDOWN": {
        "prefix": "POS_FACEDOWN",
        "description": "背面表示",
        "body": "POS_FACEDOWN"
    },
    "GetOriginalLevel": {
        "prefix": "GetOriginalLevel",
        "description": "•Card.GetOriginalLevel(Card c)\n返回c的卡片记载的等级  \n",
        "body": "GetOriginalLevel"
    },
    "Group.__bor": {
        "prefix": "Group.__bor",
        "description": "•Group.__bor(Group|Card target1, Group|Card target2)\n代码和 Group.__add 完全一样  \n",
        "body": "Group.__bor"
    },
    "SetHintTiming": {
        "prefix": "SetHintTiming",
        "description": "•Effect.SetHintTiming(Effect e, int s_time[, int o_time=s_time])\n设置效果 e 的提示时点，第二个和第三个参数分别表示 自己 和对方的回合  \n",
        "body": "SetHintTiming"
    },
    "IsFusionSetCard": {
        "prefix": "IsFusionSetCard",
        "description": "•Card.IsFusionSetCard(Card c, int setname)\n检查c作为融合素材时能否当作名字含有setname的卡  \n",
        "body": "IsFusionSetCard"
    },
    "aux.gbspcon": {
        "prefix": "aux.gbspcon",
        "description": "•aux.gbspcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n剑斗兽通用效果(用「剑斗兽」怪兽的效果特殊召唤)的过滤条件的简单写法，用在效果注册里 SetCondition  \n2619149,4253484,31247589,42592719,65984457,78868776,  虽然写法不同，但是没问题  \nfunction Auxiliary.gbspcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal st=e:GetHandler():GetSummonType()  \n\treturn st>=(SUMMON_TYPE_SPECIAL+100) and st<(SUMMON_TYPE_SPECIAL+150)  \nend  \n",
        "body": "aux.gbspcon"
    },
    "CATEGORY_DESTROY": {
        "prefix": "CATEGORY_DESTROY",
        "description": "破坏效果",
        "body": "CATEGORY_DESTROY"
    },
    "Card.GetCardTargetCount": {
        "prefix": "Card.GetCardTargetCount",
        "description": "•Card.GetCardTargetCount(Card c)\n返回c当前的永续对象的数量  \n",
        "body": "Card.GetCardTargetCount"
    },
    "mzctcheckrel": {
        "prefix": "mzctcheckrel",
        "description": "•aux.mzctcheckrel(Group g, int tp)\n检测玩家 tp 场上是否有卡片组 g 离开后可用的主要怪兽区格子，并且检测卡片组 g 能否解放 的简单写法  \nfunction Auxiliary.mzctcheckrel(g,tp)  \n\treturn Duel.GetMZoneCount(tp,g)>0 and Duel.CheckReleaseGroup(tp,Auxiliary.IsInGroup,#g,nil,g)  \nend  \n",
        "body": "mzctcheckrel"
    },
    "HINTMSG_FACEDOWNDEFENSE": {
        "prefix": "HINTMSG_FACEDOWNDEFENSE",
        "description": "请选择里侧守备表示的怪兽",
        "body": "HINTMSG_FACEDOWNDEFENSE"
    },
    "Clear": {
        "prefix": "Clear",
        "description": "•Group.Clear(Group g)\n清空卡片组g里的内容  \n",
        "body": "Clear"
    },
    "IsDualState": {
        "prefix": "IsDualState",
        "description": "•Card.IsDualState(Card c)\n检查c属否处于再召唤状态  \n\n•aux.IsDualState(Effect e)\n检查二重怪兽e:GetHandler()是否是再度召唤状态（用于效果的Condition属性）  \n常用于二重怪兽再度召唤获得的效果e的Condition属性  \n\n",
        "body": "IsDualState"
    },
    "EFFECT_MUST_USE_MZONE": {
        "prefix": "EFFECT_MUST_USE_MZONE",
        "description": "必须使用怪兽区的格子",
        "body": "EFFECT_MUST_USE_MZONE"
    },
    "Card.IsLevel": {
        "prefix": "Card.IsLevel",
        "description": "•Card.IsLevel(Card c, int level1[, int level2,...])\n检查c是否是等级 level1[, 或者为 level2...]  \n",
        "body": "Card.IsLevel"
    },
    "Duel.GetDecktopGroup": {
        "prefix": "Duel.GetDecktopGroup",
        "description": "•Duel.GetDecktopGroup(int player, int count)\n返回玩家player的卡组最上方的count张卡  \n",
        "body": "Duel.GetDecktopGroup"
    },
    "GetOwner": {
        "prefix": "GetOwner",
        "description": "•Card.GetOwner(Card c)\n返回c的持有者  \n\n•Effect.GetOwner(Effect e)\n返回效果 e 的Owner属性  \n\n",
        "body": "GetOwner"
    },
    "GetSum": {
        "prefix": "GetSum",
        "description": "•Group.GetSum(Group g, function f, ...)\n计算g中所有卡的取值的总和，f为为每张卡的取值函数，从第3个参数开始为额外参数  \n等价于：  \nfunction GetSum(g,f,...)  \n\tlocal ct=0  \n\tlocal val={...}  \n\tfor tc in aux.Next(g)  \n\t\tif f(tc,table.unpack(val)) then ct=ct+1 end  \n\tend  \n\treturn ct  \nend  \n",
        "body": "GetSum"
    },
    "EFFECT_FLAG_OWNER_RELATE": {
        "prefix": "EFFECT_FLAG_OWNER_RELATE",
        "description": "与效果owner关联的效果",
        "body": "EFFECT_FLAG_OWNER_RELATE"
    },
    "Duel.MoveSequence": {
        "prefix": "Duel.MoveSequence",
        "description": "•Duel.MoveSequence(Card c, int seq)\n移动c的序号，通常用于在场上换格子或者在卡组中移动到最上方或者最下方  \n比如对卡组中的 c 使用这个 Duel.MoveSequence(c,1), 就是把卡片 c 放到卡组最下面  \n",
        "body": "Duel.MoveSequence"
    },
    "Group.CheckWithSumGreater": {
        "prefix": "Group.CheckWithSumGreater",
        "description": "•Group.CheckWithSumGreater(Group g, function f, int sum, ...)\n子集求和判定函数之二，f为返回一个interger值的函数  \n检查卡片组g中是否存在一个子集满足以f对子集的每一个元素求值的和刚好大于或者等于sum，从第4个参数开始为额外参数  \n比如：g:CheckWithSumGreater(Card.GetRitualLevel,8)  \n\t检查g中是否存在一个子集满足子集的仪式用等级之和大于等于8  \n\t注：判定必须是“刚好”大于或者等于  \n\t以等级为例，要使等级合计大于等于8，可以选择LV1+LV7而不可以选择LV1+LV4+LV4(在这些选择都满足的情况下)  \n",
        "body": "Group.CheckWithSumGreater"
    },
    "REASON_RULE": {
        "prefix": "REASON_RULE",
        "description": "规则",
        "body": "REASON_RULE"
    },
    "GetCurrentPhase": {
        "prefix": "GetCurrentPhase",
        "description": "•Duel.GetCurrentPhase()\n返回当前的阶段  \n",
        "body": "GetCurrentPhase"
    },
    "RACE_INSECT": {
        "prefix": "RACE_INSECT",
        "description": "昆虫",
        "body": "RACE_INSECT"
    },
    "Group.FilterCount": {
        "prefix": "Group.FilterCount",
        "description": "•Group.FilterCount(Group g, function f, Card|Group ex|nil, ...)\n过滤函数，和Group.Filter基本相同，不同之处在于此函数只返回满足条件的卡的数量  \n",
        "body": "Group.FilterCount"
    },
    "RACE_ALL": {
        "prefix": "RACE_ALL",
        "description": "全种族",
        "body": "RACE_ALL"
    },
    "GetNext": {
        "prefix": "GetNext",
        "description": "•Group.GetNext(Group g)\n使指针指向卡片组g下一张卡并返回这张卡，如果不存在则返回nil  \n",
        "body": "GetNext"
    },
    "dncheck": {
        "prefix": "dncheck",
        "description": "•aux.dncheck(Group g)\n检测卡片组 g 中是否有同名卡的简单写法，返回值如果为 true 表示没有同名卡  \nfunction Auxiliary.dncheck(g)  \n\treturn g:GetClassCount(Card.GetCode)==#g  \nend  \n",
        "body": "dncheck"
    },
    "Card.GetTextAttack": {
        "prefix": "Card.GetTextAttack",
        "description": "•Card.GetTextAttack(Card c)\n返回c的卡片记载的攻击力，返回值是负数表示是\"?\"  \n",
        "body": "Card.GetTextAttack"
    },
    "GetPreviousRaceOnField": {
        "prefix": "GetPreviousRaceOnField",
        "description": "•Card.GetPreviousRaceOnField(Card c)\n返回c位置变化之前在场上的种族  \n",
        "body": "GetPreviousRaceOnField"
    },
    "GetReleaseGroupCount": {
        "prefix": "GetReleaseGroupCount",
        "description": "•Duel.GetReleaseGroupCount(int player[, bool use_hand=false])\n返回玩家player可解放（非上级召唤用）的卡片数量， use_hand=true 则包括手卡  \n",
        "body": "GetReleaseGroupCount"
    },
    "EquipComplete": {
        "prefix": "EquipComplete",
        "description": "•Duel.EquipComplete()\n在调用Duel.Equip时，若is_step参数为true，则需调用此函数触发时点  \n",
        "body": "EquipComplete"
    },
    "RESET_MSCHANGE": {
        "prefix": "RESET_MSCHANGE",
        "description": "从怪兽区到魔法区，或者从魔法区到怪兽区(move_to_field()、寶玉獸)",
        "body": "RESET_MSCHANGE"
    },
    "EFFECT_LPCOST_CHANGE": {
        "prefix": "EFFECT_LPCOST_CHANGE",
        "description": "改变生命值代价數值",
        "body": "EFFECT_LPCOST_CHANGE"
    },
    "Card.IsSummonable": {
        "prefix": "Card.IsSummonable",
        "description": "•Card.IsSummonable(Card c, bool ignore_count, Effect e|nil[, int minc=0, int zone=0x1f])\n检查c是否可以进行通常召唤（不包含通常召唤的set)，ignore_count=true则不检查召唤次数限制  \ne~=nil则检查c是否可以以效果e进行通常召唤，minc 表示至少需要的祭品数（用于区分妥协召唤与上级召唤）,zone 表示必须要召唤到的区域  \n",
        "body": "Card.IsSummonable"
    },
    "EFFECT_SYNCHRO_MATERIAL_CUSTOM": {
        "prefix": "EFFECT_SYNCHRO_MATERIAL_CUSTOM",
        "description": "自定义Tuner的同调过程",
        "body": "EFFECT_SYNCHRO_MATERIAL_CUSTOM"
    },
    "GetMultiLinkedZone": {
        "prefix": "GetMultiLinkedZone",
        "description": "•aux.GetMultiLinkedZone(int tp)\n获取玩家 tp 场上被2个以上链接标记指向的区域。比如那几只守护龙  \n",
        "body": "GetMultiLinkedZone"
    },
    "IsSynchroType": {
        "prefix": "IsSynchroType",
        "description": "•Card.IsSynchroType(Card c, int type)\n检查c用作同调素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "IsSynchroType"
    },
    "Duel.GetReleaseGroupCount": {
        "prefix": "Duel.GetReleaseGroupCount",
        "description": "•Duel.GetReleaseGroupCount(int player[, bool use_hand=false])\n返回玩家player可解放（非上级召唤用）的卡片数量， use_hand=true 则包括手卡  \n",
        "body": "Duel.GetReleaseGroupCount"
    },
    "IsCanBeXyzMaterial": {
        "prefix": "IsCanBeXyzMaterial",
        "description": "•Card.IsCanBeXyzMaterial(Card c, Card sc|nil)\n检查c是否可以成为[超量怪兽sc的]超量素材,没有指定sc的场合，必须填nil  \n",
        "body": "IsCanBeXyzMaterial"
    },
    "IsLevelBelow": {
        "prefix": "IsLevelBelow",
        "description": "•Card.IsLevelBelow(Card c, int level)\n检查c是否是等级level以下（至少为1）  \n",
        "body": "IsLevelBelow"
    },
    "RACE_AQUA": {
        "prefix": "RACE_AQUA",
        "description": "水",
        "body": "RACE_AQUA"
    },
    "aux.EnableDualAttribute": {
        "prefix": "aux.EnableDualAttribute",
        "description": "•aux.EnableDualAttribute(Card c)\n为c添加二重怪兽属性  \n",
        "body": "aux.EnableDualAttribute"
    },
    "Duel.SpecialSummonRule": {
        "prefix": "Duel.SpecialSummonRule",
        "description": "•Duel.SpecialSummonRule(int player, Card c[, int sumtype=0])\n让玩家player对卡片c[用 sumtype 方式]进行特殊召唤手续（？）  \n",
        "body": "Duel.SpecialSummonRule"
    },
    "IsHasEffect": {
        "prefix": "IsHasEffect",
        "description": "•Card.IsHasEffect(Card c, int code[, int check_player])\n检查c是否受到效果种类是code的效果的影响  \n没有则返回nil  \n有则返回那些效果  \n",
        "body": "IsHasEffect"
    },
    "OPCODE_OR": {
        "prefix": "OPCODE_OR",
        "body": "OPCODE_OR"
    },
    "Duel.SetTargetParam": {
        "prefix": "Duel.SetTargetParam",
        "description": "•Duel.SetTargetParam(inte param)\n把当前正在处理的连锁的对象参数设置成param  \n",
        "body": "Duel.SetTargetParam"
    },
    "Card.GetPreviousLevelOnField": {
        "prefix": "Card.GetPreviousLevelOnField",
        "description": "•Card.GetPreviousLevelOnField(Card c)\n返回c位置变化之前在场上的等级  \n",
        "body": "Card.GetPreviousLevelOnField"
    },
    "Sub": {
        "prefix": "Sub",
        "description": "•Group.Sub(Group g1, Group g2)\n从g1中移除属于g2中的卡  \n注：g2本身不会发生变化  \n",
        "body": "Sub"
    },
    "GetBaseAttack": {
        "prefix": "GetBaseAttack",
        "description": "•Card.GetBaseAttack(Card c)\n返回c的原本攻击力  \n",
        "body": "GetBaseAttack"
    },
    "EFFECT_INDESTRUCTABLE_EFFECT": {
        "prefix": "EFFECT_INDESTRUCTABLE_EFFECT",
        "description": "不会被效果破坏",
        "body": "EFFECT_INDESTRUCTABLE_EFFECT"
    },
    "aux.IsMaterialListSetCard": {
        "prefix": "aux.IsMaterialListSetCard",
        "description": "•aux.IsMaterialListSetCard(Card c, int setcode])\n检测 c 是否是有字段 setcode 为素材的卡  \nc.material_setcode  \n",
        "body": "aux.IsMaterialListSetCard"
    },
    "Card.IsMSetable": {
        "prefix": "Card.IsMSetable",
        "description": "•Card.IsMSetable(Card, bool ignore_count, Effect e|nil[, int minc=0, int zone=0x1f])\n检查c是否可进行通常召唤的set，ignore_count=true则不检查召唤次数限制  \ne~=nil则检查c是否可以以效果e进行通常召唤的set，minc 表示至少需要的祭品数（用于区分妥协召唤set与上级召唤set）,zone 表示必须要放置到的区域  \n",
        "body": "Card.IsMSetable"
    },
    "Card.IsRelateToChain": {
        "prefix": "Card.IsRelateToChain",
        "description": "•Card.IsRelateToChain(Card c, int chainc)\n检查c是否和连锁chainc有联系  \n注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象  \n（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）  \n会自动与那个效果建立联系，一旦离场，联系会重置  \n",
        "body": "Card.IsRelateToChain"
    },
    "IsUnionState": {
        "prefix": "IsUnionState",
        "description": "•aux.IsUnionState(Effect e)\n检查同盟怪兽e:GetHandler()是否处于同盟装备的状态（用于效果的Condition属性）  \n",
        "body": "IsUnionState"
    },
    "NonTuner": {
        "prefix": "NonTuner",
        "description": "•aux.NonTuner(function f, ...)\n用于过滤满足单一过滤条件 f 的调整以外的卡，,返回的是一个 有 bool 返回值类型的 函数，只要求是 调整以外的怪兽的话，就写 aux.NonTuner(nil)  \n第2个参数开始为额外参数  \n",
        "body": "NonTuner"
    },
    "LOCATION_PZONE": {
        "prefix": "LOCATION_PZONE",
        "description": "灵摆区",
        "body": "LOCATION_PZONE"
    },
    "STATUS_SUMMON_DISABLED": {
        "prefix": "STATUS_SUMMON_DISABLED",
        "description": "召唤无效後尚未移動",
        "body": "STATUS_SUMMON_DISABLED"
    },
    "EFFECT_CANNOT_BP": {
        "prefix": "EFFECT_CANNOT_BP",
        "description": "不能进入战斗阶段",
        "body": "EFFECT_CANNOT_BP"
    },
    "EFFECT_REMOVE_ATTRIBUTE": {
        "prefix": "EFFECT_REMOVE_ATTRIBUTE",
        "description": "删除属性",
        "body": "EFFECT_REMOVE_ATTRIBUTE"
    },
    "CATEGORY_NEGATE": {
        "prefix": "CATEGORY_NEGATE",
        "description": "使发动无效效果",
        "body": "CATEGORY_NEGATE"
    },
    "IsPlayerCanSpecialSummonCount": {
        "prefix": "IsPlayerCanSpecialSummonCount",
        "description": "•Duel.IsPlayerCanSpecialSummonCount(int player, int count)\n检查玩家player能否特殊召唤count次  \n",
        "body": "IsPlayerCanSpecialSummonCount"
    },
    "RACE_FAIRY": {
        "prefix": "RACE_FAIRY",
        "description": "天使",
        "body": "RACE_FAIRY"
    },
    "Duel.GetTargetCount": {
        "prefix": "Duel.GetTargetCount",
        "description": "•Duel.GetTargetCount(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n基本同Duel.GetMatchingGroupCount ，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象  \n",
        "body": "Duel.GetTargetCount"
    },
    "CHAININFO_TRIGGERING_PLAYER": {
        "prefix": "CHAININFO_TRIGGERING_PLAYER",
        "description": "连锁的玩家",
        "body": "CHAININFO_TRIGGERING_PLAYER"
    },
    "Group.__sub": {
        "prefix": "Group.__sub",
        "description": "•Group.__sub(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 中的 全部卡添加到这个卡片组，然后再从这个卡片组把 target2 的卡全部删除，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n",
        "body": "Group.__sub"
    },
    "EFFECT_FLAG_CVAL_CHECK": {
        "prefix": "EFFECT_FLAG_CVAL_CHECK",
        "description": "N/A",
        "body": "EFFECT_FLAG_CVAL_CHECK"
    },
    "IsAbleToExtraAsCost": {
        "prefix": "IsAbleToExtraAsCost",
        "description": "•Card.IsAbleToExtraAsCost(Card c)\n检查c是否可以作为cost送去额外卡组，主卡组的灵摆卡会返回false  \n",
        "body": "IsAbleToExtraAsCost"
    },
    "AddCustomActivityCounter": {
        "prefix": "AddCustomActivityCounter",
        "description": "•Duel.AddCustomActivityCounter(int counter_id, int activity_type, function f)\n设置操作类型为activity_type、代号为counter_id的计数器，放在initial_effect函数内  \nf为过滤函数，以Card类型为参数，返回值为false的卡片进行以下类型的操作，计数器增加1（目前最多为1）  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的set）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的set）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_CHAIN          =7\t--发动效果  \n",
        "body": "AddCustomActivityCounter"
    },
    "TYPE_UNION": {
        "prefix": "TYPE_UNION",
        "description": "同盟",
        "body": "TYPE_UNION"
    },
    "EVENT_BE_MATERIAL": {
        "prefix": "EVENT_BE_MATERIAL",
        "description": "作为融合/仪式同调/超量素材时",
        "body": "EVENT_BE_MATERIAL"
    },
    "Card.IsCanBeRitualMaterial": {
        "prefix": "Card.IsCanBeRitualMaterial",
        "description": "•Card.IsCanBeRitualMaterial(Card c, Card sc|nil)\n检查c是否可以作为[仪式怪兽sc的]仪式素材,没有指定sc的场合，必须填nil  \n",
        "body": "Card.IsCanBeRitualMaterial"
    },
    "CHAININFO_DISABLE_REASON": {
        "prefix": "CHAININFO_DISABLE_REASON",
        "description": "无效的原因",
        "body": "CHAININFO_DISABLE_REASON"
    },
    "aux.AddFusionProcFunRep": {
        "prefix": "aux.AddFusionProcFunRep",
        "description": "•aux.AddFusionProcFunRep(Card c, function f, int cc, bool insf)\n为c 添加融合召唤手续  \n用 cc 个 满足相同条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,table.unpack(fun)),fun 是包含 cc 个 满足条件 f 的卡的表  \n",
        "body": "aux.AddFusionProcFunRep"
    },
    "Card.IsPublic": {
        "prefix": "Card.IsPublic",
        "description": "•Card.IsPublic(Card c)\n检查c是否处于公开状态  \n",
        "body": "Card.IsPublic"
    },
    "CHAININFO_TRIGGERING_CODE2": {
        "prefix": "CHAININFO_TRIGGERING_CODE2",
        "description": "连锁发生时的其他密码",
        "body": "CHAININFO_TRIGGERING_CODE2"
    },
    "EFFECT_SWAP_DEFENSE_FINAL": {
        "prefix": "EFFECT_SWAP_DEFENSE_FINAL",
        "description": "N/A",
        "body": "EFFECT_SWAP_DEFENSE_FINAL"
    },
    "ACTIVITY_NORMALSUMMON": {
        "prefix": "ACTIVITY_NORMALSUMMON",
        "body": "ACTIVITY_NORMALSUMMON"
    },
    "HINT_MESSAGE": {
        "prefix": "HINT_MESSAGE",
        "body": "HINT_MESSAGE"
    },
    "TYPE_PENDULUM": {
        "prefix": "TYPE_PENDULUM",
        "description": "灵摆",
        "body": "TYPE_PENDULUM"
    },
    "GetOriginalRace": {
        "prefix": "GetOriginalRace",
        "description": "•Card.GetOriginalRace(Card c)\n返回c的卡片记载的种族  \n",
        "body": "GetOriginalRace"
    },
    "EFFECT_CHANGE_RACE": {
        "prefix": "EFFECT_CHANGE_RACE",
        "description": "改变种族",
        "body": "EFFECT_CHANGE_RACE"
    },
    "Duel.IsChainDisablable": {
        "prefix": "Duel.IsChainDisablable",
        "description": "•Duel.IsChainDisablable(int chainc)\n检查连锁chainc的效果能否被无效  \n",
        "body": "Duel.IsChainDisablable"
    },
    "HINTMSG_FACEDOWN": {
        "prefix": "HINTMSG_FACEDOWN",
        "description": "请选择里侧表示的卡",
        "body": "HINTMSG_FACEDOWN"
    },
    "MoveSequence": {
        "prefix": "MoveSequence",
        "description": "•Duel.MoveSequence(Card c, int seq)\n移动c的序号，通常用于在场上换格子或者在卡组中移动到最上方或者最下方  \n比如对卡组中的 c 使用这个 Duel.MoveSequence(c,1), 就是把卡片 c 放到卡组最下面  \n",
        "body": "MoveSequence"
    },
    "aux.AddFusionProcFun2": {
        "prefix": "aux.AddFusionProcFun2",
        "description": "•aux.AddFusionProcFun2(Card c, function f1, function f2, bool insf)\n为c 添加融合召唤手续  \n用满足条件 f1 与 f2 的怪兽 各1只为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,f1,f2)  \n",
        "body": "aux.AddFusionProcFun2"
    },
    "IsActivated": {
        "prefix": "IsActivated",
        "description": "•Effect.IsActivated(Effect e)\n检查效果e能否是发动的效果，也就是以下类型  \nEFFECT_TYPE_ACTIVATE\t\t=0x0010\t\t--魔陷发动  \nEFFECT_TYPE_FLIP\t\t\t=0x0020\t\t--翻转效果  \nEFFECT_TYPE_IGNITION\t\t=0x0040\t\t--起动效果  \nEFFECT_TYPE_TRIGGER_O\t\t=0x0080\t\t--诱发选发效果  \nEFFECT_TYPE_QUICK_O\t\t\t=0x0100\t\t--诱发即时效果  \nEFFECT_TYPE_TRIGGER_F\t\t=0x0200\t\t--诱发必发效果  \nEFFECT_TYPE_QUICK_F\t\t\t=0x0400\t\t--诱发即时必发效果（熊猫龙等）  \n",
        "body": "IsActivated"
    },
    "aux.AddFusionProcFunRep2": {
        "prefix": "aux.AddFusionProcFunRep2",
        "description": "•aux.AddFusionProcFunRep2(Card c, function f, int minc, int maxc, bool insf)\n为c 添加融合召唤手续  \n用 minc-maxc 个 满足相同条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,false,insf,f,minc,maxc)  \n",
        "body": "aux.AddFusionProcFunRep2"
    },
    "GetBaseDefense": {
        "prefix": "GetBaseDefense",
        "description": "•Card.GetBaseDefense(Card c)\n返回c的原本守备力  \n",
        "body": "GetBaseDefense"
    },
    "EFFECT_CANNOT_BE_FUSION_MATERIAL": {
        "prefix": "EFFECT_CANNOT_BE_FUSION_MATERIAL",
        "description": "不能做融合素材",
        "body": "EFFECT_CANNOT_BE_FUSION_MATERIAL"
    },
    "EVENT_DAMAGE_CALCULATING": {
        "prefix": "EVENT_DAMAGE_CALCULATING",
        "description": "N/A",
        "body": "EVENT_DAMAGE_CALCULATING"
    },
    "STATUS_FORBIDDEN": {
        "prefix": "STATUS_FORBIDDEN",
        "description": "不能play",
        "body": "STATUS_FORBIDDEN"
    },
    "CHAININFO_TARGET_PARAM": {
        "prefix": "CHAININFO_TARGET_PARAM",
        "description": "连锁的效果的参数值",
        "body": "CHAININFO_TARGET_PARAM"
    },
    "Card.GetPreviousAttackOnField": {
        "prefix": "Card.GetPreviousAttackOnField",
        "description": "•Card.GetPreviousAttackOnField(Card c)\n返回c位置变化之前在场上的攻击力  \n",
        "body": "Card.GetPreviousAttackOnField"
    },
    "GetOperation": {
        "prefix": "GetOperation",
        "description": "•Effect.GetOperation(Effect e)\n返回效果 e 的operation属性  \n",
        "body": "GetOperation"
    },
    "EFFECT_COUNT_CODE_DUEL": {
        "prefix": "EFFECT_COUNT_CODE_DUEL",
        "description": "决斗中使用次数",
        "body": "EFFECT_COUNT_CODE_DUEL"
    },
    "Card.GetTurnID": {
        "prefix": "Card.GetTurnID",
        "description": "•Card.GetTurnID(Card c)\n返回c转移到当前位置的回合  \n",
        "body": "Card.GetTurnID"
    },
    "GetBattledGroup": {
        "prefix": "GetBattledGroup",
        "description": "•Card.GetBattledGroup(Card c)\n返回与c本回合进行过战斗的卡片组  \n进行过战斗指发生过伤害的计算，用于剑斗兽等卡的判定  \n",
        "body": "GetBattledGroup"
    },
    "Card.IsCanChangePosition": {
        "prefix": "Card.IsCanChangePosition",
        "description": "•Card.IsCanChangePosition(Card c)\n检查c是否可以用效果改变表示形式  \n",
        "body": "Card.IsCanChangePosition"
    },
    "IsForbidden": {
        "prefix": "IsForbidden",
        "description": "•Card.IsForbidden(Card c)\n检查c是否处于被宣言禁止状态  \n",
        "body": "IsForbidden"
    },
    "Effect.IsHasType": {
        "prefix": "Effect.IsHasType",
        "description": "•Effect.IsHasType(Effect e, int type)\n检查效果e是否属于类型type  \n",
        "body": "Effect.IsHasType"
    },
    "EVENT_ADJUST": {
        "prefix": "EVENT_ADJUST",
        "description": "adjust_all()调整後（御前试合）",
        "body": "EVENT_ADJUST"
    },
    "Card.GetLinkedGroup": {
        "prefix": "Card.GetLinkedGroup",
        "description": "•Card.GetLinkedGroup(Card c)\n返回c的连接区的卡片组（目前只限怪兽区）  \n",
        "body": "Card.GetLinkedGroup"
    },
    "Card.IsRelateToEffect": {
        "prefix": "Card.IsRelateToEffect",
        "description": "•Card.IsRelateToEffect(Card c, Effect e)\n检查c是否和效果e有联系  \n注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象  \n（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）  \n会自动与那个效果建立联系，一旦离场，联系会重置  \n",
        "body": "Card.IsRelateToEffect"
    },
    "LOCATION_DECK": {
        "prefix": "LOCATION_DECK",
        "description": "卡组",
        "body": "LOCATION_DECK"
    },
    "Card.IsXyzLevel": {
        "prefix": "Card.IsXyzLevel",
        "description": "•Card.IsXyzLevel(Card c, Card xyzc, int lv)\n检查c对于超量怪兽xyzc的超量用等级是否是lv  \n",
        "body": "Card.IsXyzLevel"
    },
    "aux.penlimit": {
        "prefix": "aux.penlimit",
        "description": "•aux.penlimit(Effect e, Effect se, int sp, int st)\n不能用 灵摆召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.penlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_PENDULUM==SUMMON_TYPE_PENDULUM  \nend  \n",
        "body": "aux.penlimit"
    },
    "Effect.GetLabel": {
        "prefix": "Effect.GetLabel",
        "description": "•Effect.GetLabel(Effect e)\n返回效果 e 的Label(全部返回)  \n",
        "body": "Effect.GetLabel"
    },
    "EVENT_TO_DECK": {
        "prefix": "EVENT_TO_DECK",
        "description": "回卡组时",
        "body": "EVENT_TO_DECK"
    },
    "Card.CreateRelation": {
        "prefix": "Card.CreateRelation",
        "description": "•Card.CreateRelation(Card c1, Card c2, int reset_flag)\n为c1建立与c2的联系，此联系仅会由于c1发生RESET_EVENT的事件reset  \n",
        "body": "Card.CreateRelation"
    },
    "RESET_CARD": {
        "prefix": "RESET_CARD",
        "description": "重置Owner為指定卡片的效果",
        "body": "RESET_CARD"
    },
    "Card.IsAbleToGrave": {
        "prefix": "Card.IsAbleToGrave",
        "description": "•Card.IsAbleToGrave(Card c)\n检查c是否可以送去墓地  \n",
        "body": "Card.IsAbleToGrave"
    },
    "SelectSubGroup": {
        "prefix": "SelectSubGroup",
        "description": "•Group.SelectSubGroup(Group g, int tp, function f, bool cancelable, int min=1, int max=#g, ...)\n从卡片组 g 中选一个满足 过滤条件 f，并且数量在 min-max 的子集， cancelable 表示是否可以取消操作  \nf 的函数原型为  \nfunction f(Group sg,...) end  \n",
        "body": "SelectSubGroup"
    },
    "AddRitualProcEqual": {
        "prefix": "AddRitualProcEqual",
        "description": "•aux.AddRitualProcEqual(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和必须等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetOriginalLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcEqual"
    },
    "GetDefense": {
        "prefix": "GetDefense",
        "description": "•Card.GetDefense(Card c)\n返回c的当前守备力  \n",
        "body": "GetDefense"
    },
    "PLAYER_NONE": {
        "prefix": "PLAYER_NONE",
        "description": "2个玩家都不是",
        "body": "PLAYER_NONE"
    },
    "Card.IsDisabled": {
        "prefix": "Card.IsDisabled",
        "description": "•Card.IsDisabled(Card c)\n检查c是否处于无效状态  \n",
        "body": "Card.IsDisabled"
    },
    "EFFECT_ADD_ATTRIBUTE": {
        "prefix": "EFFECT_ADD_ATTRIBUTE",
        "description": "增加属性",
        "body": "EFFECT_ADD_ATTRIBUTE"
    },
    "EFFECT_CHANGE_LEVEL": {
        "prefix": "EFFECT_CHANGE_LEVEL",
        "description": "设置等级",
        "body": "EFFECT_CHANGE_LEVEL"
    },
    "HINT_EVENT": {
        "prefix": "HINT_EVENT",
        "body": "HINT_EVENT"
    },
    "ConfirmDecktop": {
        "prefix": "ConfirmDecktop",
        "description": "•Duel.ConfirmDecktop(int player, int count)\n确认玩家player卡组最上方count张卡  \n",
        "body": "ConfirmDecktop"
    },
    "EFFECT_CANNOT_DISCARD_HAND": {
        "prefix": "EFFECT_CANNOT_DISCARD_HAND",
        "description": "不能丢弃手牌",
        "body": "EFFECT_CANNOT_DISCARD_HAND"
    },
    "HINTMSG_OPPO": {
        "prefix": "HINTMSG_OPPO",
        "description": "请选择对方的卡",
        "body": "HINTMSG_OPPO"
    },
    "Duel.ConfirmExtratop": {
        "prefix": "Duel.ConfirmExtratop",
        "description": "•Duel.ConfirmExtratop(int player, int count)\n确认玩家player额外卡组里侧的卡 最上方count张卡  \n",
        "body": "Duel.ConfirmExtratop"
    },
    "TYPE_SYNCHRO": {
        "prefix": "TYPE_SYNCHRO",
        "description": "同调",
        "body": "TYPE_SYNCHRO"
    },
    "RaiseEvent": {
        "prefix": "RaiseEvent",
        "description": "•Duel.RaiseEvent(Group|Card eg, int code, Effect re, int r, int rp, int ep, int ev)\n以eg,ep,ev,re,r,rp触发一个时点 code  \n",
        "body": "RaiseEvent"
    },
    "EFFECT_FLAG_ABSOLUTE_TARGET": {
        "prefix": "EFFECT_FLAG_ABSOLUTE_TARGET",
        "description": "Target Range不会因为控制权的改变而改变",
        "body": "EFFECT_FLAG_ABSOLUTE_TARGET"
    },
    "EVENT_DRAW": {
        "prefix": "EVENT_DRAW",
        "description": "抽卡时",
        "body": "EVENT_DRAW"
    },
    "GLOBALFLAG_BRAINWASHING_CHECK": {
        "prefix": "GLOBALFLAG_BRAINWASHING_CHECK",
        "description": "洗脑解除标记",
        "body": "GLOBALFLAG_BRAINWASHING_CHECK"
    },
    "Card.IsOriginalCodeRule": {
        "prefix": "Card.IsOriginalCodeRule",
        "description": "•Card.IsOriginalCodeRule(Card c, int code1[, int code2,...])\n检查c的卡号是否规则上（就是CDB里显示的卡密）是 code1[, 或者为 code2...]  \n",
        "body": "Card.IsOriginalCodeRule"
    },
    "EVENT_BATTLE_START": {
        "prefix": "EVENT_BATTLE_START",
        "description": "伤害步骤开始时（反转前）",
        "body": "EVENT_BATTLE_START"
    },
    "Duel.IsPlayerCanSSet": {
        "prefix": "Duel.IsPlayerCanSSet",
        "description": "•Duel.IsPlayerCanSSet(int player[, Card c])\n检查玩家player是否可以把卡片[ c ]盖放到魔陷区  \n",
        "body": "Duel.IsPlayerCanSSet"
    },
    "EFFECT_COUNT_CODE_SINGLE": {
        "prefix": "EFFECT_COUNT_CODE_SINGLE",
        "description": "同一张卡的多个效果公共使用次数",
        "body": "EFFECT_COUNT_CODE_SINGLE"
    },
    "HINTMSG_REMOVEXYZ": {
        "prefix": "HINTMSG_REMOVEXYZ",
        "description": "请选择要取除的超量素材",
        "body": "HINTMSG_REMOVEXYZ"
    },
    "CATEGORY_CONTROL": {
        "prefix": "CATEGORY_CONTROL",
        "description": "改变控制权效果",
        "body": "CATEGORY_CONTROL"
    },
    "GLOBALFLAG_MUST_BE_SMATERIAL": {
        "prefix": "GLOBALFLAG_MUST_BE_SMATERIAL",
        "description": "必须作为同调素材（波动龙 声子龙）",
        "body": "GLOBALFLAG_MUST_BE_SMATERIAL"
    },
    "EFFECT_SKIP_TURN": {
        "prefix": "EFFECT_SKIP_TURN",
        "description": "跳过整个回合",
        "body": "EFFECT_SKIP_TURN"
    },
    "Duel.SpecialSummonStep": {
        "prefix": "Duel.SpecialSummonStep",
        "description": "•Duel.SpecialSummonStep(Card c, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos[, int zone=0xff])\n此函数是Duel.SpecialSummon的分解过程，只特殊召唤一张卡c ，其他参数用法和 Duel.SpecialSummon 一样  \n此函数用于一个效果同时特殊召唤多张参数不同的卡  \n此函数必须和Duel.SpecialSummonComplete()一起使用  \n返回值表示是否特殊召唤成功  \n",
        "body": "Duel.SpecialSummonStep"
    },
    "CHAININFO_TARGET_PLAYER": {
        "prefix": "CHAININFO_TARGET_PLAYER",
        "description": "连锁的效果的对象（玩家）",
        "body": "CHAININFO_TARGET_PLAYER"
    },
    "EFFECT_DEVINE_LIGHT": {
        "prefix": "EFFECT_DEVINE_LIGHT",
        "description": "神圣光辉（魔术礼帽）",
        "body": "EFFECT_DEVINE_LIGHT"
    },
    "Card.GetOriginalRightScale": {
        "prefix": "Card.GetOriginalRightScale",
        "description": "•Card.GetOriginalRightScale(Card c)\n返回c的原本的右灵摆刻度  \n",
        "body": "Card.GetOriginalRightScale"
    },
    "EVENT_PHASE_START": {
        "prefix": "EVENT_PHASE_START",
        "description": "阶段开始时",
        "body": "EVENT_PHASE_START"
    },
    "HINT_SELECTMSG": {
        "prefix": "HINT_SELECTMSG",
        "body": "HINT_SELECTMSG"
    },
    "HINTMSG_CARDTYPE": {
        "prefix": "HINTMSG_CARDTYPE",
        "description": "请选择一个种类",
        "body": "HINTMSG_CARDTYPE"
    },
    "ReleaseRitualMaterial": {
        "prefix": "ReleaseRitualMaterial",
        "description": "•Duel.ReleaseRitualMaterial(Group g)\n解放仪式用的素材g，如果是墓地的仪式魔人等卡则除外  \n",
        "body": "ReleaseRitualMaterial"
    },
    "GetCardTargetCount": {
        "prefix": "GetCardTargetCount",
        "description": "•Card.GetCardTargetCount(Card c)\n返回c当前的永续对象的数量  \n",
        "body": "GetCardTargetCount"
    },
    "IsLinkCode": {
        "prefix": "IsLinkCode",
        "description": "•Card.IsLinkCode(Card c, int code[,...])\n检查c作为link素材时能否当作卡号为code的卡，额外参数是其他code  \n",
        "body": "IsLinkCode"
    },
    "IsAttackable": {
        "prefix": "IsAttackable",
        "description": "•Card.IsAttackable(Card c)\n检查c是否可以攻击  \n",
        "body": "IsAttackable"
    },
    "CHINT_TURN": {
        "prefix": "CHINT_TURN",
        "body": "CHINT_TURN"
    },
    "aux.AddRitualProcGreater2": {
        "prefix": "aux.AddRitualProcGreater2",
        "description": "•aux.AddRitualProcGreater2(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcGreater2"
    },
    "aux.drccheck": {
        "prefix": "aux.drccheck",
        "description": "•aux.drccheck(Group g)\n检测卡片组 g 中是否有相同种族的卡的简单写法，返回值如果为 true 表示没有相同种族卡  \nfunction Auxiliary.drccheck(g)  \n\treturn g:GetClassCount(Card.GetRace)==#g  \nend  \n",
        "body": "aux.drccheck"
    },
    "SUMMON_TYPE_PENDULUM": {
        "prefix": "SUMMON_TYPE_PENDULUM",
        "description": "灵摆召唤",
        "body": "SUMMON_TYPE_PENDULUM"
    },
    "STATUS_TO_DISABLE": {
        "prefix": "STATUS_TO_DISABLE",
        "description": "将变成无效",
        "body": "STATUS_TO_DISABLE"
    },
    "TYPE_EFFECT": {
        "prefix": "TYPE_EFFECT",
        "description": "效果",
        "body": "TYPE_EFFECT"
    },
    "Duel.SelectYesNo": {
        "prefix": "Duel.SelectYesNo",
        "description": "•Duel.SelectYesNo(int player, int desc)\n让玩家player选择是或否  \n",
        "body": "Duel.SelectYesNo"
    },
    "Duel.IsPlayerCanDraw": {
        "prefix": "Duel.IsPlayerCanDraw",
        "description": "•Duel.IsPlayerCanDraw(int player[, int count=0])\n检查玩家player是否可以效果抽[count张]卡  \n",
        "body": "Duel.IsPlayerCanDraw"
    },
    "Duel.CheckReleaseGroup": {
        "prefix": "Duel.CheckReleaseGroup",
        "description": "•Duel.CheckReleaseGroup(int player, function f|nil, int count, Card|Group ex|nil, ...)\n检查玩家player场上是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第5个参数开始为额外参数  \n",
        "body": "Duel.CheckReleaseGroup"
    },
    "Debug.PreEquip": {
        "prefix": "Debug.PreEquip",
        "description": "•Debug.PreEquip(Card equip_card, Card target)\n为target添加装备equip_card ，返回值表示是否成功  \n",
        "body": "Debug.PreEquip"
    },
    "EVENT_RELEASE": {
        "prefix": "EVENT_RELEASE",
        "description": "解放时",
        "body": "EVENT_RELEASE"
    },
    "Group.RandomSelect": {
        "prefix": "Group.RandomSelect",
        "description": "•Group.RandomSelect(Group g, int player, int count)\n让玩家player从卡片组g中随机选择count张卡  \n因为是随机选择，所以参数player基本无用，由系统随机选取  \n",
        "body": "Group.RandomSelect"
    },
    "Recover": {
        "prefix": "Recover",
        "description": "•Duel.Recover(int player, int value, int reason[, bool is_step=false])\n以reason原因使玩家player回复value的LP，返回实际的回复值  \n如果受到回复变成伤害等效果的影响时，返回值为0.  \nis_step为true则是伤害/恢复LP过程的分解，需要调用Duel.RDComplete()触发时点  \n",
        "body": "Recover"
    },
    "bfgcost": {
        "prefix": "bfgcost",
        "description": "•aux.bfgcost(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp, int chk)\n把这张卡除外 的过滤条件的简单写法，，用在效果注册的 cost 里  \nfunction Auxiliary.bfgcost(e,tp,eg,ep,ev,re,r,rp,chk)  \n\tif chk==0 then return e:GetHandler():IsAbleToRemoveAsCost() end  \n\tDuel.Remove(e:GetHandler(),POS_FACEUP,REASON_COST)  \nend  \n",
        "body": "bfgcost"
    },
    "Card.GetReason": {
        "prefix": "Card.GetReason",
        "description": "•Card.GetReason(Card c)\n返回c的位置变化原因  \n",
        "body": "Card.GetReason"
    },
    "HINTMSG_ATTACKTARGET": {
        "prefix": "HINTMSG_ATTACKTARGET",
        "description": "请选择攻击的对象",
        "body": "HINTMSG_ATTACKTARGET"
    },
    "GetOriginalRank": {
        "prefix": "GetOriginalRank",
        "description": "•Card.GetOriginalRank(Card c)\n返回c的卡片记载的阶级  \n",
        "body": "GetOriginalRank"
    },
    "aux.EnableExtraDeckSummonCountLimit": {
        "prefix": "aux.EnableExtraDeckSummonCountLimit",
        "description": "•aux.EnableExtraDeckSummonCountLimit()\n打开额外卡组召唤的数量限制， 数量为1 (?)  \n",
        "body": "aux.EnableExtraDeckSummonCountLimit"
    },
    "CATEGORY_ANNOUNCE": {
        "prefix": "CATEGORY_ANNOUNCE",
        "description": "發動時宣言卡名的效果",
        "body": "CATEGORY_ANNOUNCE"
    },
    "CATEGORY_RECOVER": {
        "prefix": "CATEGORY_RECOVER",
        "description": "回复效果",
        "body": "CATEGORY_RECOVER"
    },
    "SetTargetRange": {
        "prefix": "SetTargetRange",
        "description": "•Effect.SetTargetRange(Effect e, int s_range, int o_range)\n设置效果 e 的Target Range属性  \n\ts_range指影响的我方区域  \n\to_range值影响的对方区域  \n\t如果property属性中指定了EFFECT_FLAG_ABSOLUTE_RANGE标志，  \n\t\t那么s_range指玩家1受到影响的区域，o_range指玩家2受到影响的区域  \n\t如果这是一个召唤(覆盖)/限制召唤(覆盖)/特殊召唤手续  \n\t(EFFECT_SUMMON_PROC/EFFECT_LIMIT_SUMMON_PROC/EFFECT_SPSUMMON_PROC等)的效果，  \n\t\t并且property指定了EFFECT_FLAG_SPSUM_PARAM标志，  \n\t\t那么s_range表示特殊召唤到的哪个玩家的场地，  \n\to_range表示可选择的表示形式  \n",
        "body": "SetTargetRange"
    },
    "IsLinkType": {
        "prefix": "IsLinkType",
        "description": "•Card.IsLinkType(Card c, int type)\n检查c用作连接素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "IsLinkType"
    },
    "aux.bfgcost": {
        "prefix": "aux.bfgcost",
        "description": "•aux.bfgcost(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp, int chk)\n把这张卡除外 的过滤条件的简单写法，，用在效果注册的 cost 里  \nfunction Auxiliary.bfgcost(e,tp,eg,ep,ev,re,r,rp,chk)  \n\tif chk==0 then return e:GetHandler():IsAbleToRemoveAsCost() end  \n\tDuel.Remove(e:GetHandler(),POS_FACEUP,REASON_COST)  \nend  \n",
        "body": "aux.bfgcost"
    },
    "CATEGORY_COUNTER": {
        "prefix": "CATEGORY_COUNTER",
        "description": "指示物效果",
        "body": "CATEGORY_COUNTER"
    },
    "Card.IsAbleToDeckAsCost": {
        "prefix": "Card.IsAbleToDeckAsCost",
        "description": "•Card.IsAbleToDeckAsCost(Card c)\n检查c是否可以作为cost送去卡组  \n",
        "body": "Card.IsAbleToDeckAsCost"
    },
    "Duel.Readjust": {
        "prefix": "Duel.Readjust",
        "description": "•Duel.Readjust()\n刷新场上的卡的信息  \n非特定情况或者不清楚原理请勿使用此函数以免形成死循环  \n",
        "body": "Duel.Readjust"
    },
    "CheckActivateEffect": {
        "prefix": "CheckActivateEffect",
        "description": "•Card.CheckActivateEffect(Card c, bool neglect_con, bool neglect_cost, bool copy_info)\n返回c的可以发动时机正确的“卡的发动”的效果，neglect_con=true则无视发动条件，neglect_cost=true则无视发动cost  \ncopy_info=false或者自由时点的效果则只返回这个效果 e  \n否则还返回这个效果的触发时点的信息 e,eg,ep,ev,re,r,rp  \n",
        "body": "CheckActivateEffect"
    },
    "Card.GetAttack": {
        "prefix": "Card.GetAttack",
        "description": "•Card.GetAttack(Card c)\n返回c的当前攻击力  \n",
        "body": "Card.GetAttack"
    },
    "EnableGlobalFlag": {
        "prefix": "EnableGlobalFlag",
        "description": "•Duel.EnableGlobalFlag(int global_flag)\n设置全局标记global_flag  \n",
        "body": "EnableGlobalFlag"
    },
    "GetOwnerTargetCount": {
        "prefix": "GetOwnerTargetCount",
        "description": "•Card.GetOwnerTargetCount(Card c)\n返回取c作为永续对象的卡的数量  \n",
        "body": "GetOwnerTargetCount"
    },
    "IsPlayerCanSSet": {
        "prefix": "IsPlayerCanSSet",
        "description": "•Duel.IsPlayerCanSSet(int player[, Card c])\n检查玩家player是否可以把卡片[ c ]盖放到魔陷区  \n",
        "body": "IsPlayerCanSSet"
    },
    "EVENT_MOVE": {
        "prefix": "EVENT_MOVE",
        "description": "移動卡片(急兔馬)",
        "body": "EVENT_MOVE"
    },
    "HINTMSG_FACEUP": {
        "prefix": "HINTMSG_FACEUP",
        "description": "请选择表侧表示的卡",
        "body": "HINTMSG_FACEUP"
    },
    "Card.GetPreviousDefenseOnField": {
        "prefix": "Card.GetPreviousDefenseOnField",
        "description": "•Card.GetPreviousDefenseOnField(Card c)\n返回c位置变化之前在场上的守备力  \n",
        "body": "Card.GetPreviousDefenseOnField"
    },
    "Card.GetPreviousEquipTarget": {
        "prefix": "Card.GetPreviousEquipTarget",
        "description": "•Card.GetPreviousEquipTarget(Card c)\n返回c之前的装备对象  \n",
        "body": "Card.GetPreviousEquipTarget"
    },
    "IsCounterAdded": {
        "prefix": "IsCounterAdded",
        "description": "•aux.IsCounterAdded(Card c, int counter)\n检测 c 是否添加了指示物 counter (?)  \n",
        "body": "IsCounterAdded"
    },
    "Duel.RemoveCounter": {
        "prefix": "Duel.RemoveCounter",
        "description": "•Duel.RemoveCounter(int player, int s, int o, int countertype, int count, int reason)\n让玩家player以reason为原因移除场上存在的countertype类型的count个指示物，返回值表示是否成功  \ns表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置  \n",
        "body": "Duel.RemoveCounter"
    },
    "aux.dlkcheck": {
        "prefix": "aux.dlkcheck",
        "description": "•aux.dlkcheck(Group g)\n检测卡片组 g 中是否有相同连接值的卡的简单写法，返回值如果为 true 表示没有相同连接值卡  \nfunction Auxiliary.dlkcheck(g)  \n\treturn g:GetClassCount(Card.GetLink)==#g  \nend  \n",
        "body": "aux.dlkcheck"
    },
    "CHAININFO_TRIGGERING_LOCATION": {
        "prefix": "CHAININFO_TRIGGERING_LOCATION",
        "description": "连锁的位置",
        "body": "CHAININFO_TRIGGERING_LOCATION"
    },
    "IsNotTuner": {
        "prefix": "IsNotTuner",
        "description": "•Card.IsNotTuner(Card c)\n检查c是否可以当成非调整来使用  \n",
        "body": "IsNotTuner"
    },
    "GetProperty": {
        "prefix": "GetProperty",
        "description": "•Effect.GetProperty(Effect e)\n返回效果 e 的Property属性  \n",
        "body": "GetProperty"
    },
    "drkcheck": {
        "prefix": "drkcheck",
        "description": "•aux.drkcheck(Group g)\n检测卡片组 g 中是否有相同阶级的卡的简单写法，返回值如果为 true 表示没有相同阶级卡  \nfunction Auxiliary.drkcheck(g)  \n\treturn g:GetClassCount(Card.GetRank)==#g  \nend  \n",
        "body": "drkcheck"
    },
    "ReplaceEffect": {
        "prefix": "ReplaceEffect",
        "description": "•Card.ReplaceEffect(Card c, int code, int reset_flag[, int reset_count=1])\n把c的效果替换为卡号是code的卡的效果，并且添加额外的reset条件  \n返回值是表示替换效果的代号id  \n",
        "body": "ReplaceEffect"
    },
    "RemoveCounter": {
        "prefix": "RemoveCounter",
        "description": "•Card.RemoveCounter(Card c, int player, int countertype, int count, int reason)\n让玩家player以原因reason移除c上的count个countertype类型的指示物， countertype=0 则清除c的所有指示物  \n\n•Duel.RemoveCounter(int player, int s, int o, int countertype, int count, int reason)\n让玩家player以reason为原因移除场上存在的countertype类型的count个指示物，返回值表示是否成功  \ns表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置  \n\n",
        "body": "RemoveCounter"
    },
    "EFFECT_TYPE_GRANT": {
        "prefix": "EFFECT_TYPE_GRANT",
        "description": "使其他卡片获得效果（天气模样）",
        "body": "EFFECT_TYPE_GRANT"
    },
    "Card.GetCode": {
        "prefix": "Card.GetCode",
        "description": "•Card.GetCode(Card c)\n返回c的当前代号（可能因为效果改变）  \n",
        "body": "Card.GetCode"
    },
    "Duel.GetRitualMaterial": {
        "prefix": "Duel.GetRitualMaterial",
        "description": "•Duel.GetRitualMaterial(int player)\n返回玩家player可用的用于仪式召唤素材的卡片组  \n包含手上，场上可解放的以及墓地的仪式魔人等卡  \n",
        "body": "Duel.GetRitualMaterial"
    },
    "IsCanChangePosition": {
        "prefix": "IsCanChangePosition",
        "description": "•Card.IsCanChangePosition(Card c)\n检查c是否可以用效果改变表示形式  \n",
        "body": "IsCanChangePosition"
    },
    "Card.IsDiscardable": {
        "prefix": "Card.IsDiscardable",
        "description": "•Card.IsDiscardable(Card[, int reason=REASON_COST])\n检查c是否可以以reason原因丢弃  \n注：此函数仅用于检测，  \n以REASON_DISCARD作为原因把一张手卡送墓并不会导致那张卡不能丢弃  \n",
        "body": "Card.IsDiscardable"
    },
    "EFFECT_TYPE_FIELD": {
        "prefix": "EFFECT_TYPE_FIELD",
        "description": "场上所有卡状态变化时触发",
        "body": "EFFECT_TYPE_FIELD"
    },
    "dlkcheck": {
        "prefix": "dlkcheck",
        "description": "•aux.dlkcheck(Group g)\n检测卡片组 g 中是否有相同连接值的卡的简单写法，返回值如果为 true 表示没有相同连接值卡  \nfunction Auxiliary.dlkcheck(g)  \n\treturn g:GetClassCount(Card.GetLink)==#g  \nend  \n",
        "body": "dlkcheck"
    },
    "RESET_PHASE": {
        "prefix": "RESET_PHASE",
        "description": "阶段结束重置(一般和上面那些阶段配合使用)",
        "body": "RESET_PHASE"
    },
    "STATUS_LEAVE_CONFIRMED": {
        "prefix": "STATUS_LEAVE_CONFIRMED",
        "description": "連鎖處理完後送去墓地的魔法陷阱",
        "body": "STATUS_LEAVE_CONFIRMED"
    },
    "EFFECT_SELF_TOGRAVE": {
        "prefix": "EFFECT_SELF_TOGRAVE",
        "description": "不入連鎖的送墓",
        "body": "EFFECT_SELF_TOGRAVE"
    },
    "HINT_NUMBER": {
        "prefix": "HINT_NUMBER",
        "body": "HINT_NUMBER"
    },
    "PHASE_DAMAGE": {
        "prefix": "PHASE_DAMAGE",
        "description": "伤害步驟",
        "body": "PHASE_DAMAGE"
    },
    "EFFECT_DISABLE": {
        "prefix": "EFFECT_DISABLE",
        "description": "效果无效（技能抽取）",
        "body": "EFFECT_DISABLE"
    },
    "Effect.IsHasProperty": {
        "prefix": "Effect.IsHasProperty",
        "description": "•Effect.IsHasProperty(Effect e, int prop1[, int prop2])\n检查效果e是否含有标志prop1[和prop2]  \n",
        "body": "Effect.IsHasProperty"
    },
    "EFFECT_USE_EXTRA_MZONE": {
        "prefix": "EFFECT_USE_EXTRA_MZONE",
        "description": "怪兽区域封锁",
        "body": "EFFECT_USE_EXTRA_MZONE"
    },
    "Card.RegisterEffect": {
        "prefix": "Card.RegisterEffect",
        "description": "•Card.RegisterEffect(Card c, Effect e[, bool forced=false])\n把效果e注册给c，返回效果的全局id，并设置e的Handler为c  \n默认情况下注册时如果c带有免疫e的效果那么注册会失败  \n如果forced为true则不会检查c对e的免疫效果  \n",
        "body": "Card.RegisterEffect"
    },
    "CheckCountLimit": {
        "prefix": "CheckCountLimit",
        "description": "•Effect.CheckCountLimit(Effect e, int p)\n检测玩家 p 是否还有可以发动的效果 e 的次数  \n",
        "body": "CheckCountLimit"
    },
    "GetCondition": {
        "prefix": "GetCondition",
        "description": "•Effect.GetCondition(Effect e)\n返回效果 e 的condition属性  \n",
        "body": "GetCondition"
    },
    "GetCustomActivityCount": {
        "prefix": "GetCustomActivityCount",
        "description": "•Duel.GetCustomActivityCount(int counter_id, int player, int activity_type)\n代号为counter_id的计数器的计数，返回player进行以下操作的次数（目前最多为1）  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的set）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的set）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_CHAIN          =7\t--发动效果  \n",
        "body": "GetCustomActivityCount"
    },
    "Duel.GetAttacker": {
        "prefix": "Duel.GetAttacker",
        "description": "•Duel.GetAttacker()\n返回此次战斗攻击的卡  \n",
        "body": "Duel.GetAttacker"
    },
    "EFFECT_REVERSE_UPDATE": {
        "prefix": "EFFECT_REVERSE_UPDATE",
        "description": "倒置改变攻击力、防御力（天邪鬼）",
        "body": "EFFECT_REVERSE_UPDATE"
    },
    "Duel.GetFieldGroup": {
        "prefix": "Duel.GetFieldGroup",
        "description": "•Duel.GetFieldGroup(int player, int s, int o)\n返回以player来看的指定位置的卡，s代表以player来看的自己的位置，o代表以player来看的对方的位置  \n",
        "body": "Duel.GetFieldGroup"
    },
    "Effect.Reset": {
        "prefix": "Effect.Reset",
        "description": "•Effect.Reset(Effect e)\n把效果e重置，重置之后不可以再使用此效果  \n",
        "body": "Effect.Reset"
    },
    "Duel.IsPlayerCanSendtoDeck": {
        "prefix": "Duel.IsPlayerCanSendtoDeck",
        "description": "•Duel.IsPlayerCanSendtoDeck(int player[, Card c])\n检查玩家是否能把卡片[c]送去卡组  \n",
        "body": "Duel.IsPlayerCanSendtoDeck"
    },
    "EFFECT_PATRICIAN_OF_DARKNESS": {
        "prefix": "EFFECT_PATRICIAN_OF_DARKNESS",
        "description": "由對手選擇攻擊對象(黑暗貴族)",
        "body": "EFFECT_PATRICIAN_OF_DARKNESS"
    },
    "Card.IsLinkMarker": {
        "prefix": "Card.IsLinkMarker",
        "description": "•Card.IsLinkMarker(Card c, int dir)\n检查c是否是连接标记为 dir 的卡  \ndir的值有：  \nLINK_MARKER_BOTTOM_LEFT\t\t=0x001 -- ↙  \nLINK_MARKER_BOTTOM\t\t\t=0x002 -- ↓  \nLINK_MARKER_BOTTOM_RIGHT\t=0x004 -- ↘  \nLINK_MARKER_LEFT\t\t\t=0x008 -- ←  \nLINK_MARKER_RIGHT\t\t\t=0x020 -- →  \nLINK_MARKER_TOP_LEFT\t\t=0x040 -- ↖  \nLINK_MARKER_TOP\t\t\t\t=0x080 -- ↑  \nLINK_MARKER_TOP_RIGHT\t\t=0x100 -- ↗  \n",
        "body": "Card.IsLinkMarker"
    },
    "Card.CancelToGrave": {
        "prefix": "Card.CancelToGrave",
        "description": "•Card.CancelToGrave(Card c[, bool cancel=true])\n取消送墓确定状态，cancel=false则重新设置送墓确定状态  \n注：送墓确定状态指的是在场上发动的不留场的魔法和陷阱后，这些卡片的状态  \n送墓确定状态中的卡无法返回手牌和卡组，并且连锁结束时送去墓地  \n此函数的作用是取消此状态使其留场，用于光之护封剑和废铁稻草人等卡  \n",
        "body": "Card.CancelToGrave"
    },
    "TYPE_CONTINUOUS": {
        "prefix": "TYPE_CONTINUOUS",
        "description": "永续",
        "body": "TYPE_CONTINUOUS"
    },
    "Duel.SpecialSummon": {
        "prefix": "Duel.SpecialSummon",
        "description": "•Duel.SpecialSummon(Card|Group targets, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos[, int zone=0xff])\n让玩家 sumplayer 以sumtype方式，pos表示形式把targets特殊召唤到target_player场上[的区域 zone]  \n如果nocheck为true则无视卡的召唤条件，如果nolimit为true则无视卡的苏生限制  \n返回值是特殊召唤成功的卡的数量  \n",
        "body": "Duel.SpecialSummon"
    },
    "IsPlayerCanSendtoDeck": {
        "prefix": "IsPlayerCanSendtoDeck",
        "description": "•Duel.IsPlayerCanSendtoDeck(int player[, Card c])\n检查玩家是否能把卡片[c]送去卡组  \n",
        "body": "IsPlayerCanSendtoDeck"
    },
    "EFFECT_ATTACK_ALL": {
        "prefix": "EFFECT_ATTACK_ALL",
        "description": "可以攻击所有怪兽",
        "body": "EFFECT_ATTACK_ALL"
    },
    "aux.synlimit": {
        "prefix": "aux.synlimit",
        "description": "•aux.synlimit(Effect e, Effect se, int sp, int st)\n不能用 同调召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.synlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_SYNCHRO==SUMMON_TYPE_SYNCHRO  \nend  \n",
        "body": "aux.synlimit"
    },
    "IsHasCardTarget": {
        "prefix": "IsHasCardTarget",
        "description": "•Card.IsHasCardTarget(Card c1, Card c2)\n检查c2是否取c1为永续对象  \n",
        "body": "IsHasCardTarget"
    },
    "EVENT_CHAIN_END": {
        "prefix": "EVENT_CHAIN_END",
        "description": "连锁串结束时",
        "body": "EVENT_CHAIN_END"
    },
    "Readjust": {
        "prefix": "Readjust",
        "description": "•Duel.Readjust()\n刷新场上的卡的信息  \n非特定情况或者不清楚原理请勿使用此函数以免形成死循环  \n",
        "body": "Readjust"
    },
    "Card.ClearEffectRelation": {
        "prefix": "Card.ClearEffectRelation",
        "description": "•Card.ClearEffectRelation(Card c)\n清空c所有联系的效果  \n",
        "body": "Card.ClearEffectRelation"
    },
    "GetBattleTarget": {
        "prefix": "GetBattleTarget",
        "description": "•Card.GetBattleTarget(Card c)\n返回与c进行战斗的卡，没有则返回nil  \n",
        "body": "GetBattleTarget"
    },
    "TIMING_DAMAGE_STEP": {
        "prefix": "TIMING_DAMAGE_STEP",
        "description": "伤害步骤时点",
        "body": "TIMING_DAMAGE_STEP"
    },
    "CheckPhaseActivity": {
        "prefix": "CheckPhaseActivity",
        "description": "•Duel.CheckPhaseActivity()\n检查玩家在当前阶段是否有操作（是否处于阶段开始时，如七皇之剑）  \n",
        "body": "CheckPhaseActivity"
    },
    "ShuffleDeck": {
        "prefix": "ShuffleDeck",
        "description": "•Duel.ShuffleDeck(int player)\n手动洗切玩家player的卡组  \n注：会重置洗卡检测的状态  \n",
        "body": "ShuffleDeck"
    },
    "Card.IsLinkState": {
        "prefix": "Card.IsLinkState",
        "description": "•Card.IsLinkState(Card c)\n检查c是否是连接状态  \n",
        "body": "Card.IsLinkState"
    },
    "EFFECT_CHANGE_RANK": {
        "prefix": "EFFECT_CHANGE_RANK",
        "description": "设置阶级",
        "body": "EFFECT_CHANGE_RANK"
    },
    "aux.bdgcon": {
        "prefix": "aux.bdgcon",
        "description": "•aux.bdgcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且战斗破坏对方怪兽送去墓地 的 condition  \nfunction Auxiliary.bdgcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\tlocal bc=c:GetBattleTarget()  \n\treturn c:IsRelateToBattle() and bc:IsLocation(LOCATION_GRAVE) and bc:IsType(TYPE_MONSTER)  \nend  \n",
        "body": "aux.bdgcon"
    },
    "GetFieldGroup": {
        "prefix": "GetFieldGroup",
        "description": "•Duel.GetFieldGroup(int player, int s, int o)\n返回以player来看的指定位置的卡，s代表以player来看的自己的位置，o代表以player来看的对方的位置  \n",
        "body": "GetFieldGroup"
    },
    "CheckReleaseGroupEx": {
        "prefix": "CheckReleaseGroupEx",
        "description": "•Duel.CheckReleaseGroupEx(int player, function f|nil, int count, Card|Group ex|nil, ...)\n检查玩家player场上·手卡是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第5个参数开始为额外参数  \n",
        "body": "CheckReleaseGroupEx"
    },
    "GetColumnZone": {
        "prefix": "GetColumnZone",
        "description": "•Card.GetColumnZone(Card c, int location[, int left, int right, int player])\n返回[以 player 来看的] location 范围内与 c 同一纵列[包含左边 left 列和右边 right 列]的区域，  \nlocation 的值是 LOCATION_MZONE,LOCATION_SZONE,LOCATIOIN_ONFIELD   \n",
        "body": "GetColumnZone"
    },
    "IsRank": {
        "prefix": "IsRank",
        "description": "•Card.IsRank(Card c, int rank1[, int rank2,...])\n检查c是否是阶级 rank1[, 或者为 rank2...]  \n",
        "body": "IsRank"
    },
    "CHAININFO_TARGET_CARDS": {
        "prefix": "CHAININFO_TARGET_CARDS",
        "description": "连锁的效果的对象（以下3个需要在target函数里设置）",
        "body": "CHAININFO_TARGET_CARDS"
    },
    "Card.CheckActivateEffect": {
        "prefix": "Card.CheckActivateEffect",
        "description": "•Card.CheckActivateEffect(Card c, bool neglect_con, bool neglect_cost, bool copy_info)\n返回c的可以发动时机正确的“卡的发动”的效果，neglect_con=true则无视发动条件，neglect_cost=true则无视发动cost  \ncopy_info=false或者自由时点的效果则只返回这个效果 e  \n否则还返回这个效果的触发时点的信息 e,eg,ep,ev,re,r,rp  \n",
        "body": "Card.CheckActivateEffect"
    },
    "MZoneSequence": {
        "prefix": "MZoneSequence",
        "description": "•aux.MZoneSequence(int seq)\n返回是第几列怪兽区，从左到右 分别是 0~4 ,若在 额外怪兽区，则返回 左 1 或者 右 3   \n",
        "body": "MZoneSequence"
    },
    "Card.GetOriginalCode": {
        "prefix": "Card.GetOriginalCode",
        "description": "•Card.GetOriginalCode(Card c)\n返回c的卡片记载的代号  \n",
        "body": "Card.GetOriginalCode"
    },
    "EVENT_TOSS_COIN_NEGATE": {
        "prefix": "EVENT_TOSS_COIN_NEGATE",
        "description": "重新抛硬币",
        "body": "EVENT_TOSS_COIN_NEGATE"
    },
    "Effect.SetOperation": {
        "prefix": "Effect.SetOperation",
        "description": "•Effect.SetOperation(Effect e, nil|function op_func)\n设置效果 e 的Operation属性  \n",
        "body": "Effect.SetOperation"
    },
    "Duel.EnableGlobalFlag": {
        "prefix": "Duel.EnableGlobalFlag",
        "description": "•Duel.EnableGlobalFlag(int global_flag)\n设置全局标记global_flag  \n",
        "body": "Duel.EnableGlobalFlag"
    },
    "ASSUME_DEFENSE": {
        "prefix": "ASSUME_DEFENSE",
        "body": "ASSUME_DEFENSE"
    },
    "TYPE_TRAP": {
        "prefix": "TYPE_TRAP",
        "description": "陷阱卡",
        "body": "TYPE_TRAP"
    },
    "HINTMSG_EQUIP": {
        "prefix": "HINTMSG_EQUIP",
        "description": "请选择要装备的卡",
        "body": "HINTMSG_EQUIP"
    },
    "Duel.SwapSequence": {
        "prefix": "Duel.SwapSequence",
        "description": "•Duel.SwapSequence(Card c1, Card c2)\n交换c1和c2的位置  \n",
        "body": "Duel.SwapSequence"
    },
    "Duel.SortDecktop": {
        "prefix": "Duel.SortDecktop",
        "description": "•Duel.SortDecktop(int sort_player, int target_player, int count)\n让玩家sort_player对玩家target_player的卡组最上方count张卡进行排序，最先选的卡在最上面，然后下面是第二张选择的卡，以此类推  \n最多只能排序16张卡  \n",
        "body": "Duel.SortDecktop"
    },
    "EFFECT_REFLECT_BATTLE_DAMAGE": {
        "prefix": "EFFECT_REFLECT_BATTLE_DAMAGE",
        "description": "反弹战斗伤害",
        "body": "EFFECT_REFLECT_BATTLE_DAMAGE"
    },
    "CHAININFO_TRIGGERING_RACE": {
        "prefix": "CHAININFO_TRIGGERING_RACE",
        "description": "连锁发生时的种族",
        "body": "CHAININFO_TRIGGERING_RACE"
    },
    "EFFECT_DECREASE_TRIBUTE_SET": {
        "prefix": "EFFECT_DECREASE_TRIBUTE_SET",
        "description": "减少放置怪兽的祭品",
        "body": "EFFECT_DECREASE_TRIBUTE_SET"
    },
    "EFFECT_XYZ_LEVEL": {
        "prefix": "EFFECT_XYZ_LEVEL",
        "description": "做超量素材时的等级",
        "body": "EFFECT_XYZ_LEVEL"
    },
    "Effect.Clone": {
        "prefix": "Effect.Clone",
        "description": "•Effect.Clone(Effect e)\n新建一个效果e的副本  \n",
        "body": "Effect.Clone"
    },
    "RACE_PYRO": {
        "prefix": "RACE_PYRO",
        "description": "炎",
        "body": "RACE_PYRO"
    },
    "Card.IsLinkRace": {
        "prefix": "Card.IsLinkRace",
        "description": "•Card.IsLinkRace(Card c, int race[, int player=PLAYER_NONE])\n检查c[由player连接召唤时]用作连接素材时是否属于种族race  \n",
        "body": "Card.IsLinkRace"
    },
    "CheckSynchroMaterial": {
        "prefix": "CheckSynchroMaterial",
        "description": "•Duel.CheckSynchroMaterial(Card c, function f1|nil, function f2|nil, int min, int max[, Card smat|nil, Group mg|nil])\n检查场上[或mg中]是否存在一组[必须包括smat在内的（如果有mg~=nil则忽略此参数）]满足条件的卡作为同调召唤c的素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \nf1,f2 之中，至少有一种为调整的条件  \n",
        "body": "CheckSynchroMaterial"
    },
    "Destroy": {
        "prefix": "Destroy",
        "description": "•Duel.Destroy(Card|Group targets, int reason[ ,int dest = LOCATION_GRAVE])\n以reason原因破坏targets去dest，返回值是实际被破坏的数量  \n如果reason包含REASON_RULE，则破坏事件将不会检查卡片是否免疫效果，  \n不会触发代破效果并且无视“不能破坏”  \n",
        "body": "Destroy"
    },
    "Duel.EquipComplete": {
        "prefix": "Duel.EquipComplete",
        "description": "•Duel.EquipComplete()\n在调用Duel.Equip时，若is_step参数为true，则需调用此函数触发时点  \n",
        "body": "Duel.EquipComplete"
    },
    "aux.AddFusionProcCodeRep": {
        "prefix": "aux.AddFusionProcCodeRep",
        "description": "•aux.AddFusionProcCodeRep(Card c, int code, int cc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用 cc 个卡号为 code 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,table.unpack(tcode)) ,tcode 是包含 cc 个 code 的表  \n",
        "body": "aux.AddFusionProcCodeRep"
    },
    "Card.GetBaseDefense": {
        "prefix": "Card.GetBaseDefense",
        "description": "•Card.GetBaseDefense(Card c)\n返回c的原本守备力  \n",
        "body": "Card.GetBaseDefense"
    },
    "gfcheck": {
        "prefix": "gfcheck",
        "description": "•aux.gfcheck(Group g, function f, any a1, any a2)\n--check for group with 2 cards, each card match f with a1/a2 as argument  \nfunction Auxiliary.gfcheck(g,f,a1,a2)  \n\tif #g~=2 then return false end  \n\tlocal c1=g:GetFirst()  \n\tlocal c2=g:GetNext()  \n\treturn f(c1,a1) and f(c2,a2) or f(c2,a1) and f(c1,a2)  \nend  \n",
        "body": "gfcheck"
    },
    "ACTIVITY_SUMMON": {
        "prefix": "ACTIVITY_SUMMON",
        "body": "ACTIVITY_SUMMON"
    },
    "linklimit": {
        "prefix": "linklimit",
        "description": "•aux.linklimit(Effect e, Effect se, int sp, int st)\n不能用 连接召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.linklimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_LINK==SUMMON_TYPE_LINK  \nend  \n",
        "body": "linklimit"
    },
    "SetDescription": {
        "prefix": "SetDescription",
        "description": "•Effect.SetDescription(Effect e, int desc)\n设置效果 e 的效果描述  \n",
        "body": "SetDescription"
    },
    "CheckReleaseGroup": {
        "prefix": "CheckReleaseGroup",
        "description": "•Duel.CheckReleaseGroup(int player, function f|nil, int count, Card|Group ex|nil, ...)\n检查玩家player场上是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第5个参数开始为额外参数  \n",
        "body": "CheckReleaseGroup"
    },
    "CHAININFO_TRIGGERING_CONTROLER": {
        "prefix": "CHAININFO_TRIGGERING_CONTROLER",
        "description": "连锁的卡的控制者",
        "body": "CHAININFO_TRIGGERING_CONTROLER"
    },
    "Card.IsCanBeSynchroMaterial": {
        "prefix": "Card.IsCanBeSynchroMaterial",
        "description": "•Card.IsCanBeSynchroMaterial(Card c[, Card sc, Card tuner])\n检查c是否可以成为[以 tuner 为调整的同调怪兽sc的]同调素材  \n",
        "body": "Card.IsCanBeSynchroMaterial"
    },
    "STATUS_FUTURE_FUSION": {
        "prefix": "STATUS_FUTURE_FUSION",
        "description": "未来融合特殊召唤(不触发融合素材效果)",
        "body": "STATUS_FUTURE_FUSION"
    },
    "ASSUME_LEVEL": {
        "prefix": "ASSUME_LEVEL",
        "body": "ASSUME_LEVEL"
    },
    "EFFECT_CANNOT_DISABLE_SPSUMMON": {
        "prefix": "EFFECT_CANNOT_DISABLE_SPSUMMON",
        "description": "特殊召唤不会无效",
        "body": "EFFECT_CANNOT_DISABLE_SPSUMMON"
    },
    "IsSummonableCard": {
        "prefix": "IsSummonableCard",
        "description": "•Card.IsSummonableCard(Card c)\n检查c是否是可通常召唤的卡  \n",
        "body": "IsSummonableCard"
    },
    "EFFECT_TYPE_XMATERIAL": {
        "prefix": "EFFECT_TYPE_XMATERIAL",
        "description": "作为超量素材时超量怪兽获得的效果（十二兽）",
        "body": "EFFECT_TYPE_XMATERIAL"
    },
    "Duel.IsPlayerCanAdditionalSummon": {
        "prefix": "Duel.IsPlayerCanAdditionalSummon",
        "description": "•Duel.IsPlayerCanAdditionalSummon(int player)\n检查玩家是否进行过额外的通常召唤  \n注：以前这个函数叫 Duel.IsPlayerExtraSummoned(int player)  \n",
        "body": "Duel.IsPlayerCanAdditionalSummon"
    },
    "Card.GetOwnerTargetCount": {
        "prefix": "Card.GetOwnerTargetCount",
        "description": "•Card.GetOwnerTargetCount(Card c)\n返回取c作为永续对象的卡的数量  \n",
        "body": "Card.GetOwnerTargetCount"
    },
    "IsReleasableByEffect": {
        "prefix": "IsReleasableByEffect",
        "description": "•Card.IsReleasableByEffect(Card c)\n检查c是否可以被效果解放  \n",
        "body": "IsReleasableByEffect"
    },
    "aux.EnableReviveLimitPendulumSummonable": {
        "prefix": "aux.EnableReviveLimitPendulumSummonable",
        "description": "•aux.EnableReviveLimitPendulumSummonable(Card c[, int location=0xff])\n如果 怪兽 c 从 location 灵摆召唤，也能解除苏生限制(?) (超天新龙 异色眼革命龙 (16306932))  \n",
        "body": "aux.EnableReviveLimitPendulumSummonable"
    },
    "GetActivateLocation": {
        "prefix": "GetActivateLocation",
        "description": "•Effect.GetActivateLocation(Effect e)\n返回效果e的发动区域  \n",
        "body": "GetActivateLocation"
    },
    "OPCODE_ISRACE": {
        "prefix": "OPCODE_ISRACE",
        "body": "OPCODE_ISRACE"
    },
    "CalculateDamage": {
        "prefix": "CalculateDamage",
        "description": "•Duel.CalculateDamage(Card c1, Card c2[, bool new_attack=false])\n令c1与c2进行战斗伤害计算（c1 攻击 c2）  \n若 new_attack=true 则视为 攻击的卡进行过攻击宣言（？）  \n",
        "body": "CalculateDamage"
    },
    "GetTurnID": {
        "prefix": "GetTurnID",
        "description": "•Card.GetTurnID(Card c)\n返回c转移到当前位置的回合  \n",
        "body": "GetTurnID"
    },
    "Card.CheckEquipTarget": {
        "prefix": "Card.CheckEquipTarget",
        "description": "•Card.CheckEquipTarget(Card c1, Card c2)\n检查c2是否是c1的正确的装备对象  \n##由EFFECT_EQUIP_LIMIT效果或同盟状态确定  \n",
        "body": "Card.CheckEquipTarget"
    },
    "aux.AddRitualProcEqual2": {
        "prefix": "aux.AddRitualProcEqual2",
        "description": "•aux.AddRitualProcEqual2(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcEqual2"
    },
    "Card.GetLinkRace": {
        "prefix": "Card.GetLinkRace",
        "description": "•Card.GetLinkRace(Card c[, int player=PLAYER_NONE])\n返回c[由player连接召唤时]作为连接素材时的种族  \n",
        "body": "Card.GetLinkRace"
    },
    "Card.CheckUniqueOnField": {
        "prefix": "Card.CheckUniqueOnField",
        "description": "•Card.CheckUniqueOnField(Card c,int check_player[, int check_location=LOCATION_ONFIELD, Card icard|nil])\n检查c在check_player场上的唯一性  \n",
        "body": "Card.CheckUniqueOnField"
    },
    "IsEnvironment": {
        "prefix": "IsEnvironment",
        "description": "•Duel.IsEnvironment(int code[, int player=PLAYER_ALL, int loc = LOCATION_FZONE + LOCATION_ONFIELD])\n检查场地代号是否是code [，来源玩家是否是 player][，生效区域是否在 loc 内]  \n场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值  \n来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者  \n",
        "body": "IsEnvironment"
    },
    "Card.GetMutualLinkedGroup": {
        "prefix": "Card.GetMutualLinkedGroup",
        "description": "•Card.GetMutualLinkedGroup(Card c)\n返回和c互相连接状态的卡片组  \n",
        "body": "Card.GetMutualLinkedGroup"
    },
    "Card.GetOwner": {
        "prefix": "Card.GetOwner",
        "description": "•Card.GetOwner(Card c)\n返回c的持有者  \n",
        "body": "Card.GetOwner"
    },
    "AnnounceCard": {
        "prefix": "AnnounceCard",
        "description": "•Duel.AnnounceCard(int player[, ...])\n让玩家player宣言一个卡片（比如：禁止令）  \nDuel.AnnounceCardFilter 已经被合并到这个函数里  \n如果参数只有2个，会自动加上第三个参数 OPCODE_ISTYPE  \n多个参数参考 古代的齿车机械(18486927):  \n\tlocal code=e:GetHandler():GetCode()  \n\t--c:IsSetCard(0x51) and not c:IsCode(code)  \n\tgetmetatable(e:GetHandler()).announce_filter={0x51,OPCODE_ISSETCARD,code,OPCODE_ISCODE,OPCODE_NOT,OPCODE_AND}  \n\tlocal ac=Duel.AnnounceCard(tp,table.unpack(getmetatable(e:GetHandler()).announce_filter))  \n--Opcode  \nOPCODE_ADD\t\t\t\t=0x40000000   \nOPCODE_SUB\t\t\t\t=0x40000001   \nOPCODE_MUL\t\t\t\t=0x40000002   \nOPCODE_DIV\t\t\t\t=0x40000003 --除法  \nOPCODE_AND\t\t\t\t=0x40000004 --与  \nOPCODE_OR\t\t\t\t=0x40000005 --或  \nOPCODE_NEG\t\t\t\t=0x40000006   \nOPCODE_NOT\t\t\t\t=0x40000007 --非  \nOPCODE_ISCODE\t\t\t=0x40000100 --卡片过滤条件为code  \nOPCODE_ISSETCARD\t\t=0x40000101 --卡片过滤条件为setname  \nOPCODE_ISTYPE\t\t\t=0x40000102 --卡片过滤条件为type  \nOPCODE_ISRACE\t\t\t=0x40000103 --卡片过滤条件为race  \nOPCODE_ISATTRIBUTE\t\t=0x40000104 --卡片过滤条件为attribute  \n",
        "body": "AnnounceCard"
    },
    "CheckChainTarget": {
        "prefix": "CheckChainTarget",
        "description": "•Duel.CheckChainTarget(int chainc, Card c)\n检查c是否是连锁chainc的效果的正确的对象  \n",
        "body": "CheckChainTarget"
    },
    "CHINT_RACE": {
        "prefix": "CHINT_RACE",
        "body": "CHINT_RACE"
    },
    "IsCanRemoveCounter": {
        "prefix": "IsCanRemoveCounter",
        "description": "•Card.IsCanRemoveCounter(Card c, int player, int countertype, int count, int reason)\n检查玩家player是否可以以原因reason移除c上的count个countertype类型的指示物  \n\n•Duel.IsCanRemoveCounter(int player, int s, int o, int countertype, int count, int reason)\n检查玩家player以reason为原因是否能移除场上的countertype类型的count个指示物  \ns表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置  \n\n",
        "body": "IsCanRemoveCounter"
    },
    "DUEL_PSEUDO_SHUFFLE": {
        "prefix": "DUEL_PSEUDO_SHUFFLE",
        "description": "不洗牌",
        "body": "DUEL_PSEUDO_SHUFFLE"
    },
    "aux.sumreg": {
        "prefix": "aux.sumreg",
        "description": "•aux.sumreg(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n妖仙兽 阎魔巳裂(39853199)和一些其他卡(49249907,93368494)用了此函数，就是注册一个flag，其实就是相当于  \nfunction Auxiliary.sumreg(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal tc=eg:GetFirst()  \n\tlocal code=e:GetLabel()  \n\twhile tc do  \n\t\tif tc:GetOriginalCode()==code then  \n\t\t\ttc:RegisterFlagEffect(code,RESET_EVENT+0x1ec0000+RESET_PHASE+PHASE_END,0,1)  \n\t\tend  \n\t\ttc=eg:GetNext()  \n\tend  \nend  \n",
        "body": "aux.sumreg"
    },
    "Group.Equal": {
        "prefix": "Group.Equal",
        "description": "•Group.Equal(Group g1, Group g2)\n判断g1和g2是否相同  \n",
        "body": "Group.Equal"
    },
    "Activate": {
        "prefix": "Activate",
        "description": "•Duel.Activate(Effect e)\n发动效果e（？）  \n",
        "body": "Activate"
    },
    "aux.AddRitualProcUltimate": {
        "prefix": "aux.AddRitualProcUltimate",
        "description": "•aux.AddRitualProcUltimate(Card c, function filter, function level_function, string greater_or_equal, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件， level_function 表示仪式召唤要满足的等级(返回值为int类型的函数)  \ngreater_or_equal 的值只有 \"Greater\" 和 \"Equal\"  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n",
        "body": "aux.AddRitualProcUltimate"
    },
    "IsFaceup": {
        "prefix": "IsFaceup",
        "description": "•Card.IsFaceup(Card c)\n检查c是否是表侧表示  \n",
        "body": "IsFaceup"
    },
    "Effect.SetType": {
        "prefix": "Effect.SetType",
        "description": "•Effect.SetType(Effect e, int type)\n为效果e设置Type属性  \nEFFECT_TYPE_SINGLE\t\t\t=0x0001\t\t--自己状态变化时触发  \nEFFECT_TYPE_FIELD\t\t\t=0x0002\t\t--场上所有卡状态变化时触发  \nEFFECT_TYPE_EQUIP\t\t\t=0x0004\t\t--装备效果  \nEFFECT_TYPE_ACTIONS\t\t\t=0x0008\t\t--触发型，以下類型會自動添加此屬性（对峙的G）  \nEFFECT_TYPE_ACTIVATE\t\t=0x0010\t\t--魔陷发动  \nEFFECT_TYPE_FLIP\t\t\t=0x0020\t\t--翻转效果  \nEFFECT_TYPE_IGNITION\t\t=0x0040\t\t--起动效果  \nEFFECT_TYPE_TRIGGER_O\t\t=0x0080\t\t--诱发选发效果  \nEFFECT_TYPE_QUICK_O\t\t\t=0x0100\t\t--诱发即时效果  \nEFFECT_TYPE_TRIGGER_F\t\t=0x0200\t\t--诱发必发效果  \nEFFECT_TYPE_QUICK_F\t\t\t=0x0400\t\t--诱发即时必发效果（熊猫龙等）  \nEFFECT_TYPE_CONTINUOUS\t\t=0x0800\t\t--由事件觸發的輔助用效果/永續效果  \nEFFECT_TYPE_XMATERIAL\t\t=0x1000\t\t--作为超量素材时超量怪兽获得的效果（十二兽）  \nEFFECT_TYPE_GRANT\t\t\t=0x2000\t\t--使其他卡片获得效果（天气模样）  \nEFFECT_TYPE_TARGET          =0x4000     --影响持续取的对象的效果（基本只用于魔陷）  \n",
        "body": "Effect.SetType"
    },
    "OPCODE_MUL": {
        "prefix": "OPCODE_MUL",
        "body": "OPCODE_MUL"
    },
    "Card.IsSSetable": {
        "prefix": "Card.IsSSetable",
        "description": "•Card.IsSSetable(Card c[, bool ignore_field=false])\n检查c是否可以set到魔法陷阱区，ignore_field=true则无视魔陷区格子是否能使用的限制  \n",
        "body": "Card.IsSSetable"
    },
    "aux.GetValueType": {
        "prefix": "aux.GetValueType",
        "description": "•aux.GetValueType(any value)\n返回 value 在lua中的type  \n",
        "body": "aux.GetValueType"
    },
    "Card.IsSummonType": {
        "prefix": "Card.IsSummonType",
        "description": "•Card.IsSummonType(Card c, int sumtype)\n检查c的召唤类型是否是sumtype  \n",
        "body": "Card.IsSummonType"
    },
    "NegateAttack": {
        "prefix": "NegateAttack",
        "description": "•Duel.NegateAttack()\n无效此次攻击，返回值表示是否成功  \n此次攻击已经被其他效果无效或导致攻击的卡不能攻击则返回false  \n",
        "body": "NegateAttack"
    },
    "GLOBALFLAG_SELF_TOGRAVE": {
        "prefix": "GLOBALFLAG_SELF_TOGRAVE",
        "description": "不入連鎖的送墓檢查(EFFECT_SELF_TOGRAVE)",
        "body": "GLOBALFLAG_SELF_TOGRAVE"
    },
    "EFFECT_DEFENSE_ATTACK": {
        "prefix": "EFFECT_DEFENSE_ATTACK",
        "description": "可以守备表示攻击",
        "body": "EFFECT_DEFENSE_ATTACK"
    },
    "IsChainNegatable": {
        "prefix": "IsChainNegatable",
        "description": "•Duel.IsChainNegatable(int chainc)\n检查连锁chainc的发动能否被无效  \n",
        "body": "IsChainNegatable"
    },
    "EFFECT_NO_EFFECT_DAMAGE": {
        "prefix": "EFFECT_NO_EFFECT_DAMAGE",
        "description": "玩家已受到'效果傷害變成0'的效果影響",
        "body": "EFFECT_NO_EFFECT_DAMAGE"
    },
    "Duel.GetFlagEffect": {
        "prefix": "Duel.GetFlagEffect",
        "description": "•Duel.GetFlagEffect(int player, int code)\n返回玩家 player 的 code 标识效果的数量  \n",
        "body": "Duel.GetFlagEffect"
    },
    "EFFECT_UNRELEASABLE_SUM": {
        "prefix": "EFFECT_UNRELEASABLE_SUM",
        "description": "不能做上级召唤的祭品",
        "body": "EFFECT_UNRELEASABLE_SUM"
    },
    "PHASE_DAMAGE_CAL": {
        "prefix": "PHASE_DAMAGE_CAL",
        "description": "伤害计算时",
        "body": "PHASE_DAMAGE_CAL"
    },
    "Card.AddCounter": {
        "prefix": "Card.AddCounter",
        "description": "•Card.AddCounter(Card c, int countertype, int count[, int singly=false])\n为c放置count个countertype类型的指示物，singly为true表示逐个添加至count 个为止  \n",
        "body": "Card.AddCounter"
    },
    "EFFECT_MUST_BE_ATTACKED": {
        "prefix": "EFFECT_MUST_BE_ATTACKED",
        "description": "N/A",
        "body": "EFFECT_MUST_BE_ATTACKED"
    },
    "Card.IsAbleToRemove": {
        "prefix": "Card.IsAbleToRemove",
        "description": "•Card.IsAbleToRemove(Card c[, int player, int pos=POS_FACEUP, int reason=REASON_EFFECT])\n检查c是否可以被[玩家 player 以 pos 的表示形式,reason 原因]除外  \n",
        "body": "Card.IsAbleToRemove"
    },
    "EFFECT_CHANGE_RANK_FINAL": {
        "prefix": "EFFECT_CHANGE_RANK_FINAL",
        "description": "N/A",
        "body": "EFFECT_CHANGE_RANK_FINAL"
    },
    "aux.EnablePendulumAttribute": {
        "prefix": "aux.EnablePendulumAttribute",
        "description": "•aux.EnablePendulumAttribute(Card c[, bool active_effect=true])\n为灵摆怪兽c添加灵摆怪兽属性（灵摆召唤，灵摆卡的发动）  \nactive_effect=false则不注册灵摆卡“卡的发动”的效果  \n",
        "body": "aux.EnablePendulumAttribute"
    },
    "GetPreviousLocation": {
        "prefix": "GetPreviousLocation",
        "description": "•Card.GetPreviousLocation(Card c)\n返回c位置变化前的所在的位置  \n",
        "body": "GetPreviousLocation"
    },
    "tdcfop": {
        "prefix": "tdcfop",
        "description": "•aux.tdcfop(Card c)\n卡片 c 的返回卡组的接触融合的操作函数。如果素材有里侧表示的，会展示  \nfunction Auxiliary.tdcfop(c)  \n\treturn\tfunction(g)  \n\t\t\t\tlocal cg=g:Filter(Card.IsFacedown,nil)  \n\t\t\t\tif cg:GetCount()>0 then  \n\t\t\t\t\tDuel.ConfirmCards(1-c:GetControler(),cg)  \n\t\t\t\tend  \n\t\t\t\tDuel.SendtoDeck(g,nil,2,REASON_COST)  \n\t\t\tend  \nend  \n",
        "body": "tdcfop"
    },
    "SelectXyzMaterial": {
        "prefix": "SelectXyzMaterial",
        "description": "•Duel.SelectXyzMaterial(int player, Card c, function f|nil, int lv, int min, int max[, Group mg|nil])\n让玩家player为超量怪兽c从场上[或mg中]选择超量用等级为lv的min-max个满足条件f的叠放素材  \n",
        "body": "SelectXyzMaterial"
    },
    "Card.IsCanOverlay": {
        "prefix": "Card.IsCanOverlay",
        "description": "•Card.IsCanOverlay(Card c[, int player)\n检查c是否可以被[玩家 player]叠放  \n衍生物、不在场上的卡或者是被禁止的卡、不是玩家 player 的卡并且不会被改变控制权的卡 都会返回false  \n",
        "body": "Card.IsCanOverlay"
    },
    "Duel.Hint": {
        "prefix": "Duel.Hint",
        "description": "•Duel.Hint(int hint_type, int player, int desc)\n给玩家player发送hint_type类型的消息提示，提示内容为desc  \n#hint_type只能为以下类型：  \n#HINT_SELECTMSG\t\t将提示内容写入缓存，用于选择卡片的提示，例如Duel.SelectMatchingCard等  \n#HINT_OPSELECTED\t向player提示“对方选择了：...”，常用于向对方玩家提示选择发动了什么效果  \n#HINT_CARD\t\t\t此时desc应为卡号，手动显示卡片发动的动画，常用于提示不入连锁的处理  \n#HINT_RACE\t\t\t此时desc应为种族，向player提示“对方宣言了：...”种族  \n#HINT_ATTRIB\t\t此时desc应为属性，向player提示“对方宣言了：...”属性  \n#HINT_CODE\t\t\t此时desc应为卡号，向player提示“对方宣言了：...”卡片  \n#HINT_NUMBER\t\t此时desc视为单纯的数字，向player提示“对方选择了：...”数字  \n#HINT_MESSAGE\t\t弹出一个对话框显示信息  \n#HINT_EVENT\t\t\t将提示内容写入缓存，用于时点的提示信息（诱发即时效果的提示）  \n#HINT_EFFECT\t\t同HINT_CARD  \n",
        "body": "Duel.Hint"
    },
    "CHINT_CARD": {
        "prefix": "CHINT_CARD",
        "body": "CHINT_CARD"
    },
    "SwapSequence": {
        "prefix": "SwapSequence",
        "description": "•Duel.SwapSequence(Card c1, Card c2)\n交换c1和c2的位置  \n",
        "body": "SwapSequence"
    },
    "EVENT_FREE_CHAIN": {
        "prefix": "EVENT_FREE_CHAIN",
        "description": "自由时点（强脱等，还有昴星团等诱发即时效果）",
        "body": "EVENT_FREE_CHAIN"
    },
    "EFFECT_CHANGE_ENVIRONMENT": {
        "prefix": "EFFECT_CHANGE_ENVIRONMENT",
        "description": "改变场地",
        "body": "EFFECT_CHANGE_ENVIRONMENT"
    },
    "IsCanTurnSet": {
        "prefix": "IsCanTurnSet",
        "description": "•Card.IsCanTurnSet(Card c)\n检查c是否可以转成里侧表示  \n",
        "body": "IsCanTurnSet"
    },
    "RESET_REMOVE": {
        "prefix": "RESET_REMOVE",
        "description": "除外重置",
        "body": "RESET_REMOVE"
    },
    "Duel.CheckRemoveOverlayCard": {
        "prefix": "Duel.CheckRemoveOverlayCard",
        "description": "•Duel.CheckRemoveOverlayCard(int player, int s, int o, int count, int reason)\n检查player能否以原因reason移除以player来看的指定位置至少count张卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n",
        "body": "Duel.CheckRemoveOverlayCard"
    },
    "SkipPhase": {
        "prefix": "SkipPhase",
        "description": "•Duel.SkipPhase(int player, int phase, int reset_flag, int reset_count[, int value])\n跳过玩家player的phase阶段，并在特定的阶段后reset，reset参数和效果相同  \n#value只对phase=PHASE_BATTLE才有用，value=1跳过战斗阶段的结束步骤，用于“变成回合结束阶段”等（招财猫王，闪光弹）  \n",
        "body": "SkipPhase"
    },
    "gbspcon": {
        "prefix": "gbspcon",
        "description": "•aux.gbspcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n剑斗兽通用效果(用「剑斗兽」怪兽的效果特殊召唤)的过滤条件的简单写法，用在效果注册里 SetCondition  \n2619149,4253484,31247589,42592719,65984457,78868776,  虽然写法不同，但是没问题  \nfunction Auxiliary.gbspcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal st=e:GetHandler():GetSummonType()  \n\treturn st>=(SUMMON_TYPE_SPECIAL+100) and st<(SUMMON_TYPE_SPECIAL+150)  \nend  \n",
        "body": "gbspcon"
    },
    "Duel.TossDice": {
        "prefix": "Duel.TossDice",
        "description": "•Duel.TossDice(int player, int count1[, int count2 = 0])\n让玩家player投count1次骰子[，1-player投count2次骰子](count1+count2<=5)  \n返回值为count1+count2个结果，1-6  \n",
        "body": "Duel.TossDice"
    },
    "Card.IsPosition": {
        "prefix": "Card.IsPosition",
        "description": "•Card.IsPosition(Card c, int pos)\n检查c是否是表示形式pos  \n",
        "body": "Card.IsPosition"
    },
    "Duel.GetActivityCount": {
        "prefix": "Duel.GetActivityCount",
        "description": "•Duel.GetActivityCount(int player, int activity_type, ...)\n返回player进行对应的activity_type操作的次数  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的放置）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的放置）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_BATTLE_PHASE   =6\t--进入战斗阶段  \n",
        "body": "Duel.GetActivityCount"
    },
    "LINK_MARKER_BOTTOM": {
        "prefix": "LINK_MARKER_BOTTOM",
        "description": "↓",
        "body": "LINK_MARKER_BOTTOM"
    },
    "EFFECT_DECREASE_TRIBUTE": {
        "prefix": "EFFECT_DECREASE_TRIBUTE",
        "description": "减少祭品",
        "body": "EFFECT_DECREASE_TRIBUTE"
    },
    "Duel.IsPlayerCanSpecialSummonMonster": {
        "prefix": "Duel.IsPlayerCanSpecialSummonMonster",
        "description": "•Duel.IsPlayerCanSpecialSummonMonster(int player, int code[, int setcode|nil, int type|nil, int atk|nil, int def|nil, int level|nil, int race|nil, int attribute|nil, int  pos=POS_FACEUP, int target_player=player, int sumtype=0])\n检查玩家player是否可以[以sumtype 方式][以 pos 表示形式]特殊召唤 给定参数的怪兽到target_player场上  \n此函数通常用于判定是否可以特招token和陷阱怪兽  \n",
        "body": "Duel.IsPlayerCanSpecialSummonMonster"
    },
    "EVENT_BATTLE_DAMAGE": {
        "prefix": "EVENT_BATTLE_DAMAGE",
        "description": "造成战斗伤害时",
        "body": "EVENT_BATTLE_DAMAGE"
    },
    "Effect.IsActivated": {
        "prefix": "Effect.IsActivated",
        "description": "•Effect.IsActivated(Effect e)\n检查效果e能否是发动的效果，也就是以下类型  \nEFFECT_TYPE_ACTIVATE\t\t=0x0010\t\t--魔陷发动  \nEFFECT_TYPE_FLIP\t\t\t=0x0020\t\t--翻转效果  \nEFFECT_TYPE_IGNITION\t\t=0x0040\t\t--起动效果  \nEFFECT_TYPE_TRIGGER_O\t\t=0x0080\t\t--诱发选发效果  \nEFFECT_TYPE_QUICK_O\t\t\t=0x0100\t\t--诱发即时效果  \nEFFECT_TYPE_TRIGGER_F\t\t=0x0200\t\t--诱发必发效果  \nEFFECT_TYPE_QUICK_F\t\t\t=0x0400\t\t--诱发即时必发效果（熊猫龙等）  \n",
        "body": "Effect.IsActivated"
    },
    "SwapControl": {
        "prefix": "SwapControl",
        "description": "•Duel.SwapControl(Card|Group targets1, Card|Group targets2[, int reset_phase=0, int reset_count=0])\n交换targets1与targets2的控制权，返回值表示是否成功  \n第三个第四个参数同 Duel.GetControl  \n",
        "body": "SwapControl"
    },
    "SendtoHand": {
        "prefix": "SendtoHand",
        "description": "•Duel.SendtoHand(Card|Group targets, int player|nil, int reason)\n以reason原因把targets送去玩家player的手牌，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的手牌  \n",
        "body": "SendtoHand"
    },
    "EVENT_SUMMON_SUCCESS": {
        "prefix": "EVENT_SUMMON_SUCCESS",
        "description": "通常召唤成功时",
        "body": "EVENT_SUMMON_SUCCESS"
    },
    "TIMING_BATTLE_START": {
        "prefix": "TIMING_BATTLE_START",
        "description": "战斗阶段开始时点",
        "body": "TIMING_BATTLE_START"
    },
    "sumreg": {
        "prefix": "sumreg",
        "description": "•aux.sumreg(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n妖仙兽 阎魔巳裂(39853199)和一些其他卡(49249907,93368494)用了此函数，就是注册一个flag，其实就是相当于  \nfunction Auxiliary.sumreg(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal tc=eg:GetFirst()  \n\tlocal code=e:GetLabel()  \n\twhile tc do  \n\t\tif tc:GetOriginalCode()==code then  \n\t\t\ttc:RegisterFlagEffect(code,RESET_EVENT+0x1ec0000+RESET_PHASE+PHASE_END,0,1)  \n\t\tend  \n\t\ttc=eg:GetNext()  \n\tend  \nend  \n",
        "body": "sumreg"
    },
    "POS_FACEUP": {
        "prefix": "POS_FACEUP",
        "description": "正面表示",
        "body": "POS_FACEUP"
    },
    "Duel.Activate": {
        "prefix": "Duel.Activate",
        "description": "•Duel.Activate(Effect e)\n发动效果e（？）  \n",
        "body": "Duel.Activate"
    },
    "IsPosition": {
        "prefix": "IsPosition",
        "description": "•Card.IsPosition(Card c, int pos)\n检查c是否是表示形式pos  \n",
        "body": "IsPosition"
    },
    "MustMaterialCounterFilter": {
        "prefix": "MustMaterialCounterFilter",
        "description": "•aux.MustMaterialCounterFilter(Card c, Group g)\n如果 g 中 包含 c ，则返回 false  \n",
        "body": "MustMaterialCounterFilter"
    },
    "REASON_RELEASE": {
        "prefix": "REASON_RELEASE",
        "description": "解放",
        "body": "REASON_RELEASE"
    },
    "aux.Stringid": {
        "prefix": "aux.Stringid",
        "description": "•aux.Stringid(int code, int id)\n用于索引卡号为code的卡片第id个（从0开始）效果提示  \n",
        "body": "aux.Stringid"
    },
    "EFFECT_CHANGE_ATTRIBUTE": {
        "prefix": "EFFECT_CHANGE_ATTRIBUTE",
        "description": "改变属性",
        "body": "EFFECT_CHANGE_ATTRIBUTE"
    },
    "EFFECT_EXTRA_SUMMON_COUNT": {
        "prefix": "EFFECT_EXTRA_SUMMON_COUNT",
        "description": "增加召唤（通常召唤）次数",
        "body": "EFFECT_EXTRA_SUMMON_COUNT"
    },
    "IsPlayerCanRemove": {
        "prefix": "IsPlayerCanRemove",
        "description": "•Duel.IsPlayerCanRemove(int player[, Card c, int reason=REASON_EFFECT])\n检查玩家player是否能除外[卡片 c]  \n",
        "body": "IsPlayerCanRemove"
    },
    "IsInGroup": {
        "prefix": "IsInGroup",
        "description": "•aux.IsInGroup(Card c, Group g)\nfunction Auxiliary.IsInGroup(c,g)  \n\treturn g:IsContains(c)  \nend  \n",
        "body": "IsInGroup"
    },
    "EFFECT_FLAG_FIELD_ONLY": {
        "prefix": "EFFECT_FLAG_FIELD_ONLY",
        "description": "此效果是注册给全局环境的",
        "body": "EFFECT_FLAG_FIELD_ONLY"
    },
    "Card.IsReason": {
        "prefix": "Card.IsReason",
        "description": "•Card.IsReason(Card c, int reason)\n检查c是否包含原因reason  \n",
        "body": "Card.IsReason"
    },
    "TYPE_FLIP": {
        "prefix": "TYPE_FLIP",
        "description": "翻转",
        "body": "TYPE_FLIP"
    },
    "EFFECT_TYPE_SINGLE": {
        "prefix": "EFFECT_TYPE_SINGLE",
        "description": "自己状态变化时触发",
        "body": "EFFECT_TYPE_SINGLE"
    },
    "TYPE_XYZ": {
        "prefix": "TYPE_XYZ",
        "description": "超量",
        "body": "TYPE_XYZ"
    },
    "GetPreviousDefenseOnField": {
        "prefix": "GetPreviousDefenseOnField",
        "description": "•Card.GetPreviousDefenseOnField(Card c)\n返回c位置变化之前在场上的守备力  \n",
        "body": "GetPreviousDefenseOnField"
    },
    "Card.CheckFusionSubstitute": {
        "prefix": "Card.CheckFusionSubstitute",
        "description": "•Card.CheckFusionSubstitute(Card c, Card fc)\n检查c能否代替融合怪兽fc的记述卡名的素材  \n",
        "body": "Card.CheckFusionSubstitute"
    },
    "AddFusionProcFunFun": {
        "prefix": "AddFusionProcFunFun",
        "description": "•aux.AddFusionProcFunFun(Card c, function f1, function f2, int cc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用满足过滤条件 f1 的1只怪兽 ，和满足过滤条件 f2 的 cc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,f1,table.unpack(fun)),fun 是包含 cc 个 满足条件 f2 的卡的表  \n",
        "body": "AddFusionProcFunFun"
    },
    "IsOriginalSetCard": {
        "prefix": "IsOriginalSetCard",
        "description": "•Card.IsOriginalSetCard(Card c, int setname)\n检查c是否是原本卡名含有setname的卡  \n",
        "body": "IsOriginalSetCard"
    },
    "EFFECT_SUMMON_COST": {
        "prefix": "EFFECT_SUMMON_COST",
        "description": "召唤代价",
        "body": "EFFECT_SUMMON_COST"
    },
    "EFFECT_NECRO_VALLEY_IM": {
        "prefix": "EFFECT_NECRO_VALLEY_IM",
        "description": "不受「王家长眠之谷」的影响",
        "body": "EFFECT_NECRO_VALLEY_IM"
    },
    "Effect.SetCost": {
        "prefix": "Effect.SetCost",
        "description": "•Effect.SetCost(Effect e, function cost_func)\n设置效果 e 的Cost属性  \n",
        "body": "Effect.SetCost"
    },
    "Card.IsDefenseBelow": {
        "prefix": "Card.IsDefenseBelow",
        "description": "•Card.IsDefenseBelow(Card c, int def)\n检查c是否是守备力def以下（至少为0）  \n",
        "body": "Card.IsDefenseBelow"
    },
    "IsFusionAttribute": {
        "prefix": "IsFusionAttribute",
        "description": "•Card.IsFusionAttribute(Card c, int attribute[, int player=PLAYER_NONE])\n检查c[由player融合召唤时]用作融合素材是否属于属性attribute  \n",
        "body": "IsFusionAttribute"
    },
    "GetActivateEffect": {
        "prefix": "GetActivateEffect",
        "description": "•Card.GetActivateEffect(Card c)\n返回c的“卡片发动”的效果，即类型为EFFECT_TYPE_ACTIVATE的效果  \n仅对魔法和陷阱有效  \n",
        "body": "GetActivateEffect"
    },
    "REASON_SPSUMMON": {
        "prefix": "REASON_SPSUMMON",
        "description": "特殊召唤",
        "body": "REASON_SPSUMMON"
    },
    "GetHandlerPlayer": {
        "prefix": "GetHandlerPlayer",
        "description": "•Effect.GetHandlerPlayer(Effect e)\n返回效果 e 的当前控制者，一般是Handle的控制者  \n",
        "body": "GetHandlerPlayer"
    },
    "SUMMON_TYPE_FLIP": {
        "prefix": "SUMMON_TYPE_FLIP",
        "description": "翻转召唤",
        "body": "SUMMON_TYPE_FLIP"
    },
    "SetTargetParam": {
        "prefix": "SetTargetParam",
        "description": "•Duel.SetTargetParam(inte param)\n把当前正在处理的连锁的对象参数设置成param  \n",
        "body": "SetTargetParam"
    },
    "Effect.GetFieldID": {
        "prefix": "Effect.GetFieldID",
        "description": "•Effect.GetFieldID(Effect e)\n获取效果e的id  \n",
        "body": "Effect.GetFieldID"
    },
    "Card.GetLinkedGroupCount": {
        "prefix": "Card.GetLinkedGroupCount",
        "description": "•Card.GetLinkedGroupCount(Card c)\n返回c的连接区的卡片组的卡的数量（目前只限怪兽区）  \n",
        "body": "Card.GetLinkedGroupCount"
    },
    "aux.AddFusionProcCode4": {
        "prefix": "aux.AddFusionProcCode4",
        "description": "•aux.AddFusionProcCode4(Card c, int code1, int code2, int code3, int code4, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为code1,code2,code3,code4的4只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2,code4)  \n",
        "body": "aux.AddFusionProcCode4"
    },
    "IsLinkAttribute": {
        "prefix": "IsLinkAttribute",
        "description": "•Card.IsLinkAttribute(Card c, int attribute[, int player=PLAYER_NONE])\n检查c[由player连接召唤时]用作连接素材是否属于属性attribute  \n",
        "body": "IsLinkAttribute"
    },
    "AddLinkProcedure": {
        "prefix": "AddLinkProcedure",
        "description": "•aux.AddLinkProcedure(Card c, function f|nil, int minc[, int maxc=99, function gf|nil])\n为c添加连接召唤手续  \n用 minc-maxc 个满足过滤条件 f [的卡片组里满足过滤条件 gf ]的怪兽作为连接素材  \n",
        "body": "AddLinkProcedure"
    },
    "aux.AddFusionProcCode3": {
        "prefix": "aux.AddFusionProcCode3",
        "description": "•aux.AddFusionProcCode3(Card c, int code1, int code2, int code3, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为code1,code2,code3的3只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2,code3)  \n",
        "body": "aux.AddFusionProcCode3"
    },
    "Card.IsOnField": {
        "prefix": "Card.IsOnField",
        "description": "•Card.IsOnField(Card c)\n检查c是否在场  \n注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，此函数返回false  \n",
        "body": "Card.IsOnField"
    },
    "aux.AddFusionProcCode2": {
        "prefix": "aux.AddFusionProcCode2",
        "description": "•aux.AddFusionProcCode2(Card c, int code1, int code2, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为code1和code2的2只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2)  \n",
        "body": "aux.AddFusionProcCode2"
    },
    "Group.IsContains": {
        "prefix": "Group.IsContains",
        "description": "•Group.IsContains(Group g, Card c)\n检查g中是否存在卡片c  \n",
        "body": "Group.IsContains"
    },
    "Card.GetColumnZone": {
        "prefix": "Card.GetColumnZone",
        "description": "•Card.GetColumnZone(Card c, int location[, int left, int right, int player])\n返回[以 player 来看的] location 范围内与 c 同一纵列[包含左边 left 列和右边 right 列]的区域，  \nlocation 的值是 LOCATION_MZONE,LOCATION_SZONE,LOCATIOIN_ONFIELD   \n",
        "body": "Card.GetColumnZone"
    },
    "SetTargetPlayer": {
        "prefix": "SetTargetPlayer",
        "description": "•Duel.SetTargetPlayer(int player)\n把当前正在处理的连锁的对象玩家设置成player  \n",
        "body": "SetTargetPlayer"
    },
    "aux.AddCodeList": {
        "prefix": "aux.AddCodeList",
        "description": "•aux.AddCodeList(Card c, int code1[, ...])\n为卡片 c 添加卡名记述  \n",
        "body": "aux.AddCodeList"
    },
    "SUMMON_TYPE_LINK": {
        "prefix": "SUMMON_TYPE_LINK",
        "description": "连接召唤",
        "body": "SUMMON_TYPE_LINK"
    },
    "EVENT_BATTLE_END": {
        "prefix": "EVENT_BATTLE_END",
        "description": "N/A",
        "body": "EVENT_BATTLE_END"
    },
    "EFFECT_SWAP_BASE_AD": {
        "prefix": "EFFECT_SWAP_BASE_AD",
        "description": "交换原本攻防",
        "body": "EFFECT_SWAP_BASE_AD"
    },
    "IsCanBeFusionMaterial": {
        "prefix": "IsCanBeFusionMaterial",
        "description": "•Card.IsCanBeFusionMaterial(Card c[, Card fc, int summon_type=SUMMON_TYPE_FUSION])\n检查c是否可以成为[融合怪兽fc的summon_type方式的]融合素材  \n",
        "body": "IsCanBeFusionMaterial"
    },
    "EVENT_PAY_LPCOST": {
        "prefix": "EVENT_PAY_LPCOST",
        "description": "支付生命值时",
        "body": "EVENT_PAY_LPCOST"
    },
    "EnableExtraDeckSummonCountLimit": {
        "prefix": "EnableExtraDeckSummonCountLimit",
        "description": "•aux.EnableExtraDeckSummonCountLimit()\n打开额外卡组召唤的数量限制， 数量为1 (?)  \n",
        "body": "EnableExtraDeckSummonCountLimit"
    },
    "LINK_MARKER_BOTTOM_RIGHT": {
        "prefix": "LINK_MARKER_BOTTOM_RIGHT",
        "description": "↘",
        "body": "LINK_MARKER_BOTTOM_RIGHT"
    },
    "TossDice": {
        "prefix": "TossDice",
        "description": "•Duel.TossDice(int player, int count1[, int count2 = 0])\n让玩家player投count1次骰子[，1-player投count2次骰子](count1+count2<=5)  \n返回值为count1+count2个结果，1-6  \n",
        "body": "TossDice"
    },
    "CheckEvent": {
        "prefix": "CheckEvent",
        "description": "•Duel.CheckEvent(int event[, bool get_info])\n检查当前是否是event时点  \n若get_info=true并且是正确的时点，则还返回触发时点的信息 eg,ep,ev,re,r,rp  \n",
        "body": "CheckEvent"
    },
    "Duel.PayLPCost": {
        "prefix": "Duel.PayLPCost",
        "description": "•Duel.PayLPCost(int player, int cost)\n让玩家player支付cost点lp  \n",
        "body": "Duel.PayLPCost"
    },
    "EFFECT_CANNOT_BE_XYZ_MATERIAL": {
        "prefix": "EFFECT_CANNOT_BE_XYZ_MATERIAL",
        "description": "不能做超量素材",
        "body": "EFFECT_CANNOT_BE_XYZ_MATERIAL"
    },
    "GetOriginalCodeRule": {
        "prefix": "GetOriginalCodeRule",
        "description": "•Card.GetOriginalCodeRule(Card c)\n返回c规则上的代号（这张卡规则上当作...使用）  \n",
        "body": "GetOriginalCodeRule"
    },
    "Effect.SetRange": {
        "prefix": "Effect.SetRange",
        "description": "•Effect.SetRange(Effect e, int range)\n设置效果 e 的Range属性，即e的生效位置  \n",
        "body": "Effect.SetRange"
    },
    "GetUnionCount": {
        "prefix": "GetUnionCount",
        "description": "•Card.GetUnionCount(Card c)\n返回c当前装备的同盟卡数量  \n第二个返回值是 旧同盟 的数量   \n",
        "body": "GetUnionCount"
    },
    "LOCATION_MZONE": {
        "prefix": "LOCATION_MZONE",
        "description": "怪兽区",
        "body": "LOCATION_MZONE"
    },
    "AddRitualProcEqual2Code": {
        "prefix": "AddRitualProcEqual2Code",
        "description": "•aux.AddRitualProcEqual2Code(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \ncode1 为仪式怪兽卡号，素材的等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcEqual2(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcEqual2Code"
    },
    "HALF_DAMAGE": {
        "prefix": "HALF_DAMAGE",
        "body": "HALF_DAMAGE"
    },
    "RESET_OPPO_TURN": {
        "prefix": "RESET_OPPO_TURN",
        "description": "对方回合的階段重置",
        "body": "RESET_OPPO_TURN"
    },
    "EFFECT_DIRECT_ATTACK": {
        "prefix": "EFFECT_DIRECT_ATTACK",
        "description": "可以直接攻击",
        "body": "EFFECT_DIRECT_ATTACK"
    },
    "CATEGORY_DEFCHANGE": {
        "prefix": "CATEGORY_DEFCHANGE",
        "description": "改变防御效果",
        "body": "CATEGORY_DEFCHANGE"
    },
    "GetFusionMaterial": {
        "prefix": "GetFusionMaterial",
        "description": "•Duel.GetFusionMaterial(int player)\n返回玩家player可用的用于融合召唤素材的卡片组  \n包含手卡·场上的怪兽的以及受 EFFECT_EXTRA_FUSION_MATERIAL 影响的卡  \n",
        "body": "GetFusionMaterial"
    },
    "Card.IsAbleToExtraAsCost": {
        "prefix": "Card.IsAbleToExtraAsCost",
        "description": "•Card.IsAbleToExtraAsCost(Card c)\n检查c是否可以作为cost送去额外卡组，主卡组的灵摆卡会返回false  \n",
        "body": "Card.IsAbleToExtraAsCost"
    },
    "GetTributeGroup": {
        "prefix": "GetTributeGroup",
        "description": "•Duel.GetTributeGroup(Card c)\n返回场上用于通常召唤c可解放（上级召唤用）的卡片组  \n",
        "body": "GetTributeGroup"
    },
    "EFFECT_DISABLE_TRAPMONSTER": {
        "prefix": "EFFECT_DISABLE_TRAPMONSTER",
        "description": "陷阱怪兽无效",
        "body": "EFFECT_DISABLE_TRAPMONSTER"
    },
    "EFFECT_INDESTRUCTABLE": {
        "prefix": "EFFECT_INDESTRUCTABLE",
        "description": "不会被破坏",
        "body": "EFFECT_INDESTRUCTABLE"
    },
    "aux.AddRitualProcEqual": {
        "prefix": "aux.AddRitualProcEqual",
        "description": "•aux.AddRitualProcEqual(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和必须等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetOriginalLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcEqual"
    },
    "ATTRIBUTE_WIND": {
        "prefix": "ATTRIBUTE_WIND",
        "description": "风",
        "body": "ATTRIBUTE_WIND"
    },
    "EFFECT_QP_ACT_IN_SET_TURN": {
        "prefix": "EFFECT_QP_ACT_IN_SET_TURN",
        "description": "速攻魔法可以在盖放的回合发动",
        "body": "EFFECT_QP_ACT_IN_SET_TURN"
    },
    "TIMING_TOHAND": {
        "prefix": "TIMING_TOHAND",
        "description": "加入手牌时点（检索、回收等）",
        "body": "TIMING_TOHAND"
    },
    "PreAddCounter": {
        "prefix": "PreAddCounter",
        "description": "•Debug.PreAddCounter(Card c, int counter_type[, int count=0])\n为c添加count个counter_type的指示物  \n",
        "body": "PreAddCounter"
    },
    "HINTMSG_CONFIRM": {
        "prefix": "HINTMSG_CONFIRM",
        "description": "请选择给对方确认的卡",
        "body": "HINTMSG_CONFIRM"
    },
    "aux.bpcon": {
        "prefix": "aux.bpcon",
        "description": "•aux.bpcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测能否进入战斗阶段 或者 是否已经在战斗阶段内 的简单写法 SetCondition  \nfunction Auxiliary.bpcon(e,tp,eg,ep,ev,re,r,rp)  \n\treturn Duel.IsAbleToEnterBP() or (Duel.GetCurrentPhase()>=PHASE_BATTLE_START and Duel.GetCurrentPhase()<=PHASE_BATTLE)  \nend  \n",
        "body": "aux.bpcon"
    },
    "aux.dabcheck": {
        "prefix": "aux.dabcheck",
        "description": "•aux.dabcheck(Group g)\n检测卡片组 g 中是否有相同属性的卡的简单写法，返回值如果为 true 表示没有相同属性卡  \nfunction Auxiliary.dabcheck(g)  \n\treturn g:GetClassCount(Card.GetAttribute)==#g  \nend  \n",
        "body": "aux.dabcheck"
    },
    "CATEGORY_TOGRAVE": {
        "prefix": "CATEGORY_TOGRAVE",
        "description": "送去墓地效果",
        "body": "CATEGORY_TOGRAVE"
    },
    "GetMutualLinkedZone": {
        "prefix": "GetMutualLinkedZone",
        "description": "•Card.GetMutualLinkedZone(Card c[, int player=c:GetControler()])\n返回[以 player 来看的]与卡片 c 互相连接的卡 所在的区域   \n",
        "body": "GetMutualLinkedZone"
    },
    "Card.IsLinkCode": {
        "prefix": "Card.IsLinkCode",
        "description": "•Card.IsLinkCode(Card c, int code[,...])\n检查c作为link素材时能否当作卡号为code的卡，额外参数是其他code  \n",
        "body": "Card.IsLinkCode"
    },
    "Duel.NegateActivation": {
        "prefix": "Duel.NegateActivation",
        "description": "•Duel.NegateActivation(int chainc)\n使连锁chainc的发动无效，返回值表示是否成功  \nchainc=0 表示当前效果  \n",
        "body": "Duel.NegateActivation"
    },
    "STATUS_DESTROY_CONFIRMED": {
        "prefix": "STATUS_DESTROY_CONFIRMED",
        "description": "破坏确定",
        "body": "STATUS_DESTROY_CONFIRMED"
    },
    "EFFECT_FLIPSUMMON_COST": {
        "prefix": "EFFECT_FLIPSUMMON_COST",
        "description": "翻转召唤代价",
        "body": "EFFECT_FLIPSUMMON_COST"
    },
    "EVENT_BATTLE_DESTROYING": {
        "prefix": "EVENT_BATTLE_DESTROYING",
        "description": "以战斗破坏怪兽送去墓地时（BF-苍炎之修罗）",
        "body": "EVENT_BATTLE_DESTROYING"
    },
    "Duel.RegisterEffect": {
        "prefix": "Duel.RegisterEffect",
        "description": "•Duel.RegisterEffect(Effect e, int player)\n把效果e作为玩家player的效果注册给全局环境  \n",
        "body": "Duel.RegisterEffect"
    },
    "EnableDualAttribute": {
        "prefix": "EnableDualAttribute",
        "description": "•aux.EnableDualAttribute(Card c)\n为c添加二重怪兽属性  \n",
        "body": "EnableDualAttribute"
    },
    "CheckFusionSubstitute": {
        "prefix": "CheckFusionSubstitute",
        "description": "•Card.CheckFusionSubstitute(Card c, Card fc)\n检查c能否代替融合怪兽fc的记述卡名的素材  \n",
        "body": "CheckFusionSubstitute"
    },
    "Card.CompleteProcedure": {
        "prefix": "Card.CompleteProcedure",
        "description": "•Card.CompleteProcedure(Card c)\n使c完成正规的召唤手续  \n##此函数也可通过 c:SetStatus(STATUS_PROC_COMPLETE,true)实现  \n",
        "body": "Card.CompleteProcedure"
    },
    "EFFECT_DISABLE_CHAIN": {
        "prefix": "EFFECT_DISABLE_CHAIN",
        "description": "在連鎖串中無效(processor.cpp)",
        "body": "EFFECT_DISABLE_CHAIN"
    },
    "Duel.AdjustInstantly": {
        "prefix": "Duel.AdjustInstantly",
        "description": "•Duel.AdjustInstantly([Card c])\n手动刷新场上[受到卡片c影响]的卡的无效状态  \n",
        "body": "Duel.AdjustInstantly"
    },
    "Card.IsAbleToGraveAsCost": {
        "prefix": "Card.IsAbleToGraveAsCost",
        "description": "•Card.IsAbleToGraveAsCost(Card c)\n检查c是否可以作为cost送去墓地  \n",
        "body": "Card.IsAbleToGraveAsCost"
    },
    "SetFusionMaterial": {
        "prefix": "SetFusionMaterial",
        "description": "•Duel.SetFusionMaterial(Group g)\n设置g为需要使用的融合素材  \n",
        "body": "SetFusionMaterial"
    },
    "Card.CheckFusionMaterial": {
        "prefix": "Card.CheckFusionMaterial",
        "description": "•Card.CheckFusionMaterial(Card c[, Group mg|nil, Card gc|nil, int chkf=PLAYER_NONE, int not_material=FALSE])\n检查场上[或mg]是否包含了c需要[必须包含gc在内]的一组融合素材  \n##根据c的种类为EFFECT_FUSION_MATERIAL的效果的Condition函数检查  \n",
        "body": "Card.CheckFusionMaterial"
    },
    "Effect.CreateEffect": {
        "prefix": "Effect.CreateEffect",
        "description": "•Effect.CreateEffect(Card c)\n新建一个空效果  \n并且效果的Owner为c  \n",
        "body": "Effect.CreateEffect"
    },
    "TYPE_NORMAL": {
        "prefix": "TYPE_NORMAL",
        "description": "通常怪兽",
        "body": "TYPE_NORMAL"
    },
    "Duel.ChangeAttacker": {
        "prefix": "Duel.ChangeAttacker",
        "description": "•Duel.ChangeAttacker(Card c[, bool ignore_count=false])\n将攻击怪兽变为c  \n若 ignore_count=true 则原来的攻击怪兽不视为攻击过  \n",
        "body": "Duel.ChangeAttacker"
    },
    "GetDiceResult": {
        "prefix": "GetDiceResult",
        "description": "•Duel.GetDiceResult()\n返回当前掷骰子的结果  \n",
        "body": "GetDiceResult"
    },
    "Summon": {
        "prefix": "Summon",
        "description": "•Duel.Summon(int player, Card c, bool ignore_count, Effect e|nil[, int min=0, int zone=0x1f])\n让玩家 player 以效果e对卡片c[在区域 zone]进行通常召唤(非set)，至少使用min个祭品  \n如果e=nil,那么就按照一般的通常召唤规则进行通常召唤  \n如果ignore_count=true，则忽略每回合的通常召唤次数限制  \n",
        "body": "Summon"
    },
    "Effect.SetCode": {
        "prefix": "Effect.SetCode",
        "description": "•Effect.SetCode(Effect e, int code)\n设置效果 e 的Code属性  \n",
        "body": "Effect.SetCode"
    },
    "EFFECT_COUNTER_LIMIT": {
        "prefix": "EFFECT_COUNTER_LIMIT",
        "description": "允许放置指示物数量",
        "body": "EFFECT_COUNTER_LIMIT"
    },
    "EFFECT_HAND_SYNCHRO": {
        "prefix": "EFFECT_HAND_SYNCHRO",
        "description": "用手牌的怪獸當作同步素材",
        "body": "EFFECT_HAND_SYNCHRO"
    },
    "RACE_WINDBEAST": {
        "prefix": "RACE_WINDBEAST",
        "description": "鸟兽",
        "body": "RACE_WINDBEAST"
    },
    "EFFECT_AVOID_BATTLE_DAMAGE": {
        "prefix": "EFFECT_AVOID_BATTLE_DAMAGE",
        "description": "不会对自己造成战斗伤害",
        "body": "EFFECT_AVOID_BATTLE_DAMAGE"
    },
    "Card.IsExtraLinkState": {
        "prefix": "Card.IsExtraLinkState",
        "description": "•Card.IsExtraLinkState(Card c)\n检查c是否是额外连接状态  \n",
        "body": "Card.IsExtraLinkState"
    },
    "GetPreviousTypeOnField": {
        "prefix": "GetPreviousTypeOnField",
        "description": "•Card.GetPreviousTypeOnField(Card c)\n返回c位置变化之前在场上的类型  \n",
        "body": "GetPreviousTypeOnField"
    },
    "Card.GetPreviousSequence": {
        "prefix": "Card.GetPreviousSequence",
        "description": "•Card.GetPreviousSequence(Card c)\n返回c位置变化前的序号  \n",
        "body": "Card.GetPreviousSequence"
    },
    "EFFECT_FLAG_SPSUM_PARAM": {
        "prefix": "EFFECT_FLAG_SPSUM_PARAM",
        "description": "指定召喚/规则特殊召唤的位置和表示形式(熔岩魔神)",
        "body": "EFFECT_FLAG_SPSUM_PARAM"
    },
    "aux.dlvcheck": {
        "prefix": "aux.dlvcheck",
        "description": "•aux.dlvcheck(Group g)\n检测卡片组 g 中是否有相同等级的卡的简单写法，返回值如果为 true 表示没有相同等级卡  \nfunction Auxiliary.dlvcheck(g)  \n\treturn g:GetClassCount(Card.GetLevel)==#g  \nend  \n",
        "body": "aux.dlvcheck"
    },
    "HINT_EFFECT": {
        "prefix": "HINT_EFFECT",
        "body": "HINT_EFFECT"
    },
    "SetRange": {
        "prefix": "SetRange",
        "description": "•Effect.SetRange(Effect e, int range)\n设置效果 e 的Range属性，即e的生效位置  \n",
        "body": "SetRange"
    },
    "Duel.SetChainLimit": {
        "prefix": "Duel.SetChainLimit",
        "description": "•Duel.SetChainLimit(function f)\n设定连锁条件，f的函数原型为 bool f(e,ep,tp)  \ne表示要限制连锁的效果，ep表示要限制连锁的玩家，tp表示发动该效果的玩家  \n在cost或者target处理中调用此函数可以限制可以连锁的效果的种类（如超融合）  \n如果f返回false表示不能连锁，一旦设置连锁条件后发生了新的连锁那么连锁条件将会解除  \n",
        "body": "Duel.SetChainLimit"
    },
    "CheckTunerMaterial": {
        "prefix": "CheckTunerMaterial",
        "description": "•Duel.CheckTunerMaterial(Card c, Card tuner, function f1|nil, function f2|nil, int min, int max[, Group mg|nil])\n检查场上[或mg中]是否存在一组以tuner作为调整,并且满足条件的卡作为同调召唤c的素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \n",
        "body": "CheckTunerMaterial"
    },
    "ExceptThisCard": {
        "prefix": "ExceptThisCard",
        "description": "•aux.ExceptThisCard(Effect e)\n若 e:GetHandler() 与效果 e 有联系，则返回 e:GetHandler() ,否则返回 nil  \nfunction Auxiliary.ExceptThisCard(e)  \n\tlocal c=e:GetHandler()  \n\tif c:IsRelateToEffect(e) then return c else return nil end  \nend  \n",
        "body": "ExceptThisCard"
    },
    "Duel.DisableShuffleCheck": {
        "prefix": "Duel.DisableShuffleCheck",
        "description": "•Duel.DisableShuffleCheck([bool disable=true])\n使下一个操作不检查是否需要洗切卡组或手卡  \n注：如果不调用此函数，  \n除了调用Duel.DiscardDeck和Duel.Draw之外从卡组中取出卡或者把卡加入手卡  \n或者把卡加入卡组（非最上端或最底端）时，系统会自动在效果处理结束时洗切卡组或手卡  \n如果不希望如此，比如从卡组顶端除外一张卡等操作，那么需要调用此函数  \n此函数仅保证紧接着的一次操作不会进行洗卡检测  \n",
        "body": "Duel.DisableShuffleCheck"
    },
    "RACE_ROCK": {
        "prefix": "RACE_ROCK",
        "description": "岩石",
        "body": "RACE_ROCK"
    },
    "EFFECT_REVERSE_RECOVER": {
        "prefix": "EFFECT_REVERSE_RECOVER",
        "description": "回复变伤害",
        "body": "EFFECT_REVERSE_RECOVER"
    },
    "Duel.RemoveOverlayCard": {
        "prefix": "Duel.RemoveOverlayCard",
        "description": "•Duel.RemoveOverlayCard(int player, int s, int o, int min, int max, int reason)\n让player以reason原因移除以player来看的指定位置的min-max张叠放卡，返回值表示取除的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n",
        "body": "Duel.RemoveOverlayCard"
    },
    "GetTurnCounter": {
        "prefix": "GetTurnCounter",
        "description": "•Card.GetTurnCounter(Card c)\n返回c的回合计数器  \n",
        "body": "GetTurnCounter"
    },
    "NegateRelatedChain": {
        "prefix": "NegateRelatedChain",
        "description": "•Duel.NegateRelatedChain(Card c, int reset)\n使和卡片c有关的连锁都无效化，发生reset事件则重置,reset 默认包含 RESET_CHAIN  \n",
        "body": "NegateRelatedChain"
    },
    "xyzlimit": {
        "prefix": "xyzlimit",
        "description": "•aux.xyzlimit(Effect e, Effect se, int sp, int st)\n不能用 超量召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.xyzlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_XYZ==SUMMON_TYPE_XYZ  \nend  \n",
        "body": "xyzlimit"
    },
    "Effect.SetCondition": {
        "prefix": "Effect.SetCondition",
        "description": "•Effect.SetCondition(Effect e, function con_func)\n设置效果 e 的Condition属性  \n",
        "body": "Effect.SetCondition"
    },
    "Card.IsLevelBelow": {
        "prefix": "Card.IsLevelBelow",
        "description": "•Card.IsLevelBelow(Card c, int level)\n检查c是否是等级level以下（至少为1）  \n",
        "body": "Card.IsLevelBelow"
    },
    "EFFECT_EXTRA_SET_COUNT": {
        "prefix": "EFFECT_EXTRA_SET_COUNT",
        "description": "增加盖放（通常召唤）次数",
        "body": "EFFECT_EXTRA_SET_COUNT"
    },
    "DUEL_OBSOLETE_RULING": {
        "prefix": "DUEL_OBSOLETE_RULING",
        "description": "使用舊規則",
        "body": "DUEL_OBSOLETE_RULING"
    },
    "Duel.ShuffleHand": {
        "prefix": "Duel.ShuffleHand",
        "description": "•Duel.ShuffleHand(int player)\n手动洗切玩家player的手卡  \n注：会重置洗卡检测的状态  \n",
        "body": "Duel.ShuffleHand"
    },
    "ATTRIBUTE_DARK": {
        "prefix": "ATTRIBUTE_DARK",
        "description": "暗",
        "body": "ATTRIBUTE_DARK"
    },
    "AddContactFusionProcedure": {
        "prefix": "AddContactFusionProcedure",
        "description": "•aux.AddContactFusionProcedure(Card c, function filter, int self_location, int opponent_location, any mat_operation[, ...])\n为c 添加接触融合手续。  \nfilter 表示素材的过滤条件  \nself_location, opponent_location 表示以c:GetControler() 来看的自己，对方的区域  \nmat_operation 表示要对素材进行的操作  \n",
        "body": "AddContactFusionProcedure"
    },
    "GetMaterialCount": {
        "prefix": "GetMaterialCount",
        "description": "•Card.GetMaterialCount(Card c)\n返回c出场使用的素材数量  \n",
        "body": "GetMaterialCount"
    },
    "AddCard": {
        "prefix": "AddCard",
        "description": "•Group.AddCard(Group g, Card c)\n往卡片组g中增加卡片c  \n\n•Debug.AddCard(int code, int owner, int player, int location, int seq, int pos[, bool proc=false])\n添加卡片，将卡号为code的卡片的持有者设置为owner，以表示形式pos放置在player的场上位于location上序号为seq的格子处  \nproc=true则完成正规召唤程序(即解除苏生限制)  \n\n",
        "body": "AddCard"
    },
    "ReloadFieldBegin": {
        "prefix": "ReloadFieldBegin",
        "description": "•Debug.ReloadFieldBegin(int flag[, int rule=3])\n以选项flag开始布局  \n\tflag 残局： DUEL_ATTACK_FIRST_TURN+DUEL_SIMPLE_AI  \n\t\t 大师1规则： DUEL_OBSOLETE_RULING  \n\trule=4 是新大师规则  \n",
        "body": "ReloadFieldBegin"
    },
    "Card.IsLinkAbove": {
        "prefix": "Card.IsLinkAbove",
        "description": "•Card.IsLinkAbove(Card c, int link)\n检查c是否连接标记数量是link以上  \n",
        "body": "Card.IsLinkAbove"
    },
    "RemoveCard": {
        "prefix": "RemoveCard",
        "description": "•Group.RemoveCard(Group g, Card c)\n把卡片c从卡片组g中移除  \n",
        "body": "RemoveCard"
    },
    "IsPublic": {
        "prefix": "IsPublic",
        "description": "•Card.IsPublic(Card c)\n检查c是否处于公开状态  \n",
        "body": "IsPublic"
    },
    "ConfirmCards": {
        "prefix": "ConfirmCards",
        "description": "•Duel.ConfirmCards(int player, Card|Group targets)\n给玩家player确认targets  \n",
        "body": "ConfirmCards"
    },
    "Duel.Draw": {
        "prefix": "Duel.Draw",
        "description": "•Duel.Draw(int player, int count, int reason)\n让玩家player以原因reason抽count张卡，返回实际抽的卡的数量  \n如果reason含有REASON_RULE则此次抽卡不受“不能抽卡”的效果的影响  \n",
        "body": "Duel.Draw"
    },
    "Duel.SetTargetCard": {
        "prefix": "Duel.SetTargetCard",
        "description": "•Duel.SetTargetCard(Card|Group targets)\n把当前正在处理的连锁的对象设置成targets  \n注，这里的对象指的的广义的对象，包括不取对象的效果可能要处理的对象  \n",
        "body": "Duel.SetTargetCard"
    },
    "Reset": {
        "prefix": "Reset",
        "description": "•Effect.Reset(Effect e)\n把效果e重置，重置之后不可以再使用此效果  \n",
        "body": "Reset"
    },
    "CATEGORY_LEAVE_GRAVE": {
        "prefix": "CATEGORY_LEAVE_GRAVE",
        "description": "涉及墓地的效果(王家長眠之谷)",
        "body": "CATEGORY_LEAVE_GRAVE"
    },
    "EFFECT_CANNOT_DISABLE": {
        "prefix": "EFFECT_CANNOT_DISABLE",
        "description": "效果不能被无效",
        "body": "EFFECT_CANNOT_DISABLE"
    },
    "Card.GetUnionCount": {
        "prefix": "Card.GetUnionCount",
        "description": "•Card.GetUnionCount(Card c)\n返回c当前装备的同盟卡数量  \n第二个返回值是 旧同盟 的数量   \n",
        "body": "Card.GetUnionCount"
    },
    "IsChainAttackable": {
        "prefix": "IsChainAttackable",
        "description": "•Card.IsChainAttackable(Card c[, int ac = 2, bool monsteronly = false])\n检查c是否可以连续攻击，c的攻击宣言次数>=ac则返回false  \nmonsteronly = true 则表示只能对怪兽攻击  \n注：当c因为闪光之双剑等效果进行过多次攻击之后此函数返回false  \n",
        "body": "IsChainAttackable"
    },
    "Duel.Recover": {
        "prefix": "Duel.Recover",
        "description": "•Duel.Recover(int player, int value, int reason[, bool is_step=false])\n以reason原因使玩家player回复value的LP，返回实际的回复值  \n如果受到回复变成伤害等效果的影响时，返回值为0.  \nis_step为true则是伤害/恢复LP过程的分解，需要调用Duel.RDComplete()触发时点  \n",
        "body": "Duel.Recover"
    },
    "Card.GetRightScale": {
        "prefix": "Card.GetRightScale",
        "description": "•Card.GetRightScale(Card c)\n返回c的右灵摆刻度  \n",
        "body": "Card.GetRightScale"
    },
    "aux.AddRitualProcGreater": {
        "prefix": "aux.AddRitualProcGreater",
        "description": "•aux.AddRitualProcGreater(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetOriginalLevel,\"Greater\",summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcGreater"
    },
    "Group.__len": {
        "prefix": "Group.__len",
        "description": "•Group.__len(Group g)\n和 Group.GetCount 一样  \n",
        "body": "Group.__len"
    },
    "ReturnToField": {
        "prefix": "ReturnToField",
        "description": "•Duel.ReturnToField(Card c[, int pos, int zone=0xff])\n把c[以表示形式pos]返回到场上[的区域 zone]，pos默认值是离场前的表示形式，返回值表示是否成功  \nc必须是以REASON_TEMPORARY原因离场，并且离场后没有离开过那个位置  \n",
        "body": "ReturnToField"
    },
    "GetAttack": {
        "prefix": "GetAttack",
        "description": "•Card.GetAttack(Card c)\n返回c的当前攻击力  \n",
        "body": "GetAttack"
    },
    "Group.FilterSelect": {
        "prefix": "Group.FilterSelect",
        "description": "•Group.FilterSelect(Group g, int player, function f, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家player从卡片组g中选择 min-max 张满足筛选条件f并且不等于ex的卡  \n从第7个参数开始为额外参数  \n",
        "body": "Group.FilterSelect"
    },
    "STATUS_INITIALIZING": {
        "prefix": "STATUS_INITIALIZING",
        "description": "初始化..",
        "body": "STATUS_INITIALIZING"
    },
    "Effect.SetTargetRange": {
        "prefix": "Effect.SetTargetRange",
        "description": "•Effect.SetTargetRange(Effect e, int s_range, int o_range)\n设置效果 e 的Target Range属性  \n\ts_range指影响的我方区域  \n\to_range值影响的对方区域  \n\t如果property属性中指定了EFFECT_FLAG_ABSOLUTE_RANGE标志，  \n\t\t那么s_range指玩家1受到影响的区域，o_range指玩家2受到影响的区域  \n\t如果这是一个召唤(覆盖)/限制召唤(覆盖)/特殊召唤手续  \n\t(EFFECT_SUMMON_PROC/EFFECT_LIMIT_SUMMON_PROC/EFFECT_SPSUMMON_PROC等)的效果，  \n\t\t并且property指定了EFFECT_FLAG_SPSUM_PARAM标志，  \n\t\t那么s_range表示特殊召唤到的哪个玩家的场地，  \n\to_range表示可选择的表示形式  \n",
        "body": "Effect.SetTargetRange"
    },
    "RESETS_REDIRECT": {
        "prefix": "RESETS_REDIRECT",
        "description": "RESETS_STANDARD+RESET_OVERLAY+RESET_MSCHANGE-RESET_TOFIELD-RESET_LEAVE (EFFECT_LEAVE_FIELD_REDIRECT)",
        "body": "RESETS_REDIRECT"
    },
    "IsLinkSetCard": {
        "prefix": "IsLinkSetCard",
        "description": "•Card.IsLinkSetCard(Card c, int setname)\n检查c作为link素材时能否当作名字含有setname的卡  \n",
        "body": "IsLinkSetCard"
    },
    "ReloadFieldEnd": {
        "prefix": "ReloadFieldEnd",
        "description": "•Debug.ReloadFieldEnd()\n布局结束  \n",
        "body": "ReloadFieldEnd"
    },
    "EFFECT_SET_BASE_ATTACK": {
        "prefix": "EFFECT_SET_BASE_ATTACK",
        "description": "设置原本攻击力",
        "body": "EFFECT_SET_BASE_ATTACK"
    },
    "SynchroSummon": {
        "prefix": "SynchroSummon",
        "description": "•Duel.SynchroSummon(int player, Card c, Card tuner|nil[, Group mg|nil, int minc=0, int maxc=0])\n让玩家player以tuner作为调整,场上[或mg][minc-maxc 张]的卡为素材，对c进行同调召唤手续  \n",
        "body": "SynchroSummon"
    },
    "Card.GetColumnGroup": {
        "prefix": "Card.GetColumnGroup",
        "description": "•Card.GetColumnGroup(Card c)\n返回与c同一纵列的c以外的卡片组  \n",
        "body": "Card.GetColumnGroup"
    },
    "EFFECT_FLAG_INITIAL": {
        "prefix": "EFFECT_FLAG_INITIAL",
        "description": "可以发动的",
        "body": "EFFECT_FLAG_INITIAL"
    },
    "IsOnField": {
        "prefix": "IsOnField",
        "description": "•Card.IsOnField(Card c)\n检查c是否在场  \n注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，此函数返回false  \n",
        "body": "IsOnField"
    },
    "MIN_ID": {
        "prefix": "MIN_ID",
        "description": "4 digit, by DataManager::GetDesc()",
        "body": "MIN_ID"
    },
    "Duel.CheckEvent": {
        "prefix": "Duel.CheckEvent",
        "description": "•Duel.CheckEvent(int event[, bool get_info])\n检查当前是否是event时点  \n若get_info=true并且是正确的时点，则还返回触发时点的信息 eg,ep,ev,re,r,rp  \n",
        "body": "Duel.CheckEvent"
    },
    "GetMatchingGroup": {
        "prefix": "GetMatchingGroup",
        "description": "•Duel.GetMatchingGroup(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n",
        "body": "GetMatchingGroup"
    },
    "Duel.CheckXyzMaterial": {
        "prefix": "Duel.CheckXyzMaterial",
        "description": "•Duel.CheckXyzMaterial(Card c, function f|nil, int lv, int min, int max, Group mg|nil)\n检查场上[或mg中]是否存在用于超量召唤c的超量用等级为lv的min-max个满足条件f的叠放素材  \n",
        "body": "Duel.CheckXyzMaterial"
    },
    "Group.GetFirst": {
        "prefix": "Group.GetFirst",
        "description": "•Group.GetFirst(Group g)\n返回卡片组g中第一张卡，并重置当前指针到g中第一张卡  \n如果g中不存在卡则返回nil  \n",
        "body": "Group.GetFirst"
    },
    "CheckWithSumEqual": {
        "prefix": "CheckWithSumEqual",
        "description": "•Group.CheckWithSumEqual(Group g, function f, int sum, int min=0, int max, ...)\n子集求和判定函数，f为返回一个interger值的函数  \n检查卡片组g中是否存在一个数量为min-max的子集满足以f对子集的每一个元素求值的和等于sum，从第6个参数开始为额外参数  \n\t比如：g:CheckWithSumEqual(Card.GetSynchroLevel,7,2,99)  \n\t检查g中是否存在一个子集元素数量在2-99之间的子集，并且满足子集的同调用等级之和等于7  \n",
        "body": "CheckWithSumEqual"
    },
    "Card.IsHasCardTarget": {
        "prefix": "Card.IsHasCardTarget",
        "description": "•Card.IsHasCardTarget(Card c1, Card c2)\n检查c2是否取c1为永续对象  \n",
        "body": "Card.IsHasCardTarget"
    },
    "IsXyzSummonable": {
        "prefix": "IsXyzSummonable",
        "description": "•Card.IsXyzSummonable(Card c, Group mg|nil[, minc=0, maxc=0])\n检查是否可以在场上的卡[或mg][中选出 minc-maxc 个超量素材]对c进行超量召唤手续  \n如果mg为nil，此函数与 c:IsSpecialSummonable(SUMMON_TYPE_XYZ)作用相同  \nc 如果不是超量会返回 false  \n",
        "body": "IsXyzSummonable"
    },
    "SetDiceResult": {
        "prefix": "SetDiceResult",
        "description": "•Duel.SetDiceResult(int res, ...)\n强行修改投骰子的结果为res ,最多5个参数，res只能是 1~255, ，其他数字全算作 1  \n此函数用于永续的EVENT_TOSS_DICE事件中  \n",
        "body": "SetDiceResult"
    },
    "EFFECT_FUSION_MATERIAL": {
        "prefix": "EFFECT_FUSION_MATERIAL",
        "description": "指定融合素材的條件",
        "body": "EFFECT_FUSION_MATERIAL"
    },
    "Card.IsAbleToDeck": {
        "prefix": "Card.IsAbleToDeck",
        "description": "•Card.IsAbleToDeck(Card c)\n检查c是否可以送去卡组  \n",
        "body": "Card.IsAbleToDeck"
    },
    "STATUS_ACTIVATED": {
        "prefix": "STATUS_ACTIVATED",
        "description": "N/A",
        "body": "STATUS_ACTIVATED"
    },
    "EFFECT_REMAIN_FIELD": {
        "prefix": "EFFECT_REMAIN_FIELD",
        "description": "X回合内留在场上（光之护封剑等）",
        "body": "EFFECT_REMAIN_FIELD"
    },
    "Duel.GetExtraTopGroup": {
        "prefix": "Duel.GetExtraTopGroup",
        "description": "•Duel.GetExtraTopGroup(int player, int count)\n返回玩家player的额外卡组表侧表示的卡中最上方的count张卡  \n",
        "body": "Duel.GetExtraTopGroup"
    },
    "aux.mzctcheckrel": {
        "prefix": "aux.mzctcheckrel",
        "description": "•aux.mzctcheckrel(Group g, int tp)\n检测玩家 tp 场上是否有卡片组 g 离开后可用的主要怪兽区格子，并且检测卡片组 g 能否解放 的简单写法  \nfunction Auxiliary.mzctcheckrel(g,tp)  \n\treturn Duel.GetMZoneCount(tp,g)>0 and Duel.CheckReleaseGroup(tp,Auxiliary.IsInGroup,#g,nil,g)  \nend  \n",
        "body": "aux.mzctcheckrel"
    },
    "Duel.IsPlayerCanSendtoGrave": {
        "prefix": "Duel.IsPlayerCanSendtoGrave",
        "description": "•Duel.IsPlayerCanSendtoGrave(int player[, Card c])\n检查玩家是否能把卡片[c]送去墓地  \n",
        "body": "Duel.IsPlayerCanSendtoGrave"
    },
    "AnnounceRace": {
        "prefix": "AnnounceRace",
        "description": "•Duel.AnnounceRace(int player, int count, int available)\n让玩家player从可选的种族中宣言count个种族  \navailable是所有可选种族的组合值，可以自行组合  \n可以直接将名字相加，比如 RACE_WARRIOR+RACE_SPELLCASTER  \nRACE_ALL\t\t\t=0x1ffffff\t--全种族  \nRACE_WARRIOR\t\t=0x1\t\t--战士  \nRACE_SPELLCASTER\t=0x2\t\t--魔法师  \nRACE_FAIRY\t\t\t=0x4\t\t--天使  \nRACE_FIEND\t\t\t=0x8\t\t--恶魔  \nRACE_ZOMBIE\t\t\t=0x10\t\t--不死  \nRACE_MACHINE\t\t=0x20\t\t--机械  \nRACE_AQUA\t\t\t=0x40\t\t--水  \nRACE_PYRO\t\t\t=0x80\t\t--炎  \nRACE_ROCK\t\t\t=0x100\t\t--岩石  \nRACE_WINDBEAST\t\t=0x200\t\t--鸟兽  \nRACE_PLANT\t\t\t=0x400\t\t--植物  \nRACE_INSECT\t\t\t=0x800\t\t--昆虫  \nRACE_THUNDER\t\t=0x1000\t\t--雷  \nRACE_DRAGON\t\t\t=0x2000\t\t--龙  \nRACE_BEAST\t\t\t=0x4000\t\t--兽  \nRACE_BEASTWARRIOR\t=0x8000\t\t--兽战士  \nRACE_DINOSAUR\t\t=0x10000\t--恐龙  \nRACE_FISH\t\t\t=0x20000\t--鱼  \nRACE_SEASERPENT\t\t=0x40000\t--海龙  \nRACE_REPTILE\t\t=0x80000\t--爬虫类  \nRACE_PSYCHO\t\t\t=0x100000\t--念动力  \nRACE_DEVINE\t\t\t=0x200000\t--幻神兽  \nRACE_CREATORGOD\t\t=0x400000\t--创造神  \nRACE_WYRM\t\t\t=0x800000\t--幻龙  \nRACE_CYBERSE\t\t=0x1000000\t--电子界  \n",
        "body": "AnnounceRace"
    },
    "EFFECT_SET_SUMMON_COUNT_LIMIT": {
        "prefix": "EFFECT_SET_SUMMON_COUNT_LIMIT",
        "description": "限制每回合放置怪兽次数",
        "body": "EFFECT_SET_SUMMON_COUNT_LIMIT"
    },
    "EFFECT_SPSUMMON_PROC": {
        "prefix": "EFFECT_SPSUMMON_PROC",
        "description": "特殊召唤规则",
        "body": "EFFECT_SPSUMMON_PROC"
    },
    "GetFirstCardTarget": {
        "prefix": "GetFirstCardTarget",
        "description": "•Card.GetFirstCardTarget(Card c)\n返回c当前第一个永续对象，没有则返回 nil  \n",
        "body": "GetFirstCardTarget"
    },
    "Duel.ClearOperationInfo": {
        "prefix": "Duel.ClearOperationInfo",
        "description": "•Duel.ClearOperationInfo(int chainc)\n清除连锁chainc的所有操作分类  \n",
        "body": "Duel.ClearOperationInfo"
    },
    "SetPlayerInfo": {
        "prefix": "SetPlayerInfo",
        "description": "•Debug.SetPlayerInfo(int playerid, int lp, int startcount, int drawcount)\n设置玩家信息，基本分为lp，初始手卡为startcount张，每回合抽drawcount张  \n在残局当中， playerid ：自己=0,对方=1  \n",
        "body": "SetPlayerInfo"
    },
    "Duel.Equip": {
        "prefix": "Duel.Equip",
        "description": "•Duel.Equip(int player, Card c1, Card c2[, bool up=true, bool is_step=false])\n让玩家player把c1作为装备卡装备给c2，返回值表示是否成功  \nup=false则保持装备卡之前的表示形式  \nis_step=true则是装备过程的分解，需要配合Duel.EquipComplete使用  \n",
        "body": "Duel.Equip"
    },
    "IsDiscardable": {
        "prefix": "IsDiscardable",
        "description": "•Card.IsDiscardable(Card[, int reason=REASON_COST])\n检查c是否可以以reason原因丢弃  \n注：此函数仅用于检测，  \n以REASON_DISCARD作为原因把一张手卡送墓并不会导致那张卡不能丢弃  \n",
        "body": "IsDiscardable"
    },
    "EFFECT_REFLECT_DAMAGE": {
        "prefix": "EFFECT_REFLECT_DAMAGE",
        "description": "反射伤害",
        "body": "EFFECT_REFLECT_DAMAGE"
    },
    "GetReleaseGroup": {
        "prefix": "GetReleaseGroup",
        "description": "•Duel.GetReleaseGroup(int player[, bool use_hand=false])\n返回玩家player可解放（非上级召唤用）的卡片组， use_hand=true 则包括手卡  \n",
        "body": "GetReleaseGroup"
    },
    "RACE_REPTILE": {
        "prefix": "RACE_REPTILE",
        "description": "爬虫类",
        "body": "RACE_REPTILE"
    },
    "Card.GetTunerLimit": {
        "prefix": "Card.GetTunerLimit",
        "description": "•Card.GetTunerLimit(Card c)\n如果卡片 c 受到同调素材限制效果 EFFECT_TUNER_MATERIAL_LIMIT 影响，则返回 Effect e,function filter_target,int location,int min,int max ;否则返回nil  \ne 是有这个影响的效果  \nfilter_target 是过滤条件  \nlocation 是位置  \nmin,max 是数量  \n",
        "body": "Card.GetTunerLimit"
    },
    "GetAttribute": {
        "prefix": "GetAttribute",
        "description": "•Card.GetAttribute(Card c)\n返回c的当前属性  \n注：对某些多属性怪兽如光与暗之龙，此函数的返回值可能是几个属性的组合值  \n",
        "body": "GetAttribute"
    },
    "GetSummonPlayer": {
        "prefix": "GetSummonPlayer",
        "description": "•Card.GetSummonPlayer(Card c)\n返回召唤/特殊召唤 c 上场的玩家  \n",
        "body": "GetSummonPlayer"
    },
    "Duel.MSet": {
        "prefix": "Duel.MSet",
        "description": "•Duel.MSet(int player, Card c, bool ignore_count, Effect e|nil[,int min=0, int zone=0x1f])\n让玩家 player 以效果e对卡片c[在区域 zone]进行通常召唤的Set，至少使用min个祭品  \n如果e=nil,那么就按照一般的通常召唤规则进行通常召唤  \n如果ignore_count=true，则忽略每回合的通常召唤次数限制  \n",
        "body": "Duel.MSet"
    },
    "Card.GetLeftScale": {
        "prefix": "Card.GetLeftScale",
        "description": "•Card.GetLeftScale(Card c)\n返回c的左灵摆刻度  \n",
        "body": "Card.GetLeftScale"
    },
    "EFFECT_INDESTRUCTABLE_COUNT": {
        "prefix": "EFFECT_INDESTRUCTABLE_COUNT",
        "description": "一回合几次不会被破坏",
        "body": "EFFECT_INDESTRUCTABLE_COUNT"
    },
    "Card.IsLinkSetCard": {
        "prefix": "Card.IsLinkSetCard",
        "description": "•Card.IsLinkSetCard(Card c, int setname)\n检查c作为link素材时能否当作名字含有setname的卡  \n",
        "body": "Card.IsLinkSetCard"
    },
    "EFFECT_TO_GRAVE_REDIRECT_CB": {
        "prefix": "EFFECT_TO_GRAVE_REDIRECT_CB",
        "description": "重新指定去向(寶玉獸)",
        "body": "EFFECT_TO_GRAVE_REDIRECT_CB"
    },
    "Duel.SelectXyzMaterial": {
        "prefix": "Duel.SelectXyzMaterial",
        "description": "•Duel.SelectXyzMaterial(int player, Card c, function f|nil, int lv, int min, int max[, Group mg|nil])\n让玩家player为超量怪兽c从场上[或mg中]选择超量用等级为lv的min-max个满足条件f的叠放素材  \n",
        "body": "Duel.SelectXyzMaterial"
    },
    "GetRightScale": {
        "prefix": "GetRightScale",
        "description": "•Card.GetRightScale(Card c)\n返回c的右灵摆刻度  \n",
        "body": "GetRightScale"
    },
    "LINK_MARKER_TOP_RIGHT": {
        "prefix": "LINK_MARKER_TOP_RIGHT",
        "description": "↗",
        "body": "LINK_MARKER_TOP_RIGHT"
    },
    "aux.AddFusionProcCodeRep2": {
        "prefix": "aux.AddFusionProcCodeRep2",
        "description": "•aux.AddFusionProcCodeRep2(Card c, int code, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用 minc-maxc 个卡号为 code 的怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,code1,minc,maxc)  \n",
        "body": "aux.AddFusionProcCodeRep2"
    },
    "SetTurnCounter": {
        "prefix": "SetTurnCounter",
        "description": "•Card.SetTurnCounter(Card c, int ct)\n设置c的回合计数器为 ct （光之护封剑等）  \n",
        "body": "SetTurnCounter"
    },
    "EFFECT_CANNOT_TURN_SET": {
        "prefix": "EFFECT_CANNOT_TURN_SET",
        "description": "不能变里侧",
        "body": "EFFECT_CANNOT_TURN_SET"
    },
    "TuneMagicianCheckX": {
        "prefix": "TuneMagicianCheckX",
        "description": "•aux.TuneMagicianCheckX(Card c, Group sg, Effect e)\n调弦之魔术师(73941492)专用  \n",
        "body": "TuneMagicianCheckX"
    },
    "TIMING_DAMAGE_CAL": {
        "prefix": "TIMING_DAMAGE_CAL",
        "description": "伤害计算时点",
        "body": "TIMING_DAMAGE_CAL"
    },
    "Effect.GetOwner": {
        "prefix": "Effect.GetOwner",
        "description": "•Effect.GetOwner(Effect e)\n返回效果 e 的Owner属性  \n",
        "body": "Effect.GetOwner"
    },
    "GetPreviousPosition": {
        "prefix": "GetPreviousPosition",
        "description": "•Card.GetPreviousPosition(Card c)\n返回c位置变化前的表示形式  \n",
        "body": "GetPreviousPosition"
    },
    "SelectSynchroMaterial": {
        "prefix": "SelectSynchroMaterial",
        "description": "•Duel.SelectSynchroMaterial(int player, Card c, function f1|nil, function f2|nil, int min, int max[, Card smat|nil, Group mg|nil])\n让玩家player从场上[或mg中]选择用于同调c需要的[必须包含smat在内（如果有mg~=nil则忽略此参数）]满足条件的一组素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \nf1,f2 之中，至少有一种为调整的条件  \n",
        "body": "SelectSynchroMaterial"
    },
    "Duel.IsPlayerCanDiscardDeckAsCost": {
        "prefix": "Duel.IsPlayerCanDiscardDeckAsCost",
        "description": "•Duel.IsPlayerCanDiscardDeckAsCost(int player, int count)\n检查玩家player能否把卡组顶端count张卡送去墓地作为cost  \n",
        "body": "Duel.IsPlayerCanDiscardDeckAsCost"
    },
    "Duel.SetFlagEffectLabel": {
        "prefix": "Duel.SetFlagEffectLabel",
        "description": "•Duel.SetFlagEffectLabel(int player, int code, int label)\n返回player是否存在种类为code的标识效果，并设置其Label属性为label  \n",
        "body": "Duel.SetFlagEffectLabel"
    },
    "HINTMSG_TOGRAVE": {
        "prefix": "HINTMSG_TOGRAVE",
        "description": "请选择要送去墓地的卡",
        "body": "HINTMSG_TOGRAVE"
    },
    "GetFieldID": {
        "prefix": "GetFieldID",
        "description": "•Card.GetFieldID(Card c)\n返回c转移到当前位置的时间标识  \n此数值唯一，越小表示c是越早出现在那个位置  \n卡片从里侧翻开也会改变此数值  \n\n•Effect.GetFieldID(Effect e)\n获取效果e的id  \n\n",
        "body": "GetFieldID"
    },
    "HINTMSG_EFFECT": {
        "prefix": "HINTMSG_EFFECT",
        "description": "请选择要发动的效果",
        "body": "HINTMSG_EFFECT"
    },
    "RESET_COPY": {
        "prefix": "RESET_COPY",
        "description": "重置以复制取得的效果",
        "body": "RESET_COPY"
    },
    "Card.IsLinkType": {
        "prefix": "Card.IsLinkType",
        "description": "•Card.IsLinkType(Card c, int type)\n检查c用作连接素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "Card.IsLinkType"
    },
    "EVENT_FLIP": {
        "prefix": "EVENT_FLIP",
        "description": "翻转时",
        "body": "EVENT_FLIP"
    },
    "aux.AddRitualProcGreaterCode": {
        "prefix": "aux.AddRitualProcGreaterCode",
        "description": "•aux.AddRitualProcGreaterCode(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果。会默认把 code1 添加到 c 的 codelist  \ncode1 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcGreater(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcGreaterCode"
    },
    "IsAbleToRemoveAsCost": {
        "prefix": "IsAbleToRemoveAsCost",
        "description": "•Card.IsAbleToRemoveAsCost(Card c[, int pos=POS_FACEUP])\n检查c是否可以[以 pos 表示形式]作为cost除外  \n",
        "body": "IsAbleToRemoveAsCost"
    },
    "IsDisabled": {
        "prefix": "IsDisabled",
        "description": "•Card.IsDisabled(Card c)\n检查c是否处于无效状态  \n",
        "body": "IsDisabled"
    },
    "TargetEqualFunction": {
        "prefix": "TargetEqualFunction",
        "description": "•Auxiliary.TargetEqualFunction(function f, any value, ...)\n一般用在效果注册里,返回的是一个 有 bool 返回值类型的 函数，第3个参数开始为额外参数  \nfunction Auxiliary.TargetEqualFunction(f,value,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(effect,target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))==value  \n\t\t\tend  \nend  \n",
        "body": "TargetEqualFunction"
    },
    "RaiseSingleEvent": {
        "prefix": "RaiseSingleEvent",
        "description": "•Duel.RaiseSingleEvent(Card eg, int code, Effect re, int r, int rp, int ep, int ev)\n以eg,ep,ev,re,r,rp为卡片ec触发一个单体时点 code  \n",
        "body": "RaiseSingleEvent"
    },
    "STATUS_CHAINING": {
        "prefix": "STATUS_CHAINING",
        "description": "正在連鎖串中",
        "body": "STATUS_CHAINING"
    },
    "Card.IsCanBeEffectTarget": {
        "prefix": "Card.IsCanBeEffectTarget",
        "description": "•Card.IsCanBeEffectTarget(Card c[, Effect e])\n检查c是否可以成为效果[e的]对象  \n",
        "body": "Card.IsCanBeEffectTarget"
    },
    "GLOBALFLAG_XMAT_COUNT_LIMIT": {
        "prefix": "GLOBALFLAG_XMAT_COUNT_LIMIT",
        "description": "超量素材数量限制标记（光天使 天座）",
        "body": "GLOBALFLAG_XMAT_COUNT_LIMIT"
    },
    "EVENT_SUMMON_NEGATED": {
        "prefix": "EVENT_SUMMON_NEGATED",
        "description": "召唤被无效时",
        "body": "EVENT_SUMMON_NEGATED"
    },
    "EFFECT_MUST_BE_SMATERIAL": {
        "prefix": "EFFECT_MUST_BE_SMATERIAL",
        "description": "必须作为同调素材（波动龙 声子龙）",
        "body": "EFFECT_MUST_BE_SMATERIAL"
    },
    "Duel.IsAbleToEnterBP": {
        "prefix": "Duel.IsAbleToEnterBP",
        "description": "•Duel.IsAbleToEnterBP()\n检查回合玩家能否进入战斗阶段  \n",
        "body": "Duel.IsAbleToEnterBP"
    },
    "SUMMON_TYPE_ADVANCE": {
        "prefix": "SUMMON_TYPE_ADVANCE",
        "description": "上级召唤",
        "body": "SUMMON_TYPE_ADVANCE"
    },
    "Debug.PreSummon": {
        "prefix": "Debug.PreSummon",
        "description": "•Debug.PreSummon(Card c, int sum_type[, int sum_location=0])\n设置卡片c的召唤信息：以 sum_type 方法(通常召唤、特殊召唤等)[从 sum_location]出场  \n",
        "body": "Debug.PreSummon"
    },
    "EFFECT_TO_GRAVE_REDIRECT": {
        "prefix": "EFFECT_TO_GRAVE_REDIRECT",
        "description": "去墓地时重新指定去向",
        "body": "EFFECT_TO_GRAVE_REDIRECT"
    },
    "aux.GetLinkCount": {
        "prefix": "aux.GetLinkCount",
        "description": "•aux.GetLinkCount(Card c)\n返回卡片 c 作为连接素材时当做的素材数量  \nfunction Auxiliary.GetLinkCount(c)  \n\tif c:IsType(TYPE_LINK) and c:GetLink()>1 then  \n\t\treturn 1+0x10000*c:GetLink()  \n\telse return 1 end  \nend  \n",
        "body": "aux.GetLinkCount"
    },
    "SUMMON_TYPE_RITUAL": {
        "prefix": "SUMMON_TYPE_RITUAL",
        "description": "仪式召唤",
        "body": "SUMMON_TYPE_RITUAL"
    },
    "EFFECT_ONLY_ATTACK_MONSTER": {
        "prefix": "EFFECT_ONLY_ATTACK_MONSTER",
        "description": "只能攻擊X",
        "body": "EFFECT_ONLY_ATTACK_MONSTER"
    },
    "STATUS_SET_TURN": {
        "prefix": "STATUS_SET_TURN",
        "description": "在本回合覆盖",
        "body": "STATUS_SET_TURN"
    },
    "TIMING_CHAIN_END": {
        "prefix": "TIMING_CHAIN_END",
        "description": "连锁结束时点",
        "body": "TIMING_CHAIN_END"
    },
    "ChangeTargetPlayer": {
        "prefix": "ChangeTargetPlayer",
        "description": "•Duel.ChangeTargetPlayer(int chainc, in player)\n把连锁chainc的对象玩家换成player  \nchainc=0 表示当前效果  \n",
        "body": "ChangeTargetPlayer"
    },
    "Duel.Damage": {
        "prefix": "Duel.Damage",
        "description": "•Duel.Damage(int player, int value, int reason[, bool is_step=false])\n以reason原因给与玩家player造成value的伤害，返回实际收到的伤害值  \n如果受到伤害变成回复等效果的影响时，返回值为0.  \nis_step为true则是伤害/恢复LP过程的分解，需要调用Duel.RDComplete()触发时点  \n",
        "body": "Duel.Damage"
    },
    "IsCanBeBattleTarget": {
        "prefix": "IsCanBeBattleTarget",
        "description": "•Card.IsCanBeBattleTarget(Card c1, Card c2)\n检查c1是否可以成为c2的攻击目标  \n",
        "body": "IsCanBeBattleTarget"
    },
    "SwapDeckAndGrave": {
        "prefix": "SwapDeckAndGrave",
        "description": "•Duel.SwapDeckAndGrave(int player)\n现世与冥界的逆转专用。把玩家player的卡组和墓地交换  \n",
        "body": "SwapDeckAndGrave"
    },
    "EFFECT_RITUAL_LEVEL": {
        "prefix": "EFFECT_RITUAL_LEVEL",
        "description": "做仪式祭品时的等级",
        "body": "EFFECT_RITUAL_LEVEL"
    },
    "EFFECT_FLAG_DELAY": {
        "prefix": "EFFECT_FLAG_DELAY",
        "description": "場合型誘發效果、用於永續效果的EFFECT_TYPE_CONTINUOUS、神之化身/恐惧之源的攻击力变化最后计算",
        "body": "EFFECT_FLAG_DELAY"
    },
    "SetUniqueOnField": {
        "prefix": "SetUniqueOnField",
        "description": "•Card.SetUniqueOnField(Card c, int s, int o, function|int unique_code[, int unique_location=LOCATIOIN_ONFIELD])\n设置c以unique_code只能在场上[或怪兽区域或魔陷区域，由unique_location决定]只能存在1张,function 的返回值类型必须是int  \ns不为0会检查自己场上的唯一性，o不为0则检查对方场上的唯一性  \n",
        "body": "SetUniqueOnField"
    },
    "AddRitualProcGreater2Code": {
        "prefix": "AddRitualProcGreater2Code",
        "description": "•aux.AddRitualProcGreater2Code(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \ncode1 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcGreater2(c,aux.FilterBoolFunction(Card.IsCode,code1),Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcGreater2Code"
    },
    "Duel.SelectPosition": {
        "prefix": "Duel.SelectPosition",
        "description": "•Duel.SelectPosition(int player, Card c, int pos)\n让玩家player选择c的表示形式（返回值是一个int 类型的，但是我不知道是什么）  \n",
        "body": "Duel.SelectPosition"
    },
    "EFFECT_CHANGE_TYPE": {
        "prefix": "EFFECT_CHANGE_TYPE",
        "description": "改变卡片种类",
        "body": "EFFECT_CHANGE_TYPE"
    },
    "Duel.GetCurrentPhase": {
        "prefix": "Duel.GetCurrentPhase",
        "description": "•Duel.GetCurrentPhase()\n返回当前的阶段  \n",
        "body": "Duel.GetCurrentPhase"
    },
    "MAX_COUNTER": {
        "prefix": "MAX_COUNTER",
        "description": "max number for adding/removing counters, by card::add_counter(), field::remove_counter()",
        "body": "MAX_COUNTER"
    },
    "Duel.Win": {
        "prefix": "Duel.Win",
        "description": "•Duel.Win(int player, int win_reason)\n当前效果处理完令player以win_reason决斗胜利  \n",
        "body": "Duel.Win"
    },
    "aux.ExceptThisCard": {
        "prefix": "aux.ExceptThisCard",
        "description": "•aux.ExceptThisCard(Effect e)\n若 e:GetHandler() 与效果 e 有联系，则返回 e:GetHandler() ,否则返回 nil  \nfunction Auxiliary.ExceptThisCard(e)  \n\tlocal c=e:GetHandler()  \n\tif c:IsRelateToEffect(e) then return c else return nil end  \nend  \n",
        "body": "aux.ExceptThisCard"
    },
    "EFFECT_FLAG2_NAGA": {
        "prefix": "EFFECT_FLAG2_NAGA",
        "description": "N/A",
        "body": "EFFECT_FLAG2_NAGA"
    },
    "EFFECT_DESTROY_SUBSTITUTE": {
        "prefix": "EFFECT_DESTROY_SUBSTITUTE",
        "description": "必選的代替破壞(此卡被破壞時用其他卡代替)",
        "body": "EFFECT_DESTROY_SUBSTITUTE"
    },
    "aux.dogfcon": {
        "prefix": "aux.dogfcon",
        "description": "•aux.dogfcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否是从自己场上被对方破坏送去墓地 SetCondition  \nfunction Auxiliary.dogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsPreviousLocation(LOCATION_ONFIELD) and c:GetPreviousControler()==tp  \n\t\tand c:IsReason(REASON_DESTROY) and rp==1-tp  \nend  \n",
        "body": "aux.dogfcon"
    },
    "REASON_DISCARD": {
        "prefix": "REASON_DISCARD",
        "description": "丢弃",
        "body": "REASON_DISCARD"
    },
    "RESET_TEMP_REMOVE": {
        "prefix": "RESET_TEMP_REMOVE",
        "description": "暂时除外重置",
        "body": "RESET_TEMP_REMOVE"
    },
    "EFFECT_UPDATE_RANK": {
        "prefix": "EFFECT_UPDATE_RANK",
        "description": "改变阶级",
        "body": "EFFECT_UPDATE_RANK"
    },
    "IsCanBeSynchroMaterial": {
        "prefix": "IsCanBeSynchroMaterial",
        "description": "•Card.IsCanBeSynchroMaterial(Card c[, Card sc, Card tuner])\n检查c是否可以成为[以 tuner 为调整的同调怪兽sc的]同调素材  \n",
        "body": "IsCanBeSynchroMaterial"
    },
    "aux.GetMultiLinkedZone": {
        "prefix": "aux.GetMultiLinkedZone",
        "description": "•aux.GetMultiLinkedZone(int tp)\n获取玩家 tp 场上被2个以上链接标记指向的区域。比如那几只守护龙  \n",
        "body": "aux.GetMultiLinkedZone"
    },
    "IsXyzLevel": {
        "prefix": "IsXyzLevel",
        "description": "•Card.IsXyzLevel(Card c, Card xyzc, int lv)\n检查c对于超量怪兽xyzc的超量用等级是否是lv  \n",
        "body": "IsXyzLevel"
    },
    "ResetNegateEffect": {
        "prefix": "ResetNegateEffect",
        "description": "•Card.ResetNegateEffect(Card c[, int code1,...])\n重置c受到的卡号为code1[, code2...]的卡片的效果的影响  \n",
        "body": "ResetNegateEffect"
    },
    "HINTMSG_CONTROL": {
        "prefix": "HINTMSG_CONTROL",
        "description": "请选择要改变控制权的怪兽",
        "body": "HINTMSG_CONTROL"
    },
    "aux.bdocon": {
        "prefix": "aux.bdocon",
        "description": "•aux.bdocon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且是与对方怪兽战斗 的 condition  \nfunction Auxiliary.bdocon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsRelateToBattle() and c:IsStatus(STATUS_OPPO_BATTLE)  \nend  \n",
        "body": "aux.bdocon"
    },
    "AddRitualProcGreaterCode": {
        "prefix": "AddRitualProcGreaterCode",
        "description": "•aux.AddRitualProcGreaterCode(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果。会默认把 code1 添加到 c 的 codelist  \ncode1 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcGreater(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcGreaterCode"
    },
    "Duel.SetSelectedCard": {
        "prefix": "Duel.SetSelectedCard",
        "description": "•Duel.SetSelectedCard(Card|Group targets)\n将 targets 设置为必须选择的卡（？）  \n",
        "body": "Duel.SetSelectedCard"
    },
    "Duel.ReturnToField": {
        "prefix": "Duel.ReturnToField",
        "description": "•Duel.ReturnToField(Card c[, int pos, int zone=0xff])\n把c[以表示形式pos]返回到场上[的区域 zone]，pos默认值是离场前的表示形式，返回值表示是否成功  \nc必须是以REASON_TEMPORARY原因离场，并且离场后没有离开过那个位置  \n",
        "body": "Duel.ReturnToField"
    },
    "AssumeProperty": {
        "prefix": "AssumeProperty",
        "description": "•Card.AssumeProperty(Card c,int assume_type, int assume_value)\n把c的assume_type的数值当作assume_value使用（基因组斗士）  \nassume_type为以下类型  \nASSUME_CODE         卡号  \nASSUME_TYPE         类型  \nASSUME_LEVEL        等级  \nASSUME_RANK         阶级  \nASSUME_ATTRIBUTE    属性  \nASSUME_RACE         种族  \nASSUME_ATTACK       攻击力  \nASSUME_DEFENSE      守备力  \n",
        "body": "AssumeProperty"
    },
    "GetLeftScale": {
        "prefix": "GetLeftScale",
        "description": "•Card.GetLeftScale(Card c)\n返回c的左灵摆刻度  \n",
        "body": "GetLeftScale"
    },
    "EVENT_DESTROY": {
        "prefix": "EVENT_DESTROY",
        "description": "確定被破壞的卡片移動前",
        "body": "EVENT_DESTROY"
    },
    "Duel.SelectFusionMaterial": {
        "prefix": "Duel.SelectFusionMaterial",
        "description": "•Duel.SelectFusionMaterial(int player, Card c, Group g[, Card gc|nil, int chkf=PLAYER_NONE])\n让玩家player从g中选择一组[必须包含gc在内的]融合怪兽c的融合素材  \n##根据c的种类为EFFECT_FUSION_MATERIAL的效果的Operation操作  \n",
        "body": "Duel.SelectFusionMaterial"
    },
    "IsDefenseAbove": {
        "prefix": "IsDefenseAbove",
        "description": "•Card.IsDefenseAbove(Card c, int def)\n检查c是否是守备力def以上  \n",
        "body": "IsDefenseAbove"
    },
    "AddFusionProcMixRep": {
        "prefix": "AddFusionProcMixRep",
        "description": "•aux.AddFusionProcMixRep(Card c, bool sub, bool insf, (function f1)|(int code1), int minc, int maxc, ...)\n为c 添加融合召唤手续  \n用满足f1 的怪兽 minc-maxc 只，和 额外参数里 各1只的怪兽为融合素材,  \n额外参数的类型 可以是 function 或者 卡密(int code)  \n",
        "body": "AddFusionProcMixRep"
    },
    "IsControler": {
        "prefix": "IsControler",
        "description": "•Card.IsControler(Card c, int controler)\n检查c的当前控制着是否是controler  \n",
        "body": "IsControler"
    },
    "EnableCounterPermit": {
        "prefix": "EnableCounterPermit",
        "description": "•Card.EnableCounterPermit(Card c, int countertype[, int location, function filter])\n允许c[在位置location]放置[满足条件 filter 的]需要“可以放置”才能放置的指示物countertype  \nlocation的默认值与c的种类有关，灵摆怪兽需要指定能否在怪兽区域或灵摆区域放置指示物  \n",
        "body": "EnableCounterPermit"
    },
    "Card.GetOriginalRace": {
        "prefix": "Card.GetOriginalRace",
        "description": "•Card.GetOriginalRace(Card c)\n返回c的卡片记载的种族  \n",
        "body": "Card.GetOriginalRace"
    },
    "GetRealFieldID": {
        "prefix": "GetRealFieldID",
        "description": "•Card.GetRealFieldID(Card c)\n返回c转移到当前位置的真实的时间标识  \n卡片从里侧翻开不会改变此数值  \n",
        "body": "GetRealFieldID"
    },
    "SetAbsoluteRange": {
        "prefix": "SetAbsoluteRange",
        "description": "•Effect.SetAbsoluteRange(Effect e, int playerid, int s_range, int o_range)\n设置效果 e 的target range属性并设置 EFFECT_FLAG_ABSOLUTE_TARGET 标志  \n\t如果 playerid != 0 ，s_range和o_range反转  \n",
        "body": "SetAbsoluteRange"
    },
    "HINTMSG_ZONE": {
        "prefix": "HINTMSG_ZONE",
        "description": "请选择[%ls]的位置",
        "body": "HINTMSG_ZONE"
    },
    "Effect.GetProperty": {
        "prefix": "Effect.GetProperty",
        "description": "•Effect.GetProperty(Effect e)\n返回效果 e 的Property属性  \n",
        "body": "Effect.GetProperty"
    },
    "aux.AddFusionProcCodeFun": {
        "prefix": "aux.AddFusionProcCodeFun",
        "description": "•aux.AddFusionProcCodeFun(Card c, int code, function f, int cc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为 code 的1只怪兽，和 cc 个满足条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,table.unpack(fun)),fun 是包含 cc 个 满足条件 f 的卡的表  \n",
        "body": "aux.AddFusionProcCodeFun"
    },
    "IsSetCard": {
        "prefix": "IsSetCard",
        "description": "•Card.IsSetCard(Card c, int setname)\n检查c是否是卡名含有setname的卡  \n",
        "body": "IsSetCard"
    },
    "BeginPuzzle": {
        "prefix": "BeginPuzzle",
        "description": "•aux.BeginPuzzle()\n开始残局  \n##此函数注册3个全局效果：  \n##回合结束时玩家的基本分变成0  \n##跳过玩家抽卡阶段与准备阶段  \n",
        "body": "BeginPuzzle"
    },
    "PLAYER_ALL": {
        "prefix": "PLAYER_ALL",
        "description": "2个玩家都是",
        "body": "PLAYER_ALL"
    },
    "EFFECT_SSET_COST": {
        "prefix": "EFFECT_SSET_COST",
        "description": "魔陷放置代价",
        "body": "EFFECT_SSET_COST"
    },
    "CheckEquipTarget": {
        "prefix": "CheckEquipTarget",
        "description": "•Card.CheckEquipTarget(Card c1, Card c2)\n检查c2是否是c1的正确的装备对象  \n##由EFFECT_EQUIP_LIMIT效果或同盟状态确定  \n",
        "body": "CheckEquipTarget"
    },
    "FilterEqualFunction": {
        "prefix": "FilterEqualFunction",
        "description": "•aux.FilterEqualFunction(function f, any value, ...)\n用于过滤满足单一过滤条件 f ,且值为 value 的卡,,返回的是一个 有 bool 返回值类型的 函数， 第3个参数开始为额外参数  \nfunction Auxiliary.FilterEqualFunction(f,value,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))==value  \n\t\t\tend  \nend  \n",
        "body": "FilterEqualFunction"
    },
    "MAX_ID": {
        "prefix": "MAX_ID",
        "description": "9 digit, by DataManager::GetDesc()",
        "body": "MAX_ID"
    },
    "Card.IsFusionType": {
        "prefix": "Card.IsFusionType",
        "description": "•Card.IsFusionType(Card c, int type)\n检查c用作融合素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "Card.IsFusionType"
    },
    "PHASE_STANDBY": {
        "prefix": "PHASE_STANDBY",
        "description": "准备阶段",
        "body": "PHASE_STANDBY"
    },
    "RACE_PLANT": {
        "prefix": "RACE_PLANT",
        "description": "植物",
        "body": "RACE_PLANT"
    },
    "Card.GetTributeRequirement": {
        "prefix": "Card.GetTributeRequirement",
        "description": "•Card.GetTributeRequirement(Card c)\n返回通常召唤c所需要的祭品的最小和最大数量  \n",
        "body": "Card.GetTributeRequirement"
    },
    "EVENT_PHASE": {
        "prefix": "EVENT_PHASE",
        "description": "阶段结束时",
        "body": "EVENT_PHASE"
    },
    "Duel.GetLinkedGroup": {
        "prefix": "Duel.GetLinkedGroup",
        "description": "•Duel.GetLinkedGroup(int player, int s_range, int o_range)\n返回以玩家player来看的 s_range 和 o_range 区域的处于连接状态的卡片组[其实只要后面2个参数不为0就行，只要不为0，都会变成LOCATION_MZONE]（？）  \n",
        "body": "Duel.GetLinkedGroup"
    },
    "Card.IsCanBeFusionMaterial": {
        "prefix": "Card.IsCanBeFusionMaterial",
        "description": "•Card.IsCanBeFusionMaterial(Card c[, Card fc, int summon_type=SUMMON_TYPE_FUSION])\n检查c是否可以成为[融合怪兽fc的summon_type方式的]融合素材  \n",
        "body": "Card.IsCanBeFusionMaterial"
    },
    "EFFECT_RISE_TO_FULL_HEIGHT": {
        "prefix": "EFFECT_RISE_TO_FULL_HEIGHT",
        "description": "N/A",
        "body": "EFFECT_RISE_TO_FULL_HEIGHT"
    },
    "GetTunerLimit": {
        "prefix": "GetTunerLimit",
        "description": "•Card.GetTunerLimit(Card c)\n如果卡片 c 受到同调素材限制效果 EFFECT_TUNER_MATERIAL_LIMIT 影响，则返回 Effect e,function filter_target,int location,int min,int max ;否则返回nil  \ne 是有这个影响的效果  \nfilter_target 是过滤条件  \nlocation 是位置  \nmin,max 是数量  \n",
        "body": "GetTunerLimit"
    },
    "LOCATION_HAND": {
        "prefix": "LOCATION_HAND",
        "description": "手牌",
        "body": "LOCATION_HAND"
    },
    "CHAININFO_TRIGGERING_POSITION": {
        "prefix": "CHAININFO_TRIGGERING_POSITION",
        "description": "连锁发生时的表示形式",
        "body": "CHAININFO_TRIGGERING_POSITION"
    },
    "SetOperationInfo": {
        "prefix": "SetOperationInfo",
        "description": "•Duel.SetOperationInfo(int chainc, int category, Card|Group targets, int count, int target_player, int target_param)\n设置连锁 chainc 的操作信息此操作信息包含了效果处理中确定要处理的效果分类 chainc=0 表示当前连锁  \n比如潜行狙击手需要设置CATEGORY_DICE，但是不能设置CATEGORY_DESTROY，因为不确定  \n对于破坏效果，targets需要设置成发动时可能成为连锁的影响对象的卡，  \n并设置count为发动时确定的要处理的卡的数量  \n比如黑洞发动时，targets需要设定为场上的所有怪兽，count设置成场上的怪的数量  \n对于需要移动卡片位置的CATEGORY_SPECIAL_SUMMON,CATEGORY_TOHAND,CATEGORY_TODECK等分类，  \n如果要处理的卡是确定的（比如取对象），则设置targets为这些卡，count为数量，  \n如果要处理的卡是不确定的（效果处理时才能确定，一般是不取对象的效果），  \n\t则设置targets为nil，count为预计要处理的卡的数量，  \n\ttarget_player为预计要处理的卡的持有者（不确定就为0）  \n\ttarget_param为预计要处理的卡的位置  \n例如增援：SetOperationInfo(0,CATEGORY_TOHAND,nil,1,tp,LOCATION_DECK)  \n操作信息用于很多效果的发动的检测，例如星尘龙，王家长眠之谷等  \n--特别注意：如果 category 是 CATEGORY_DRAW ，那 target_param 代表要抽的数量。抽卡的效果通常要用到 Duel.SetTargetPlayer 和 Duel.SetTargetParam  \n例如 强欲之壶：   \n\tDuel.SetTargetPlayer(tp)  \n\tD uel.SetTargetParam(2)  \n\tDuel.SetOperationInfo(0,CATEGORY_DRAW,nil,0,tp,2)  \n",
        "body": "SetOperationInfo"
    },
    "TIMING_DAMAGE": {
        "prefix": "TIMING_DAMAGE",
        "description": "造成伤害时点",
        "body": "TIMING_DAMAGE"
    },
    "CHAININFO_TRIGGERING_CODE": {
        "prefix": "CHAININFO_TRIGGERING_CODE",
        "description": "连锁发生时的密码",
        "body": "CHAININFO_TRIGGERING_CODE"
    },
    "Card.GetAttackedGroup": {
        "prefix": "Card.GetAttackedGroup",
        "description": "•Card.GetAttackedGroup(Card c)\n返回c本回合攻击过的卡片组  \n",
        "body": "Card.GetAttackedGroup"
    },
    "AddMonsterAttribute": {
        "prefix": "AddMonsterAttribute",
        "description": "•Card.AddMonsterAttribute(Card c, int type[, int attribute, int race, int level, int atk, int def])\n为魔陷卡c添加怪兽数值,type 为怪兽类型，不能是没有等级的怪兽  \n注：在数据库中有记录的数值视为原本数值  \n不再需要 Card.AddMonsterAttributeComplete(Card c)  \n",
        "body": "AddMonsterAttribute"
    },
    "EFFECT_SET_DEFENSE_FINAL": {
        "prefix": "EFFECT_SET_DEFENSE_FINAL",
        "description": "设置最终防御力",
        "body": "EFFECT_SET_DEFENSE_FINAL"
    },
    "Duel.GetLinkedGroupCount": {
        "prefix": "Duel.GetLinkedGroupCount",
        "description": "•Duel.GetLinkedGroupCount(int player, int s_range, int o_range)\n返回以玩家player来看的 s_range 和 o_range 区域的处于连接状态的卡片的数量（？）  \n",
        "body": "Duel.GetLinkedGroupCount"
    },
    "EVENT_EQUIP": {
        "prefix": "EVENT_EQUIP",
        "description": "装备卡装备时",
        "body": "EVENT_EQUIP"
    },
    "Card.IsReleasableByEffect": {
        "prefix": "Card.IsReleasableByEffect",
        "description": "•Card.IsReleasableByEffect(Card c)\n检查c是否可以被效果解放  \n",
        "body": "Card.IsReleasableByEffect"
    },
    "Filter": {
        "prefix": "Filter",
        "description": "•Group.Filter(Group g, function f, Card|Group ex|nil, ...)\n过滤函数，从卡片组g中筛选满足筛选条件f并且不等于ex的卡  \n从第4个参数开始为额外参数  \n",
        "body": "Filter"
    },
    "aux.exccon": {
        "prefix": "aux.exccon",
        "description": "•aux.exccon(Effect e)\n这张卡送去墓地的回合 不能发动这个效果 的简单写法 SetCondition  \nfunction Auxiliary.exccon(e)  \n\treturn Duel.GetTurnCount()~=e:GetHandler():GetTurnID() or e:GetHandler():IsReason(REASON_RETURN)  \nend  \n",
        "body": "aux.exccon"
    },
    "Card.GetOriginalAttribute": {
        "prefix": "Card.GetOriginalAttribute",
        "description": "•Card.GetOriginalAttribute(Card c)\n返回c的卡片记载的属性  \n",
        "body": "Card.GetOriginalAttribute"
    },
    "Duel.SetOperationInfo": {
        "prefix": "Duel.SetOperationInfo",
        "description": "•Duel.SetOperationInfo(int chainc, int category, Card|Group targets, int count, int target_player, int target_param)\n设置连锁 chainc 的操作信息此操作信息包含了效果处理中确定要处理的效果分类 chainc=0 表示当前连锁  \n比如潜行狙击手需要设置CATEGORY_DICE，但是不能设置CATEGORY_DESTROY，因为不确定  \n对于破坏效果，targets需要设置成发动时可能成为连锁的影响对象的卡，  \n并设置count为发动时确定的要处理的卡的数量  \n比如黑洞发动时，targets需要设定为场上的所有怪兽，count设置成场上的怪的数量  \n对于需要移动卡片位置的CATEGORY_SPECIAL_SUMMON,CATEGORY_TOHAND,CATEGORY_TODECK等分类，  \n如果要处理的卡是确定的（比如取对象），则设置targets为这些卡，count为数量，  \n如果要处理的卡是不确定的（效果处理时才能确定，一般是不取对象的效果），  \n\t则设置targets为nil，count为预计要处理的卡的数量，  \n\ttarget_player为预计要处理的卡的持有者（不确定就为0）  \n\ttarget_param为预计要处理的卡的位置  \n例如增援：SetOperationInfo(0,CATEGORY_TOHAND,nil,1,tp,LOCATION_DECK)  \n操作信息用于很多效果的发动的检测，例如星尘龙，王家长眠之谷等  \n--特别注意：如果 category 是 CATEGORY_DRAW ，那 target_param 代表要抽的数量。抽卡的效果通常要用到 Duel.SetTargetPlayer 和 Duel.SetTargetParam  \n例如 强欲之壶：   \n\tDuel.SetTargetPlayer(tp)  \n\tD uel.SetTargetParam(2)  \n\tDuel.SetOperationInfo(0,CATEGORY_DRAW,nil,0,tp,2)  \n",
        "body": "Duel.SetOperationInfo"
    },
    "TIMING_SPSUMMON": {
        "prefix": "TIMING_SPSUMMON",
        "description": "特殊召唤时点",
        "body": "TIMING_SPSUMMON"
    },
    "SetProperty": {
        "prefix": "SetProperty",
        "description": "•Effect.SetProperty(Effect e, int prop1[, int prop2])\n设置效果 e 的Property属性  \n",
        "body": "SetProperty"
    },
    "TIMINGS_CHECK_MONSTER": {
        "prefix": "TIMINGS_CHECK_MONSTER",
        "description": "怪兽正面上场",
        "body": "TIMINGS_CHECK_MONSTER"
    },
    "NecroValleyFilter": {
        "prefix": "NecroValleyFilter",
        "description": "•aux.NecroValleyFilter(function f)\n根据过滤条件f返回一个新的过滤条件：满足f并且没有受王家长眠之谷的影响的卡  \nfunction Auxiliary.NecroValleyFilter(f)  \n\treturn\tfunction(target,...)  \n\t\t\t\treturn f(target,...) and not (target:IsHasEffect(EFFECT_NECRO_VALLEY) and Duel.IsChainDisablable(0))  \n\t\t\tend  \nend  \n",
        "body": "NecroValleyFilter"
    },
    "TossCoin": {
        "prefix": "TossCoin",
        "description": "•Duel.TossCoin(int player, int count)\n让玩家player投count(<=5)次硬币，返回值为count个结果，0或者1, 正面是 1，反面是 0  \n",
        "body": "TossCoin"
    },
    "EFFECT_MUST_BE_LMATERIAL": {
        "prefix": "EFFECT_MUST_BE_LMATERIAL",
        "description": "必须作为连接素材",
        "body": "EFFECT_MUST_BE_LMATERIAL"
    },
    "IsSynchroSummonable": {
        "prefix": "IsSynchroSummonable",
        "description": "•Card.IsSynchroSummonable(Card c ,Card tuner|nil[, Group mg, int minc=0, int maxc=0])\n检查是否可以以tuner作为调整，用场上[或mg][minc ~ maxc 张卡]为同调素材对c进行同调召唤手续  \n如果tuner是nil，此函数与Card.IsSpecialSummonable作用相同  \nc 如果不是同调会返回 false  \n",
        "body": "IsSynchroSummonable"
    },
    "OPCODE_DIV": {
        "prefix": "OPCODE_DIV",
        "body": "OPCODE_DIV"
    },
    "Card.IsCanAddCounter": {
        "prefix": "Card.IsCanAddCounter",
        "description": "•Card.IsCanAddCounter(Card c, int countertype[, int count, int singly=false, int location])\n检查c是否可以[逐个(singly=true)在 location 区域]放置[count 个]countertype类型的指示物  \n",
        "body": "Card.IsCanAddCounter"
    },
    "Card.IsXyzSummonable": {
        "prefix": "Card.IsXyzSummonable",
        "description": "•Card.IsXyzSummonable(Card c, Group mg|nil[, minc=0, maxc=0])\n检查是否可以在场上的卡[或mg][中选出 minc-maxc 个超量素材]对c进行超量召唤手续  \n如果mg为nil，此函数与 c:IsSpecialSummonable(SUMMON_TYPE_XYZ)作用相同  \nc 如果不是超量会返回 false  \n",
        "body": "Card.IsXyzSummonable"
    },
    "MoveToField": {
        "prefix": "MoveToField",
        "description": "•Duel.MoveToField(Card c, int move_player, int target_player, int dest, int pos, bool enable[, int zone=0xff])\n让玩家move_player把c移动的target_player的场上，返回值表示是否成功  \ndest只能是LOCATION_MZONE或者LOCATION_SZONE，pos表示可选表示形式， enable 表示是否立刻适用c的效果， zone 表示必须要放到的格子  \n",
        "body": "MoveToField"
    },
    "Duel.IsPlayerCanSendtoHand": {
        "prefix": "Duel.IsPlayerCanSendtoHand",
        "description": "•Duel.IsPlayerCanSendtoHand(int player[, Card c])\n检查玩家是否能把卡片[c]送去手牌  \n",
        "body": "Duel.IsPlayerCanSendtoHand"
    },
    "Group.Clear": {
        "prefix": "Group.Clear",
        "description": "•Group.Clear(Group g)\n清空卡片组g里的内容  \n",
        "body": "Group.Clear"
    },
    "evospcon": {
        "prefix": "evospcon",
        "description": "•aux.evospcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n进化龙通用效果(用「进化虫」怪兽的效果特殊召唤)的过滤条件的简单写法，用在效果注册里 SetCondition  \nfunction Auxiliary.evospcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal st=e:GetHandler():GetSummonType()  \n\treturn st>=(SUMMON_TYPE_SPECIAL+150) and st<(SUMMON_TYPE_SPECIAL+180)  \nend  \n",
        "body": "evospcon"
    },
    "EFFECT_EQUIP_LIMIT": {
        "prefix": "EFFECT_EQUIP_LIMIT",
        "description": "装备对象限制",
        "body": "EFFECT_EQUIP_LIMIT"
    },
    "PHASE_END": {
        "prefix": "PHASE_END",
        "description": "结束阶段",
        "body": "PHASE_END"
    },
    "TYPE_LINK": {
        "prefix": "TYPE_LINK",
        "description": "连接",
        "body": "TYPE_LINK"
    },
    "RemoveOverlayCard": {
        "prefix": "RemoveOverlayCard",
        "description": "•Card.RemoveOverlayCard(Card c, int player, int min, int max, int reason)\n以reason为原因，让玩家player移除c叠放的min-max张卡，返回值表示是否成功  \n\n•Duel.RemoveOverlayCard(int player, int s, int o, int min, int max, int reason)\n让player以reason原因移除以player来看的指定位置的min-max张叠放卡，返回值表示取除的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n\n",
        "body": "RemoveOverlayCard"
    },
    "GetDecktopGroup": {
        "prefix": "GetDecktopGroup",
        "description": "•Duel.GetDecktopGroup(int player, int count)\n返回玩家player的卡组最上方的count张卡  \n",
        "body": "GetDecktopGroup"
    },
    "LOCATION_REASON_CONTROL": {
        "prefix": "LOCATION_REASON_CONTROL",
        "description": "Card.IsControlerCanBeChanged()使用",
        "body": "LOCATION_REASON_CONTROL"
    },
    "COUNTER_NEED_ENABLE": {
        "prefix": "COUNTER_NEED_ENABLE",
        "description": "在卡片本身放置上述指示物的標記(卡片守衛)",
        "body": "COUNTER_NEED_ENABLE"
    },
    "GLOBALFLAG_TUNE_MAGICIAN": {
        "prefix": "GLOBALFLAG_TUNE_MAGICIAN",
        "description": "超量素材检查标记（调弦之魔术师）",
        "body": "GLOBALFLAG_TUNE_MAGICIAN"
    },
    "ChainAttack": {
        "prefix": "ChainAttack",
        "description": "•Duel.ChainAttack([Card c])\n使攻击卡[或卡片c]可以再进行1次攻击（比如 大开辟，破灭的女王）  \n",
        "body": "ChainAttack"
    },
    "EFFECT_TRAP_ACT_IN_SET_TURN": {
        "prefix": "EFFECT_TRAP_ACT_IN_SET_TURN",
        "description": "陷阱可以在盖放的回合发动",
        "body": "EFFECT_TRAP_ACT_IN_SET_TURN"
    },
    "Card.IsSetCard": {
        "prefix": "Card.IsSetCard",
        "description": "•Card.IsSetCard(Card c, int setname)\n检查c是否是卡名含有setname的卡  \n",
        "body": "Card.IsSetCard"
    },
    "Duel.SelectMatchingCard": {
        "prefix": "Duel.SelectMatchingCard",
        "description": "•Duel.SelectMatchingCard(int sel_player, function f|nil, int player, int s, int o, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家sel_player选择以player来看的指定位置满足过滤条件f并且不等于ex的min-max张卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第9个参数开始为额外参数  \n",
        "body": "Duel.SelectMatchingCard"
    },
    "chainreg": {
        "prefix": "chainreg",
        "description": "•aux.chainreg(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n死亡魔导龙(81059524)用了此函数，用于 SetOperation ，其实就是相当于  \nfunction Auxiliary.chainreg(e,tp,eg,ep,ev,re,r,rp)  \n\tif e:GetHandler():GetFlagEffect(1)==0 then  \n\t\te:GetHandler():RegisterFlagEffect(1,RESET_EVENT+RESETS_STANDARD-RESET_TURN_SET+RESET_CHAIN,0,1)  \n\tend  \nend  \n",
        "body": "chainreg"
    },
    "EFFECT_FIRST_ATTACK": {
        "prefix": "EFFECT_FIRST_ATTACK",
        "description": "必须第一个攻击",
        "body": "EFFECT_FIRST_ATTACK"
    },
    "IsAbleToDeckAsCost": {
        "prefix": "IsAbleToDeckAsCost",
        "description": "•Card.IsAbleToDeckAsCost(Card c)\n检查c是否可以作为cost送去卡组  \n",
        "body": "IsAbleToDeckAsCost"
    },
    "Effect.SetLabelObject": {
        "prefix": "Effect.SetLabelObject",
        "description": "•Effect.SetLabelObject(Effect e, Card|Group|Effect labelobject)\n设置效果 e 的LabelObject属性  \n",
        "body": "Effect.SetLabelObject"
    },
    "Card.SetMaterial": {
        "prefix": "Card.SetMaterial",
        "description": "•Card.SetMaterial(Card c, nil|Group g)\n把g中的所有卡作为c的素材（上级召唤，特殊召唤）  \n第二个参数如果传入 nil ,是把卡片c 的素材清除  \n",
        "body": "Card.SetMaterial"
    },
    "Effect.SetOwnerPlayer": {
        "prefix": "Effect.SetOwnerPlayer",
        "description": "•Effect.SetOwnerPlayer(Effect e[, int player=0])\n设置效果 e 的OwnerPlayer属性为player  \n",
        "body": "Effect.SetOwnerPlayer"
    },
    "EFFECT_TYPE_IGNITION": {
        "prefix": "EFFECT_TYPE_IGNITION",
        "description": "起动效果",
        "body": "EFFECT_TYPE_IGNITION"
    },
    "EFFECT_REMOVE_TYPE": {
        "prefix": "EFFECT_REMOVE_TYPE",
        "description": "删除卡片种类",
        "body": "EFFECT_REMOVE_TYPE"
    },
    "Duel.GetFusionMaterial": {
        "prefix": "Duel.GetFusionMaterial",
        "description": "•Duel.GetFusionMaterial(int player)\n返回玩家player可用的用于融合召唤素材的卡片组  \n包含手卡·场上的怪兽的以及受 EFFECT_EXTRA_FUSION_MATERIAL 影响的卡  \n",
        "body": "Duel.GetFusionMaterial"
    },
    "aux.AddRitualProcGreater2Code": {
        "prefix": "aux.AddRitualProcGreater2Code",
        "description": "•aux.AddRitualProcGreater2Code(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \ncode1 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcGreater2(c,aux.FilterBoolFunction(Card.IsCode,code1),Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcGreater2Code"
    },
    "TIMING_STANDBY_PHASE": {
        "prefix": "TIMING_STANDBY_PHASE",
        "description": "准备阶段时点",
        "body": "TIMING_STANDBY_PHASE"
    },
    "Duel.GetOperationInfo": {
        "prefix": "Duel.GetOperationInfo",
        "description": "•Duel.GetOperationInfo(int chainc, int category)\n返回连锁chainc的category分类的操作信息，存在的话，则返回值为5个， chainc=0 则是表示当前连锁  \n第一个返回值是false的话表示不存在该分类  \n后4个返回值对应Duel.SetOperationInfo的后4个参数：Card|Group targets, int count, int target_player, int target_param  \n",
        "body": "Duel.GetOperationInfo"
    },
    "Card.IsAttackPos": {
        "prefix": "Card.IsAttackPos",
        "description": "•Card.IsAttackPos(Card c)\n检查c是否是攻击表示  \n",
        "body": "Card.IsAttackPos"
    },
    "DiscardDeck": {
        "prefix": "DiscardDeck",
        "description": "•Duel.DiscardDeck(int player, int count, int reason)\n以原因reason把玩家player的卡组最上端count张卡送去墓地，返回实际转移的数量  \n",
        "body": "DiscardDeck"
    },
    "CheckRemoveOverlayCard": {
        "prefix": "CheckRemoveOverlayCard",
        "description": "•Card.CheckRemoveOverlayCard(Card c, int player, int count, int reason)\n检查玩家player能否以reason为原因，至少移除c叠放的count张卡  \n\n•Duel.CheckRemoveOverlayCard(int player, int s, int o, int count, int reason)\n检查player能否以原因reason移除以player来看的指定位置至少count张卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n\n",
        "body": "CheckRemoveOverlayCard"
    },
    "EVENT_TO_HAND": {
        "prefix": "EVENT_TO_HAND",
        "description": "加入手牌时",
        "body": "EVENT_TO_HAND"
    },
    "CATEGORY_HANDES": {
        "prefix": "CATEGORY_HANDES",
        "description": "捨棄手牌效果",
        "body": "CATEGORY_HANDES"
    },
    "GetLinkAttribute": {
        "prefix": "GetLinkAttribute",
        "description": "•Card.GetLinkAttribute(Card c[, int player=PLAYER_NONE])\n返回c[由player连接召唤时]用作连接素材时的属性  \n",
        "body": "GetLinkAttribute"
    },
    "Card.GetSummonLocation": {
        "prefix": "Card.GetSummonLocation",
        "description": "•Card.GetSummonLocation(Card c)\n返回c的召唤/特殊召唤的位置  \n",
        "body": "Card.GetSummonLocation"
    },
    "GetOverlayGroup": {
        "prefix": "GetOverlayGroup",
        "description": "•Card.GetOverlayGroup(Card c)\n返回c当前叠放着的卡片组  \n\n•Duel.GetOverlayGroup(int player, int s, int o)\n返回以player来看的指定位置的所有叠放的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n\n",
        "body": "GetOverlayGroup"
    },
    "SELECT_HEADS": {
        "prefix": "SELECT_HEADS",
        "description": "正面",
        "body": "SELECT_HEADS"
    },
    "REASON_ADJUST": {
        "prefix": "REASON_ADJUST",
        "description": "调整（御前试合）",
        "body": "REASON_ADJUST"
    },
    "GrabSelectedCard": {
        "prefix": "GrabSelectedCard",
        "description": "•Duel.GrabSelectedCard()\n获取必须选择的卡并返回，同时将必须选择的卡清除（？）  \n",
        "body": "GrabSelectedCard"
    },
    "CreateToken": {
        "prefix": "CreateToken",
        "description": "•Duel.CreateToken(int player, int code)\n根据code新建一个衍生物并返回这个卡，该衍生物的拥有者为player  \n如果 player 不是 0或者1，则返回false  \n",
        "body": "CreateToken"
    },
    "EFFECT_FLAG_IMMEDIATELY_APPLY": {
        "prefix": "EFFECT_FLAG_IMMEDIATELY_APPLY",
        "description": "卡在发动时效果就立即适用",
        "body": "EFFECT_FLAG_IMMEDIATELY_APPLY"
    },
    "EFFECT_UPDATE_ATTACK": {
        "prefix": "EFFECT_UPDATE_ATTACK",
        "description": "改变攻击力（攻击力增加/减少）",
        "body": "EFFECT_UPDATE_ATTACK"
    },
    "Effect.GetActivateLocation": {
        "prefix": "Effect.GetActivateLocation",
        "description": "•Effect.GetActivateLocation(Effect e)\n返回效果e的发动区域  \n",
        "body": "Effect.GetActivateLocation"
    },
    "EFFECT_EXTRA_PENDULUM_SUMMON": {
        "prefix": "EFFECT_EXTRA_PENDULUM_SUMMON",
        "description": "extra pendulum summon",
        "body": "EFFECT_EXTRA_PENDULUM_SUMMON"
    },
    "Group.FromCards": {
        "prefix": "Group.FromCards",
        "description": "•Group.FromCards(...)\n不定参数，把传入的所有卡组合成一个卡片组g并返回，所有参数只能是 Card 类型。没有参数时，相当于Group.CreateGroup()  \n",
        "body": "Group.FromCards"
    },
    "Duel.TossCoin": {
        "prefix": "Duel.TossCoin",
        "description": "•Duel.TossCoin(int player, int count)\n让玩家player投count(<=5)次硬币，返回值为count个结果，0或者1, 正面是 1，反面是 0  \n",
        "body": "Duel.TossCoin"
    },
    "GetMaterial": {
        "prefix": "GetMaterial",
        "description": "•Card.GetMaterial(Card c)\n返回c出场使用的素材  \n",
        "body": "GetMaterial"
    },
    "EFFECT_FLAG_DAMAGE_CAL": {
        "prefix": "EFFECT_FLAG_DAMAGE_CAL",
        "description": "可以在伤害计算时发动",
        "body": "EFFECT_FLAG_DAMAGE_CAL"
    },
    "GetFieldGroupCount": {
        "prefix": "GetFieldGroupCount",
        "description": "•Duel.GetFieldGroupCount(int player, int s, int o)\n同 Duel.GetFieldGroup ，只是返回的是卡的数量  \n",
        "body": "GetFieldGroupCount"
    },
    "EFFECT_CANNOT_BE_LINK_MATERIAL": {
        "prefix": "EFFECT_CANNOT_BE_LINK_MATERIAL",
        "description": "不能做连接素材",
        "body": "EFFECT_CANNOT_BE_LINK_MATERIAL"
    },
    "IsLink": {
        "prefix": "IsLink",
        "description": "•Card.IsLink(Card c, int link1[, int link2,...])\n检查c的连接标记数量是否是 link1[, 或者为 link2...]  \n",
        "body": "IsLink"
    },
    "EVENT_BECOME_TARGET": {
        "prefix": "EVENT_BECOME_TARGET",
        "description": "成为效果对象时",
        "body": "EVENT_BECOME_TARGET"
    },
    "AddFusionProcCodeFunRep": {
        "prefix": "AddFusionProcCodeFunRep",
        "description": "•aux.AddFusionProcCodeFunRep(Card c, int code, function f, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为 code 的1只怪兽 ，和满足过滤条件 f 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,f,minc,maxc,code1)  \n",
        "body": "AddFusionProcCodeFunRep"
    },
    "GetFlagEffect": {
        "prefix": "GetFlagEffect",
        "description": "•Card.GetFlagEffect(Card c, int code)\n返回c的种类是code的标识效果的数量  \n\n•Duel.GetFlagEffect(int player, int code)\n返回玩家 player 的 code 标识效果的数量  \n\n",
        "body": "GetFlagEffect"
    },
    "REASON_DISSUMMON": {
        "prefix": "REASON_DISSUMMON",
        "description": "召唤失败",
        "body": "REASON_DISSUMMON"
    },
    "Card.RemoveCounter": {
        "prefix": "Card.RemoveCounter",
        "description": "•Card.RemoveCounter(Card c, int player, int countertype, int count, int reason)\n让玩家player以原因reason移除c上的count个countertype类型的指示物， countertype=0 则清除c的所有指示物  \n",
        "body": "Card.RemoveCounter"
    },
    "Duel.GetOperatedGroup": {
        "prefix": "Duel.GetOperatedGroup",
        "description": "•Duel.GetOperatedGroup()\n此函数返回之前一次卡片操作实际操作的卡片组。包括  \nDuel.Destroy, Duel.Remove, Duel.SendtoGrave,   \nDuel.SendtoHand, Duel.SendtoDeck, Duel.SendtoExtraP, Duel.Release,   \nDuel.ChangePosition, Duel.SpecialSummon, Duel.DiscardDeck  \n",
        "body": "Duel.GetOperatedGroup"
    },
    "Card.IsFusionSetCard": {
        "prefix": "Card.IsFusionSetCard",
        "description": "•Card.IsFusionSetCard(Card c, int setname)\n检查c作为融合素材时能否当作名字含有setname的卡  \n",
        "body": "Card.IsFusionSetCard"
    },
    "EFFECT_CANNOT_SELECT_BATTLE_TARGET": {
        "prefix": "EFFECT_CANNOT_SELECT_BATTLE_TARGET",
        "description": "對手不能選擇為攻擊對象",
        "body": "EFFECT_CANNOT_SELECT_BATTLE_TARGET"
    },
    "COUNTER_WITHOUT_PERMIT": {
        "prefix": "COUNTER_WITHOUT_PERMIT",
        "description": "可以放置在非特定對象的指示物",
        "body": "COUNTER_WITHOUT_PERMIT"
    },
    "aux.ChangeBattleDamage": {
        "prefix": "aux.ChangeBattleDamage",
        "description": "•aux.ChangeBattleDamage(int player, int value)\n如果 player 是受到战斗伤害的玩家，则改变战斗伤害为 value  \n",
        "body": "aux.ChangeBattleDamage"
    },
    "Duel.GrabSelectedCard": {
        "prefix": "Duel.GrabSelectedCard",
        "description": "•Duel.GrabSelectedCard()\n获取必须选择的卡并返回，同时将必须选择的卡清除（？）  \n",
        "body": "Duel.GrabSelectedCard"
    },
    "HINTMSG_FACEUPATTACK": {
        "prefix": "HINTMSG_FACEUPATTACK",
        "description": "请选择表侧攻击表示的怪兽",
        "body": "HINTMSG_FACEUPATTACK"
    },
    "MajesticCopy": {
        "prefix": "MajesticCopy",
        "description": "•Duel.MajesticCopy(Card c1, Card c2)\n救世星龙专用。把c2记述的效果复制给c1  \n强制发动的效果可以选择是否发动  \n##只说明常用的函数  \n",
        "body": "MajesticCopy"
    },
    "GetAttackedGroupCount": {
        "prefix": "GetAttackedGroupCount",
        "description": "•Card.GetAttackedGroupCount(Card c)\n返回c本回合攻击过的卡片数量  \n",
        "body": "GetAttackedGroupCount"
    },
    "Card.IsRankBelow": {
        "prefix": "Card.IsRankBelow",
        "description": "•Card.IsRankBelow(Card c, int rank)\n检查c是否是阶级rank以下（至少为1）  \n",
        "body": "Card.IsRankBelow"
    },
    "Tuner": {
        "prefix": "Tuner",
        "description": "•aux.Tuner(function f, ...)\n用于过滤满足单一过滤条件 f 的调整，,返回的是一个 有 bool 返回值类型的 函数，只要求是 调整怪兽的话，就写 aux.Tuner(nil)  \n第2个参数开始为额外参数  \n",
        "body": "Tuner"
    },
    "EFFECT_TUNER_MATERIAL_LIMIT": {
        "prefix": "EFFECT_TUNER_MATERIAL_LIMIT",
        "description": "同调素材限制",
        "body": "EFFECT_TUNER_MATERIAL_LIMIT"
    },
    "Card.IsPreviousSetCard": {
        "prefix": "Card.IsPreviousSetCard",
        "description": "•Card.IsPreviousSetCard(Card c, int setname)\n检查c位置变化之前是否是名字含有setname的卡  \n",
        "body": "Card.IsPreviousSetCard"
    },
    "REASON_LOST_TARGET": {
        "prefix": "REASON_LOST_TARGET",
        "description": "失去装备对象（被破坏）/失去叠放对象（不是被破坏）",
        "body": "REASON_LOST_TARGET"
    },
    "EVENT_TURN_END": {
        "prefix": "EVENT_TURN_END",
        "description": "回合结束时",
        "body": "EVENT_TURN_END"
    },
    "CATEGORY_SUMMON": {
        "prefix": "CATEGORY_SUMMON",
        "description": "含召唤的效果",
        "body": "CATEGORY_SUMMON"
    },
    "RegisterFlagEffect": {
        "prefix": "RegisterFlagEffect",
        "description": "•Card.RegisterFlagEffect(Card c, int code, int reset_flag, int property, int reset_count[, int label, int desc])\n为c注册一个标识用效果  \n注：注册给卡的标识用效果不会用于系统，  \n即使code与内置效果code重合也不会影响，  \n并且类型总是EFFECT_TYPE_SINGLE，reset方法，property和一般的效果相同，  \n并且不会无效化，不受卡的免疫效果影响  \n\n•Duel.RegisterFlagEffect(int player, int code, int reset_flag, int property, int reset_count=1[, int label=0])\n为玩家player注册全局环境下的标识效果，并返回这个效果  \n此效果总是影响玩家的(EFFECT_FLAG_PLAYER_TARGET)并且不会被无效化  \n其余部分与Card.RegisterFlagEffect相同  \n\n",
        "body": "RegisterFlagEffect"
    },
    "Effect.GetCode": {
        "prefix": "Effect.GetCode",
        "description": "•Effect.GetCode(Effect e)\n返回效果 e 的code属性  \n",
        "body": "Effect.GetCode"
    },
    "GetMutualLinkedGroupCount": {
        "prefix": "GetMutualLinkedGroupCount",
        "description": "•Card.GetMutualLinkedGroupCount(Card c)\n返回和c互相连接状态的卡片组的数量  \n",
        "body": "GetMutualLinkedGroupCount"
    },
    "EFFECT_CANNOT_BE_BATTLE_TARGET": {
        "prefix": "EFFECT_CANNOT_BE_BATTLE_TARGET",
        "description": "不能成为攻击对象",
        "body": "EFFECT_CANNOT_BE_BATTLE_TARGET"
    },
    "Duel.ChangeBattleDamage": {
        "prefix": "Duel.ChangeBattleDamage",
        "description": "•Duel.ChangeBattleDamage(int player, int value[, bool check=true])\n把玩家player在本次战斗中受到的伤害变成value，若 check=false 则原本战斗伤害就算为0也改变伤害  \n",
        "body": "Duel.ChangeBattleDamage"
    },
    "RACE_MACHINE": {
        "prefix": "RACE_MACHINE",
        "description": "机械",
        "body": "RACE_MACHINE"
    },
    "aux.TuneMagicianFilter": {
        "prefix": "aux.TuneMagicianFilter",
        "description": "•aux.TuneMagicianFilter(Card c, Effect e)\n调弦之魔术师(73941492)专用，,返回的是一个 有 bool 返回值类型的 函数 f(e,c)  \n",
        "body": "aux.TuneMagicianFilter"
    },
    "CheckUnionEquip": {
        "prefix": "CheckUnionEquip",
        "description": "•aux.CheckUnionEquip(Card uc, Card tc)\n检查同盟怪兽uc能否作为同盟装备在怪兽tc上  \n",
        "body": "CheckUnionEquip"
    },
    "AddCounter": {
        "prefix": "AddCounter",
        "description": "•Card.AddCounter(Card c, int countertype, int count[, int singly=false])\n为c放置count个countertype类型的指示物，singly为true表示逐个添加至count 个为止  \n",
        "body": "AddCounter"
    },
    "EFFECT_REVERSE_DAMAGE": {
        "prefix": "EFFECT_REVERSE_DAMAGE",
        "description": "伤害变回复",
        "body": "EFFECT_REVERSE_DAMAGE"
    },
    "aux.indsval": {
        "prefix": "aux.indsval",
        "description": "•aux.indsval(Effect e, Effect re, int rp)\n不会被自己的卡破坏的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.indsval(e,re,rp)  \n\treturn rp==e:GetHandlerPlayer()  \nend  \n",
        "body": "aux.indsval"
    },
    "AddFusionProcCodeRep": {
        "prefix": "AddFusionProcCodeRep",
        "description": "•aux.AddFusionProcCodeRep(Card c, int code, int cc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用 cc 个卡号为 code 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,table.unpack(tcode)) ,tcode 是包含 cc 个 code 的表  \n",
        "body": "AddFusionProcCodeRep"
    },
    "TYPE_TOKEN": {
        "prefix": "TYPE_TOKEN",
        "description": "衍生物",
        "body": "TYPE_TOKEN"
    },
    "Card.GetBattlePosition": {
        "prefix": "Card.GetBattlePosition",
        "description": "•Card.GetBattlePosition(Card c)\n返回c在本次战斗发生之前的表示形式  \n",
        "body": "Card.GetBattlePosition"
    },
    "Duel.SendtoExtraP": {
        "prefix": "Duel.SendtoExtraP",
        "description": "•Duel.SendtoExtraP(Card|Group targets, int player|nil, int reason)\n以reason原因把灵摆卡targets表侧表示送去玩家player的额外卡组，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的额外卡组  \n",
        "body": "Duel.SendtoExtraP"
    },
    "EFFECT_ALSO_BATTLE_DAMAGE": {
        "prefix": "EFFECT_ALSO_BATTLE_DAMAGE",
        "description": "对自己的战斗伤害让对方也承受",
        "body": "EFFECT_ALSO_BATTLE_DAMAGE"
    },
    "EFFECT_DISCARD_COST_CHANGE": {
        "prefix": "EFFECT_DISCARD_COST_CHANGE",
        "description": "反制陷阱捨棄手牌的代價改變(解放之阿里阿德涅)",
        "body": "EFFECT_DISCARD_COST_CHANGE"
    },
    "GetAttackedGroup": {
        "prefix": "GetAttackedGroup",
        "description": "•Card.GetAttackedGroup(Card c)\n返回c本回合攻击过的卡片组  \n",
        "body": "GetAttackedGroup"
    },
    "dogfcon": {
        "prefix": "dogfcon",
        "description": "•aux.dogfcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否是从自己场上被对方破坏送去墓地 SetCondition  \nfunction Auxiliary.dogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsPreviousLocation(LOCATION_ONFIELD) and c:GetPreviousControler()==tp  \n\t\tand c:IsReason(REASON_DESTROY) and rp==1-tp  \nend  \n",
        "body": "dogfcon"
    },
    "Duel.SetFusionMaterial": {
        "prefix": "Duel.SetFusionMaterial",
        "description": "•Duel.SetFusionMaterial(Group g)\n设置g为需要使用的融合素材  \n",
        "body": "Duel.SetFusionMaterial"
    },
    "IsSpecialSummonable": {
        "prefix": "IsSpecialSummonable",
        "description": "•Card.IsSpecialSummonable(Card c[, int sum_type])\n检查是否可以对c[用 sum_type 方式]进行特殊召唤手续  \n",
        "body": "IsSpecialSummonable"
    },
    "CHAININFO_CHAIN_COUNT": {
        "prefix": "CHAININFO_CHAIN_COUNT",
        "description": "连锁数",
        "body": "CHAININFO_CHAIN_COUNT"
    },
    "REASON_DRAW": {
        "prefix": "REASON_DRAW",
        "description": "抽卡",
        "body": "REASON_DRAW"
    },
    "Card.SetTurnCounter": {
        "prefix": "Card.SetTurnCounter",
        "description": "•Card.SetTurnCounter(Card c, int ct)\n设置c的回合计数器为 ct （光之护封剑等）  \n",
        "body": "Card.SetTurnCounter"
    },
    "Effect.GetActiveType": {
        "prefix": "Effect.GetActiveType",
        "description": "•Effect.GetActiveType(Effect e)\n返回效果 e 的效果类型（怪兽·魔法·陷阱等）  \n比如灵摆的结果是 灵摆+魔法  \n",
        "body": "Effect.GetActiveType"
    },
    "Card.IsAttackBelow": {
        "prefix": "Card.IsAttackBelow",
        "description": "•Card.IsAttackBelow(Card c, int atk)\n检查c是否是攻击力atk以下（至少为0）  \n",
        "body": "Card.IsAttackBelow"
    },
    "TIMING_DESTROY": {
        "prefix": "TIMING_DESTROY",
        "description": "破坏时点",
        "body": "TIMING_DESTROY"
    },
    "Duel.IsPlayerCanSpecialSummonCount": {
        "prefix": "Duel.IsPlayerCanSpecialSummonCount",
        "description": "•Duel.IsPlayerCanSpecialSummonCount(int player, int count)\n检查玩家player能否特殊召唤count次  \n",
        "body": "Duel.IsPlayerCanSpecialSummonCount"
    },
    "GetTurnCount": {
        "prefix": "GetTurnCount",
        "description": "•Duel.GetTurnCount([int player])\n返回[player所经过的]当前的回合数  \n",
        "body": "GetTurnCount"
    },
    "Duel.SetSynchroMaterial": {
        "prefix": "Duel.SetSynchroMaterial",
        "description": "•Duel.SetSynchroMaterial(Group g)\n设置g为需要使用的同调素材  \n",
        "body": "Duel.SetSynchroMaterial"
    },
    "GetChainInfo": {
        "prefix": "GetChainInfo",
        "description": "•Duel.GetChainInfo(int chainc, ...)\n返回连锁chainc的信息，如果chainc=0，则返回当前正在处理的连锁的信息  \n此函数根据传入的参数个数按顺序返回相应数量的返回值参数可以是:  \nCHAININFO_CHAIN_COUNT               连锁序号  \nCHAININFO_TRIGGERING_EFFECT         连锁的效果  \nCHAININFO_TRIGGERING_PLAYER         连锁的玩家  \nCHAININFO_TRIGGERING_CONTROLER      连锁发生位置所属玩家  \nCHAININFO_TRIGGERING_LOCATION       连锁发生位置  \nCHAININFO_TRIGGERING_SEQUENCE       连锁发生的位置的序号  \nCHAININFO_TARGET_CARDS              连锁的对象卡片组  \nCHAININFO_TARGET_PLAYER             连锁的对象玩家  \nCHAININFO_TARGET_PARAM              连锁的对象参数  \nCHAININFO_DISABLE_REASON            连锁被无效的原因效果  \nCHAININFO_DISABLE_PLAYER            连锁被无效的原因玩家  \nCHAININFO_CHAIN_ID                  连锁的唯一标识  \nCHAININFO_TYPE                      连锁卡片的类型（怪兽·魔法·陷阱）  \nCHAININFO_EXTTYPE                   连锁卡片的具体类型（例如同调怪兽·永续魔法·反击陷阱）  \n举例：  \nDuel.GetChainInfo(0,CHAININFO_TRIGGERING_LOCATION,CHAININFO_TARGET_CARDS)  \n将会返回当前连锁发生的位置和对象卡  \n",
        "body": "GetChainInfo"
    },
    "EVENT_SPSUMMON_NEGATED": {
        "prefix": "EVENT_SPSUMMON_NEGATED",
        "description": "特殊召唤被无效时",
        "body": "EVENT_SPSUMMON_NEGATED"
    },
    "EFFECT_SET_PROC": {
        "prefix": "EFFECT_SET_PROC",
        "description": "放置（通常召唤）规则",
        "body": "EFFECT_SET_PROC"
    },
    "CheckSummonedCount": {
        "prefix": "CheckSummonedCount",
        "description": "•Duel.CheckSummonedCount([Card c])\n检查回合玩家本回合是否还能通常召唤[卡片c]  \n",
        "body": "CheckSummonedCount"
    },
    "HINTMSG_POSCHANGE": {
        "prefix": "HINTMSG_POSCHANGE",
        "description": "请选择要改变表示形式的怪兽",
        "body": "HINTMSG_POSCHANGE"
    },
    "EFFECT_OLDUNION_STATUS": {
        "prefix": "EFFECT_OLDUNION_STATUS",
        "description": "旧同盟状态",
        "body": "EFFECT_OLDUNION_STATUS"
    },
    "GetPreviousControler": {
        "prefix": "GetPreviousControler",
        "description": "•Card.GetPreviousControler(Card c)\n返回c的位置变化之前的控制者  \n",
        "body": "GetPreviousControler"
    },
    "Message": {
        "prefix": "Message",
        "description": "•Debug.Message(any msg)\n显示消息  \n",
        "body": "Message"
    },
    "AddRitualProcUltimate": {
        "prefix": "AddRitualProcUltimate",
        "description": "•aux.AddRitualProcUltimate(Card c, function filter, function level_function, string greater_or_equal, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件， level_function 表示仪式召唤要满足的等级(返回值为int类型的函数)  \ngreater_or_equal 的值只有 \"Greater\" 和 \"Equal\"  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n",
        "body": "AddRitualProcUltimate"
    },
    "Card.IsCanRemoveCounter": {
        "prefix": "Card.IsCanRemoveCounter",
        "description": "•Card.IsCanRemoveCounter(Card c, int player, int countertype, int count, int reason)\n检查玩家player是否可以以原因reason移除c上的count个countertype类型的指示物  \n",
        "body": "Card.IsCanRemoveCounter"
    },
    "aux.IsMaterialListType": {
        "prefix": "aux.IsMaterialListType",
        "description": "•aux.IsMaterialListType(Card c, any ctype])\n检测 c 是否是有类型 ctype 为素材的卡  \nc.material_type  \n",
        "body": "aux.IsMaterialListType"
    },
    "IsLocation": {
        "prefix": "IsLocation",
        "description": "•Card.IsLocation(Card c, int location)\n检查c当前位置是否是location  \n注：location=LOCATION_MZONE时，怪兽召唤(广义的)之际或被无效会返回 false  \nlocation=LOCATION_SZONE时，魔陷发动无效会返回false  \n",
        "body": "IsLocation"
    },
    "EFFECT_TRAP_ACT_IN_HAND": {
        "prefix": "EFFECT_TRAP_ACT_IN_HAND",
        "description": "陷阱可以从手牌发动",
        "body": "EFFECT_TRAP_ACT_IN_HAND"
    },
    "EVENT_DISCARD": {
        "prefix": "EVENT_DISCARD",
        "description": "丢弃手牌时",
        "body": "EVENT_DISCARD"
    },
    "EFFECT_LPCOST_REPLACE": {
        "prefix": "EFFECT_LPCOST_REPLACE",
        "description": "以其他動作代替生命值代价",
        "body": "EFFECT_LPCOST_REPLACE"
    },
    "Duel.SendtoHand": {
        "prefix": "Duel.SendtoHand",
        "description": "•Duel.SendtoHand(Card|Group targets, int player|nil, int reason)\n以reason原因把targets送去玩家player的手牌，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的手牌  \n",
        "body": "Duel.SendtoHand"
    },
    "Duel.IsEnvironment": {
        "prefix": "Duel.IsEnvironment",
        "description": "•Duel.IsEnvironment(int code[, int player=PLAYER_ALL, int loc = LOCATION_FZONE + LOCATION_ONFIELD])\n检查场地代号是否是code [，来源玩家是否是 player][，生效区域是否在 loc 内]  \n场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值  \n来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者  \n",
        "body": "Duel.IsEnvironment"
    },
    "Duel.NegateEffect": {
        "prefix": "Duel.NegateEffect",
        "description": "•Duel.NegateEffect(int chainc)\n使连锁chainc的效果无效，返回值表示是否成功  \nchainc=0 表示当前效果  \n",
        "body": "Duel.NegateEffect"
    },
    "Group.GetCount": {
        "prefix": "Group.GetCount",
        "description": "•Group.GetCount(Group g)\n返回卡片组g中卡的数量  \n",
        "body": "Group.GetCount"
    },
    "Release": {
        "prefix": "Release",
        "description": "•Duel.Release(Card|Group targets, int reason)\n以reason原因解放targets ，返回值是实际解放的数量  \n如果reason含有REASON_COST，则不会检查卡片是否不受效果影响  \n",
        "body": "Release"
    },
    "TIMING_MSET": {
        "prefix": "TIMING_MSET",
        "description": "放置怪兽时点",
        "body": "TIMING_MSET"
    },
    "EFFECT_SET_DEFENSE": {
        "prefix": "EFFECT_SET_DEFENSE",
        "description": "设置防御力",
        "body": "EFFECT_SET_DEFENSE"
    },
    "Card.SetSPSummonOnce": {
        "prefix": "Card.SetSPSummonOnce",
        "description": "•Card.SetSPSummonOnce(Card c, int spsummon_code)\n设置c一回合只能进行1次特殊召唤（灵兽，波动龙）  \n相同的spsummon_code共用1个次数  \n",
        "body": "Card.SetSPSummonOnce"
    },
    "IsLinkRace": {
        "prefix": "IsLinkRace",
        "description": "•Card.IsLinkRace(Card c, int race[, int player=PLAYER_NONE])\n检查c[由player连接召唤时]用作连接素材时是否属于种族race  \n",
        "body": "IsLinkRace"
    },
    "EFFECT_CANNOT_ACTIVATE": {
        "prefix": "EFFECT_CANNOT_ACTIVATE",
        "description": "玩家不能发动效果",
        "body": "EFFECT_CANNOT_ACTIVATE"
    },
    "Effect.SetTarget": {
        "prefix": "Effect.SetTarget",
        "description": "•Effect.SetTarget(Effect e, function targ_func)\n设置效果 e 的Target属性  \n",
        "body": "Effect.SetTarget"
    },
    "fuslimit": {
        "prefix": "fuslimit",
        "description": "•Auxiliary.fuslimit(Effect e, Effect se, int sp, int st)\n不能用 融合召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.fuslimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_FUSION==SUMMON_TYPE_FUSION  \nend  \n",
        "body": "fuslimit"
    },
    "aux.AddFusionProcMix": {
        "prefix": "aux.AddFusionProcMix",
        "description": "•aux.AddFusionProcMix(Card c, bool sub, bool insf, ...)\n为c 添加融合召唤手续  \n用额外参数里的卡各1张为融合素材,额外参数的类型 可以是 function 或者 卡密(int code),  \nsub表示能否使用融合代替素材，insf 为false表示必须用素材融合召唤。若这只怪兽融合召唤只能使用上述的卡进行，sub 和 insf 都要填 false  \n#以下融合函数这2个参数相同  \n",
        "body": "aux.AddFusionProcMix"
    },
    "HINTMSG_TODECK": {
        "prefix": "HINTMSG_TODECK",
        "description": "请选择要返回卡组的卡",
        "body": "HINTMSG_TODECK"
    },
    "LINK_MARKER_BOTTOM_LEFT": {
        "prefix": "LINK_MARKER_BOTTOM_LEFT",
        "description": "↙",
        "body": "LINK_MARKER_BOTTOM_LEFT"
    },
    "CHAININFO_TRIGGERING_ATTRIBUTE": {
        "prefix": "CHAININFO_TRIGGERING_ATTRIBUTE",
        "description": "连锁发生时的属性",
        "body": "CHAININFO_TRIGGERING_ATTRIBUTE"
    },
    "Duel.SetLP": {
        "prefix": "Duel.SetLP",
        "description": "•Duel.SetLP(int player, int lp)\n设置玩家player的当前LP为lp  \n",
        "body": "Duel.SetLP"
    },
    "EFFECT_TRIPLE_TRIBUTE": {
        "prefix": "EFFECT_TRIPLE_TRIBUTE",
        "description": "N/A",
        "body": "EFFECT_TRIPLE_TRIBUTE"
    },
    "aux.tdcfop": {
        "prefix": "aux.tdcfop",
        "description": "•aux.tdcfop(Card c)\n卡片 c 的返回卡组的接触融合的操作函数。如果素材有里侧表示的，会展示  \nfunction Auxiliary.tdcfop(c)  \n\treturn\tfunction(g)  \n\t\t\t\tlocal cg=g:Filter(Card.IsFacedown,nil)  \n\t\t\t\tif cg:GetCount()>0 then  \n\t\t\t\t\tDuel.ConfirmCards(1-c:GetControler(),cg)  \n\t\t\t\tend  \n\t\t\t\tDuel.SendtoDeck(g,nil,2,REASON_COST)  \n\t\t\tend  \nend  \n",
        "body": "aux.tdcfop"
    },
    "RESET_CHAIN": {
        "prefix": "RESET_CHAIN",
        "description": "连锁结束重置",
        "body": "RESET_CHAIN"
    },
    "TYPE_FUSION": {
        "prefix": "TYPE_FUSION",
        "description": "融合",
        "body": "TYPE_FUSION"
    },
    "SelectPosition": {
        "prefix": "SelectPosition",
        "description": "•Duel.SelectPosition(int player, Card c, int pos)\n让玩家player选择c的表示形式（返回值是一个int 类型的，但是我不知道是什么）  \n",
        "body": "SelectPosition"
    },
    "EFFECT_MATERIAL_LIMIT": {
        "prefix": "EFFECT_MATERIAL_LIMIT",
        "body": "EFFECT_MATERIAL_LIMIT"
    },
    "EFFECT_SCRAP_CHIMERA": {
        "prefix": "EFFECT_SCRAP_CHIMERA",
        "description": "废铁奇美拉",
        "body": "EFFECT_SCRAP_CHIMERA"
    },
    "CheckUniqueOnField": {
        "prefix": "CheckUniqueOnField",
        "description": "•Card.CheckUniqueOnField(Card c,int check_player[, int check_location=LOCATION_ONFIELD, Card icard|nil])\n检查c在check_player场上的唯一性  \n",
        "body": "CheckUniqueOnField"
    },
    "GetEnvironment": {
        "prefix": "GetEnvironment",
        "description": "•Duel.GetEnvironment()\n返回两个值，表示当前场地代号，以及当前场地效果的来源玩家  \n场地代号指当前生效的场地卡的代号，或者海神的巫女等卡把场地变化效果的值  \n来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者  \n",
        "body": "GetEnvironment"
    },
    "CancelToGrave": {
        "prefix": "CancelToGrave",
        "description": "•Card.CancelToGrave(Card c[, bool cancel=true])\n取消送墓确定状态，cancel=false则重新设置送墓确定状态  \n注：送墓确定状态指的是在场上发动的不留场的魔法和陷阱后，这些卡片的状态  \n送墓确定状态中的卡无法返回手牌和卡组，并且连锁结束时送去墓地  \n此函数的作用是取消此状态使其留场，用于光之护封剑和废铁稻草人等卡  \n",
        "body": "CancelToGrave"
    },
    "EFFECT_EXTRA_RITUAL_MATERIAL": {
        "prefix": "EFFECT_EXTRA_RITUAL_MATERIAL",
        "description": "在墓地当做仪式祭品",
        "body": "EFFECT_EXTRA_RITUAL_MATERIAL"
    },
    "Duel.IsCanAddCounter": {
        "prefix": "Duel.IsCanAddCounter",
        "description": "•Duel.IsCanAddCounter(int player[, int countertype, int count, Card c])\n检查玩家player能否[向卡片c]添加[count个countertype类型的]指示物，如果 player 不是 0或者1，则返回false  \n额外参数如果要用，必须全写  \n",
        "body": "Duel.IsCanAddCounter"
    },
    "Duel.SendtoDeck": {
        "prefix": "Duel.SendtoDeck",
        "description": "•Duel.SendtoDeck(Card|Group targets, int player|nil, int seq, int reason)\n以reason原因把targets送去玩家player的卡组，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的卡组  \n如果seq=0，则是返回卡组最顶端；seq=1则是返回卡组最底端；  \n其余情况则是返回最顶端并且标记需要洗卡组  \n",
        "body": "Duel.SendtoDeck"
    },
    "GetFieldCard": {
        "prefix": "GetFieldCard",
        "description": "•Duel.GetFieldCard(int player, int location, int seq)\n返回玩家player的场上位于location序号为seq的卡，常用于获得场地区域·灵摆区域的卡  \n注：召唤·反转召唤·特殊召唤 之际 或者 发动被无效 的卡无法获取  \n",
        "body": "GetFieldCard"
    },
    "Debug.Message": {
        "prefix": "Debug.Message",
        "description": "•Debug.Message(any msg)\n显示消息  \n",
        "body": "Debug.Message"
    },
    "Card.ReleaseEffectRelation": {
        "prefix": "Card.ReleaseEffectRelation",
        "description": "•Card.ReleaseEffectRelation(Card c, Effect e)\n手动释放c与效果e的联系  \n",
        "body": "Card.ReleaseEffectRelation"
    },
    "EVENT_CHAIN_SOLVED": {
        "prefix": "EVENT_CHAIN_SOLVED",
        "description": "连锁处理结束时",
        "body": "EVENT_CHAIN_SOLVED"
    },
    "Equip": {
        "prefix": "Equip",
        "description": "•Duel.Equip(int player, Card c1, Card c2[, bool up=true, bool is_step=false])\n让玩家player把c1作为装备卡装备给c2，返回值表示是否成功  \nup=false则保持装备卡之前的表示形式  \nis_step=true则是装备过程的分解，需要配合Duel.EquipComplete使用  \n",
        "body": "Equip"
    },
    "aux.AddXyzProcedureLevelFree": {
        "prefix": "aux.AddXyzProcedureLevelFree",
        "description": "•aux.AddXyzProcedureLevelFree(Card c, function f|nil, function gf|nil, int minc, int maxc[, function alterf|nil, int desc|nil, function op|nil])\n为c添加超量召唤手续  \n用满足条件 f 的卡片组里，满足 gf 的 minc[-maxc] 只怪兽进行叠放，f 为必要条件，gf 为额外条件  \n或者在单个怪兽（通常是超量怪兽）上叠放  \nalterf为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（比如 闪光No.0 希望之异热同心）  \n",
        "body": "aux.AddXyzProcedureLevelFree"
    },
    "IsAttack": {
        "prefix": "IsAttack",
        "description": "•Card.IsAttack(Card c, int atk1[, int atk2,...])\n检查c的攻击力是否是 atk1[, 或者为 atk2...]，如果c不是怪兽卡，或者不在 LOCATION_MZONE 则都返回false  \n",
        "body": "IsAttack"
    },
    "EnableReviveLimit": {
        "prefix": "EnableReviveLimit",
        "description": "•Card.EnableReviveLimit(Card c)\n为c添加苏生限制  \n##实际上是不可复制、不会被无效的EFFECT_UNSUMMONABLE_CARD和EFFECT_REVIVE_LIMIT效果  \n",
        "body": "EnableReviveLimit"
    },
    "LOCATION_DECKSHF": {
        "prefix": "LOCATION_DECKSHF",
        "description": "弹回卡组并洗牌",
        "body": "LOCATION_DECKSHF"
    },
    "Duel.SelectOption": {
        "prefix": "Duel.SelectOption",
        "description": "•Duel.SelectOption(int player, int desc1, ...)\n让玩家选择选项，从第二个参数开始，每一个参数代表一条选项  \n返回选择的选项的序号(从0开始)  \n",
        "body": "Duel.SelectOption"
    },
    "EFFECT_EXTRA_FUSION_MATERIAL": {
        "prefix": "EFFECT_EXTRA_FUSION_MATERIAL",
        "description": "增加融合素材(万溶炼金师)",
        "body": "EFFECT_EXTRA_FUSION_MATERIAL"
    },
    "GetTextAttack": {
        "prefix": "GetTextAttack",
        "description": "•Card.GetTextAttack(Card c)\n返回c的卡片记载的攻击力，返回值是负数表示是\"?\"  \n",
        "body": "GetTextAttack"
    },
    "DisableShuffleCheck": {
        "prefix": "DisableShuffleCheck",
        "description": "•Duel.DisableShuffleCheck([bool disable=true])\n使下一个操作不检查是否需要洗切卡组或手卡  \n注：如果不调用此函数，  \n除了调用Duel.DiscardDeck和Duel.Draw之外从卡组中取出卡或者把卡加入手卡  \n或者把卡加入卡组（非最上端或最底端）时，系统会自动在效果处理结束时洗切卡组或手卡  \n如果不希望如此，比如从卡组顶端除外一张卡等操作，那么需要调用此函数  \n此函数仅保证紧接着的一次操作不会进行洗卡检测  \n",
        "body": "DisableShuffleCheck"
    },
    "UseCountLimit": {
        "prefix": "UseCountLimit",
        "description": "•Effect.UseCountLimit(Effect e, int p[, int count=1, bool oath_only=false])\n手动减少玩家 p 对效果 e 的 count 个可用次数[ oath_only 为 该效果是否是 EFFECT_FLAG_OATH]  \n",
        "body": "UseCountLimit"
    },
    "EVENT_BE_PRE_MATERIAL": {
        "prefix": "EVENT_BE_PRE_MATERIAL",
        "description": "将要作为融合/仪式同调/超量素材时",
        "body": "EVENT_BE_PRE_MATERIAL"
    },
    "ChangeAttackTarget": {
        "prefix": "ChangeAttackTarget",
        "description": "•Duel.ChangeAttackTarget(Card c|nil)\n将攻击对象变为c，c为nil表示直接攻击，返回值表示是否成功转移攻击对象  \n",
        "body": "ChangeAttackTarget"
    },
    "GLOBALFLAG_SCRAP_CHIMERA": {
        "prefix": "GLOBALFLAG_SCRAP_CHIMERA",
        "description": "废铁奇美拉标记",
        "body": "GLOBALFLAG_SCRAP_CHIMERA"
    },
    "EVENT_FLIP_SUMMON": {
        "prefix": "EVENT_FLIP_SUMMON",
        "description": "翻转召唤之际",
        "body": "EVENT_FLIP_SUMMON"
    },
    "Duel.GetChainMaterial": {
        "prefix": "Duel.GetChainMaterial",
        "description": "•Duel.GetChainMaterial(int player)\n返回玩家player受到的连锁素材的效果，此函数仅用于融合类卡的效果  \n",
        "body": "Duel.GetChainMaterial"
    },
    "Card.IsSummonableCard": {
        "prefix": "Card.IsSummonableCard",
        "description": "•Card.IsSummonableCard(Card c)\n检查c是否是可通常召唤的卡  \n",
        "body": "Card.IsSummonableCard"
    },
    "TYPE_SPSUMMON": {
        "prefix": "TYPE_SPSUMMON",
        "description": "特殊召唤",
        "body": "TYPE_SPSUMMON"
    },
    "GetLinkCode": {
        "prefix": "GetLinkCode",
        "description": "•Card.GetLinkCode(Card c)\n返回c作为link素材的卡号（包括c原本的卡号）  \n",
        "body": "GetLinkCode"
    },
    "aux.AddSynchroProcedure2": {
        "prefix": "aux.AddSynchroProcedure2",
        "description": "•aux.AddSynchroProcedure2(Card c, function f1, function f2)\n等价于aux.AddSynchroProcedure(c,f1,f2,1,1)  \n",
        "body": "aux.AddSynchroProcedure2"
    },
    "IsContains": {
        "prefix": "IsContains",
        "description": "•Group.IsContains(Group g, Card c)\n检查g中是否存在卡片c  \n",
        "body": "IsContains"
    },
    "ATTRIBUTE_WATER": {
        "prefix": "ATTRIBUTE_WATER",
        "description": "水",
        "body": "ATTRIBUTE_WATER"
    },
    "EFFECT_SWAP_AD": {
        "prefix": "EFFECT_SWAP_AD",
        "description": "交换攻防(超級漏洞人)",
        "body": "EFFECT_SWAP_AD"
    },
    "Card.IsDualState": {
        "prefix": "Card.IsDualState",
        "description": "•Card.IsDualState(Card c)\n检查c属否处于再召唤状态  \n",
        "body": "Card.IsDualState"
    },
    "Duel.IsPlayerCanRelease": {
        "prefix": "Duel.IsPlayerCanRelease",
        "description": "•Duel.IsPlayerCanRelease(int player[, Card c])\n检查玩家player是否能解放[卡片 c]  \n",
        "body": "Duel.IsPlayerCanRelease"
    },
    "IsRelateToEffect": {
        "prefix": "IsRelateToEffect",
        "description": "•Card.IsRelateToEffect(Card c, Effect e)\n检查c是否和效果e有联系  \n注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象  \n（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）  \n会自动与那个效果建立联系，一旦离场，联系会重置  \n",
        "body": "IsRelateToEffect"
    },
    "Duel.GetTributeCount": {
        "prefix": "Duel.GetTributeCount",
        "description": "•Duel.GetTributeCount(Card c[, Group mg|nil, bool ex=false])\n返回场上[或mg中]用于通常召唤c的祭品数量，ex=true则允许对方场上的怪兽（太阳神之翼神龙-球体形）  \n此数量不一定等于Duel.GetTributeGroup的返回值中的卡片数量  \n因为某些卡可以作为多个祭品来使用  \n",
        "body": "Duel.GetTributeCount"
    },
    "Duel.CheckLocation": {
        "prefix": "Duel.CheckLocation",
        "description": "•Duel.CheckLocation(int player, int location, int seq)\n检查玩家player的场上位于location序号为seq的空格是否可用  \n",
        "body": "Duel.CheckLocation"
    },
    "Duel.GetOverlayCount": {
        "prefix": "Duel.GetOverlayCount",
        "description": "•Duel.GetOverlayCount(int player, int s, int o)\n返回以player来看的指定位置的所有叠放的卡的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n",
        "body": "Duel.GetOverlayCount"
    },
    "HINTMSG_XMATERIAL": {
        "prefix": "HINTMSG_XMATERIAL",
        "description": "请选择要作为超量素材的卡",
        "body": "HINTMSG_XMATERIAL"
    },
    "EFFECT_COUNT_CODE_OATH": {
        "prefix": "EFFECT_COUNT_CODE_OATH",
        "description": "发动次数限制(誓约次数, 发动被无效不计数)",
        "body": "EFFECT_COUNT_CODE_OATH"
    },
    "SetStatus": {
        "prefix": "SetStatus",
        "description": "•Card.SetStatus(Card c, int state, bool enable)\n给c设置或者取消状态码  \n除非妳清楚的了解每个状态码的含意，否则不要轻易使用此函数  \n",
        "body": "SetStatus"
    },
    "RDComplete": {
        "prefix": "RDComplete",
        "description": "•Duel.RDComplete()\n在调用Duel.Damage/Duel.Recover时，若is_step参数为true，则需调用此函数触发时点  \n",
        "body": "RDComplete"
    },
    "IsCanAddCounter": {
        "prefix": "IsCanAddCounter",
        "description": "•Card.IsCanAddCounter(Card c, int countertype[, int count, int singly=false, int location])\n检查c是否可以[逐个(singly=true)在 location 区域]放置[count 个]countertype类型的指示物  \n\n•Duel.IsCanAddCounter(int player[, int countertype, int count, Card c])\n检查玩家player能否[向卡片c]添加[count个countertype类型的]指示物，如果 player 不是 0或者1，则返回false  \n额外参数如果要用，必须全写  \n\n",
        "body": "IsCanAddCounter"
    },
    "RandomSelect": {
        "prefix": "RandomSelect",
        "description": "•Group.RandomSelect(Group g, int player, int count)\n让玩家player从卡片组g中随机选择count张卡  \n因为是随机选择，所以参数player基本无用，由系统随机选取  \n",
        "body": "RandomSelect"
    },
    "NegateSummon": {
        "prefix": "NegateSummon",
        "description": "•Duel.NegateSummon(Card|Group targets)\n使正在召唤·反转召唤·特殊召唤的targets的召唤无效  \n",
        "body": "NegateSummon"
    },
    "AddFusionProcCodeRep2": {
        "prefix": "AddFusionProcCodeRep2",
        "description": "•aux.AddFusionProcCodeRep2(Card c, int code, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用 minc-maxc 个卡号为 code 的怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,code1,minc,maxc)  \n",
        "body": "AddFusionProcCodeRep2"
    },
    "Duel.GetAttackTarget": {
        "prefix": "Duel.GetAttackTarget",
        "description": "•Duel.GetAttackTarget()\n返回此次战斗被攻击的卡，如果返回nil表示是直接攻击  \n",
        "body": "Duel.GetAttackTarget"
    },
    "EFFECT_REVIVE_LIMIT": {
        "prefix": "EFFECT_REVIVE_LIMIT",
        "description": "有苏生限制的怪獸(Card.EnableReviveLimit())",
        "body": "EFFECT_REVIVE_LIMIT"
    },
    "GetTarget": {
        "prefix": "GetTarget",
        "description": "•Effect.GetTarget(Effect e)\n返回效果 e 的target属性  \n",
        "body": "GetTarget"
    },
    "EFFECT_TYPE_TARGET": {
        "prefix": "EFFECT_TYPE_TARGET",
        "description": "影响持续取的对象的效果（基本只用于魔陷）",
        "body": "EFFECT_TYPE_TARGET"
    },
    "IsReason": {
        "prefix": "IsReason",
        "description": "•Card.IsReason(Card c, int reason)\n检查c是否包含原因reason  \n",
        "body": "IsReason"
    },
    "STATUS_FORM_CHANGED": {
        "prefix": "STATUS_FORM_CHANGED",
        "description": "改变过表示形式",
        "body": "STATUS_FORM_CHANGED"
    },
    "OPCODE_ISTYPE": {
        "prefix": "OPCODE_ISTYPE",
        "body": "OPCODE_ISTYPE"
    },
    "EFFECT_SUMMON_PROC": {
        "prefix": "EFFECT_SUMMON_PROC",
        "description": "召唤规则效果",
        "body": "EFFECT_SUMMON_PROC"
    },
    "EVENT_SUMMON": {
        "prefix": "EVENT_SUMMON",
        "description": "召唤之际（怪兽还没上场、神宣等时点）",
        "body": "EVENT_SUMMON"
    },
    "SetHint": {
        "prefix": "SetHint",
        "description": "•Card.SetHint(Card c, int type, int value)\n为c设置类型为type的卡片提示信息  \ntype只能为以下值，对应的value类型为  \nCHINT_TURN              回合数  \nCHINT_CARD              卡片id  \nCHINT_RACE              种族  \nCHINT_ATTRIBUTE         属性  \nCHINT_NUMBER            数字  \nCHINT_DESC              描述  \n",
        "body": "SetHint"
    },
    "EFFECT_QP_ACT_IN_NTPHAND": {
        "prefix": "EFFECT_QP_ACT_IN_NTPHAND",
        "description": "对方回合从自己手卡发动（失乐的圣女）",
        "body": "EFFECT_QP_ACT_IN_NTPHAND"
    },
    "EnablePendulumAttribute": {
        "prefix": "EnablePendulumAttribute",
        "description": "•aux.EnablePendulumAttribute(Card c[, bool active_effect=true])\n为灵摆怪兽c添加灵摆怪兽属性（灵摆召唤，灵摆卡的发动）  \nactive_effect=false则不注册灵摆卡“卡的发动”的效果  \n",
        "body": "EnablePendulumAttribute"
    },
    "Effect.GetCost": {
        "prefix": "Effect.GetCost",
        "description": "•Effect.GetCost(Effect e)\n返回效果 e 的cost属性  \n",
        "body": "Effect.GetCost"
    },
    "Card.GetEquipGroup": {
        "prefix": "Card.GetEquipGroup",
        "description": "•Card.GetEquipGroup(Card c)\n返回c当前装备着的卡片组  \n",
        "body": "Card.GetEquipGroup"
    },
    "CHAININFO_TYPE": {
        "prefix": "CHAININFO_TYPE",
        "description": "连锁类型",
        "body": "CHAININFO_TYPE"
    },
    "ritlimit": {
        "prefix": "ritlimit",
        "description": "•aux.ritlimit(Effect e, Effect se, int sp, int st)\n不能用 仪式召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.ritlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_RITUAL==SUMMON_TYPE_RITUAL  \nend  \n",
        "body": "ritlimit"
    },
    "REASON_FLIP": {
        "prefix": "REASON_FLIP",
        "description": "翻转",
        "body": "REASON_FLIP"
    },
    "Duel.MajesticCopy": {
        "prefix": "Duel.MajesticCopy",
        "description": "•Duel.MajesticCopy(Card c1, Card c2)\n救世星龙专用。把c2记述的效果复制给c1  \n强制发动的效果可以选择是否发动  \n##只说明常用的函数  \n",
        "body": "Duel.MajesticCopy"
    },
    "CATEGORY_EQUIP": {
        "prefix": "CATEGORY_EQUIP",
        "description": "装备效果",
        "body": "CATEGORY_EQUIP"
    },
    "AnnounceType": {
        "prefix": "AnnounceType",
        "description": "•Duel.AnnounceType(int player)\n让玩家player宣言一个卡片类型（怪兽·魔法·陷阱）  \n别想着直接宣言 复合类型（永续魔法 等）  \n",
        "body": "AnnounceType"
    },
    "Duel.SelectDisableField": {
        "prefix": "Duel.SelectDisableField",
        "description": "•Duel.SelectDisableField(int player, int count, int s, int o, int filter)\n让玩家player选择指定位置(s 和 o)中filter以外的count个格子，并返回选择位置的标记  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n注意这个函数并不会实际无效所选格子  \n常用于选择区域不能使用  \n##位置标记的定义如下  \n##flag = 0;  \n##seq为在玩家p，位置l中选择的格子序号  \n##for(int32 i = 0; i < count; ++i) {  \n##\tflag |= 1 << (seq[i] + (p[i] == player ? 0 : 16) + (l[i] == LOCATION_MZONE ? 0 : 8));  \n##}  \n",
        "body": "Duel.SelectDisableField"
    },
    "IsPlayerCanFlipSummon": {
        "prefix": "IsPlayerCanFlipSummon",
        "description": "•Duel.IsPlayerCanFlipSummon(int player[, Card c])\n检查玩家player是否可以反转召唤[卡片 c]  \n",
        "body": "IsPlayerCanFlipSummon"
    },
    "REASON_RITUAL": {
        "prefix": "REASON_RITUAL",
        "description": "用於仪式召喚",
        "body": "REASON_RITUAL"
    },
    "Duel.GetCurrentChain": {
        "prefix": "Duel.GetCurrentChain",
        "description": "•Duel.GetCurrentChain()\n返回当前正在处理的连锁序号  \n",
        "body": "Duel.GetCurrentChain"
    },
    "IsPreviousSetCard": {
        "prefix": "IsPreviousSetCard",
        "description": "•Card.IsPreviousSetCard(Card c, int setname)\n检查c位置变化之前是否是名字含有setname的卡  \n",
        "body": "IsPreviousSetCard"
    },
    "Effect.SetReset": {
        "prefix": "Effect.SetReset",
        "description": "•Effect.SetReset(Effect e, int reset_flag[, int reset_count=1])\n设置效果 e 的reset参数  \n",
        "body": "Effect.SetReset"
    },
    "initial_effect": {
        "prefix": "initial_effect",
        "description": "•initial_effect(Card c)\n载入卡片时调用  \n一般是注册初始卡片效果，以及设置苏生限制等等  \n",
        "body": "initial_effect"
    },
    "Duel.SetDiceResult": {
        "prefix": "Duel.SetDiceResult",
        "description": "•Duel.SetDiceResult(int res, ...)\n强行修改投骰子的结果为res ,最多5个参数，res只能是 1~255, ，其他数字全算作 1  \n此函数用于永续的EVENT_TOSS_DICE事件中  \n",
        "body": "Duel.SetDiceResult"
    },
    "Card.ReplaceEffect": {
        "prefix": "Card.ReplaceEffect",
        "description": "•Card.ReplaceEffect(Card c, int code, int reset_flag[, int reset_count=1])\n把c的效果替换为卡号是code的卡的效果，并且添加额外的reset条件  \n返回值是表示替换效果的代号id  \n",
        "body": "Card.ReplaceEffect"
    },
    "SetCountLimit": {
        "prefix": "SetCountLimit",
        "description": "•Effect.SetCountLimit(Effect e, int count=1[, int code=0])\n设置效果 e 的一回合可以发动的次数count（仅触发型效果有效），相同的code(不等于0或1时)共用1个次数  \ncode包含以下数值具有特殊的性质  \nEFFECT_COUNT_CODE_OATH          誓约使用次数  \nEFFECT_COUNT_CODE_DUEL          决斗中使用次数  \nEFFECT_COUNT_CODE_SINGLE        同一张卡多个效果公共使用次数（不限制同名卡）  \n",
        "body": "SetCountLimit"
    },
    "Group.SearchCard": {
        "prefix": "Group.SearchCard",
        "description": "•Group.SearchCard(Group g, function f, ...)\n过滤函数，返回g中满足筛选条件f的第一张卡，若没有则返回nil，从第3个参数开始为额外参数  \n",
        "body": "Group.SearchCard"
    },
    "IsExistingMatchingCard": {
        "prefix": "IsExistingMatchingCard",
        "description": "•Duel.IsExistingMatchingCard(function f|nil, int player, int s, int o, int count, Card|Group ex|nil, ...)\n过滤函数，检查以player来看的指定位置是否存在至少count张满足过滤条件f并且不等于ex的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第7个参数开始为额外参数  \n",
        "body": "IsExistingMatchingCard"
    },
    "RACE_BEAST": {
        "prefix": "RACE_BEAST",
        "description": "兽",
        "body": "RACE_BEAST"
    },
    "GetPreviousAttributeOnField": {
        "prefix": "GetPreviousAttributeOnField",
        "description": "•Card.GetPreviousAttributeOnField(Card c)\n返回c位置变化之前在场上的属性  \n",
        "body": "GetPreviousAttributeOnField"
    },
    "Group.Merge": {
        "prefix": "Group.Merge",
        "description": "•Group.Merge(Group g1, Group g2)\n把g2中的所有卡合并到g1，若g1中原本就有属于g2的卡，那些卡将不会重复  \n注：g2本身不会发生变化  \n",
        "body": "Group.Merge"
    },
    "Card.GetAttackableTarget": {
        "prefix": "Card.GetAttackableTarget",
        "description": "•Card.GetAttackableTarget(Card c)\n返回c可攻击的卡片组以及能否直接攻击  \n",
        "body": "Card.GetAttackableTarget"
    },
    "LOCATION_GRAVE": {
        "prefix": "LOCATION_GRAVE",
        "description": "墓地",
        "body": "LOCATION_GRAVE"
    },
    "GLOBALFLAG_SPSUMMON_ONCE": {
        "prefix": "GLOBALFLAG_SPSUMMON_ONCE",
        "description": "1回合只能特殊召喚1次(Card.SetSPSummonOnce())",
        "body": "GLOBALFLAG_SPSUMMON_ONCE"
    },
    "GetCurrentChain": {
        "prefix": "GetCurrentChain",
        "description": "•Duel.GetCurrentChain()\n返回当前正在处理的连锁序号  \n",
        "body": "GetCurrentChain"
    },
    "EFFECT_ADD_FUSION_CODE": {
        "prefix": "EFFECT_ADD_FUSION_CODE",
        "description": "作为融合素材时可以当作某一卡名(融合识别)",
        "body": "EFFECT_ADD_FUSION_CODE"
    },
    "AddFusionProcCode2FunRep": {
        "prefix": "AddFusionProcCode2FunRep",
        "description": "•aux.AddFusionProcCode2FunRep(Card c, int code1, int code2, function f, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为 code1,code2 的各1只怪兽 ，和满足过滤条件 f 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,f,minc,maxc,code1,code2)  \n",
        "body": "AddFusionProcCode2FunRep"
    },
    "IsSummonType": {
        "prefix": "IsSummonType",
        "description": "•Card.IsSummonType(Card c, int sumtype)\n检查c的召唤类型是否是sumtype  \n",
        "body": "IsSummonType"
    },
    "Duel.GetTurnCount": {
        "prefix": "Duel.GetTurnCount",
        "description": "•Duel.GetTurnCount([int player])\n返回[player所经过的]当前的回合数  \n",
        "body": "Duel.GetTurnCount"
    },
    "Card.ResetNegateEffect": {
        "prefix": "Card.ResetNegateEffect",
        "description": "•Card.ResetNegateEffect(Card c[, int code1,...])\n重置c受到的卡号为code1[, code2...]的卡片的效果的影响  \n",
        "body": "Card.ResetNegateEffect"
    },
    "Card.IsCanBeSpecialSummoned": {
        "prefix": "Card.IsCanBeSpecialSummoned",
        "description": "•Card.IsCanBeSpecialSummoned(Card c, Effect e, int sumtype, int sumplayer, bool nocheck, bool nolimit[, int sumpos=POS_FACEUP, int toplayer=sumplayer, int zone=0xff])\n检查c是否可以被玩家sumplayer用效果e[以sumtype方式和sumpos表示形式]特殊召唤[到玩家 toplayer 的区域zone]  \n如果nocheck是true则不检查c的召唤条件，如果nolimit是true则不检查c的苏生限制  \n",
        "body": "Card.IsCanBeSpecialSummoned"
    },
    "IsAttackAbove": {
        "prefix": "IsAttackAbove",
        "description": "•Card.IsAttackAbove(Card c, int atk)\n检查c是否是攻击力atk以上  \n",
        "body": "IsAttackAbove"
    },
    "STATUS_ATTACK_CANCELED": {
        "prefix": "STATUS_ATTACK_CANCELED",
        "description": "若其為攻擊者，則攻擊中止",
        "body": "STATUS_ATTACK_CANCELED"
    },
    "EFFECT_MATERIAL_CHECK": {
        "prefix": "EFFECT_MATERIAL_CHECK",
        "description": "检查素材",
        "body": "EFFECT_MATERIAL_CHECK"
    },
    "Card.GetTextDefense": {
        "prefix": "Card.GetTextDefense",
        "description": "•Card.GetTextDefense(Card c)\n返回c的卡片记载的守备力，返回值是负数表示是\"?\"  \n",
        "body": "Card.GetTextDefense"
    },
    "Card.GetDestination": {
        "prefix": "Card.GetDestination",
        "description": "•Card.GetDestination(Card c)\n返回c位置变化的目的地  \n此函数仅在处理位置转移代替效果时有效  \n",
        "body": "Card.GetDestination"
    },
    "Duel.IsChainNegatable": {
        "prefix": "Duel.IsChainNegatable",
        "description": "•Duel.IsChainNegatable(int chainc)\n检查连锁chainc的发动能否被无效  \n",
        "body": "Duel.IsChainNegatable"
    },
    "LinkSummon": {
        "prefix": "LinkSummon",
        "description": "•Duel.LinkSummon(int player, Card c, Group mg|nil[, Card lc, int minc=0, int maxc=0])\n让玩家player用场上[或mg][包含卡片 lc 在内][minc-maxc 张]的卡对c进行连接召唤手续  \n",
        "body": "LinkSummon"
    },
    "aux.AddLinkProcedure": {
        "prefix": "aux.AddLinkProcedure",
        "description": "•aux.AddLinkProcedure(Card c, function f|nil, int minc[, int maxc=99, function gf|nil])\n为c添加连接召唤手续  \n用 minc-maxc 个满足过滤条件 f [的卡片组里满足过滤条件 gf ]的怪兽作为连接素材  \n",
        "body": "aux.AddLinkProcedure"
    },
    "SetCode": {
        "prefix": "SetCode",
        "description": "•Effect.SetCode(Effect e, int code)\n设置效果 e 的Code属性  \n",
        "body": "SetCode"
    },
    "Effect.GetType": {
        "prefix": "Effect.GetType",
        "description": "•Effect.GetType(Effect e)\n返回效果 e 的Type属性  \n",
        "body": "Effect.GetType"
    },
    "GetTributeCount": {
        "prefix": "GetTributeCount",
        "description": "•Duel.GetTributeCount(Card c[, Group mg|nil, bool ex=false])\n返回场上[或mg中]用于通常召唤c的祭品数量，ex=true则允许对方场上的怪兽（太阳神之翼神龙-球体形）  \n此数量不一定等于Duel.GetTributeGroup的返回值中的卡片数量  \n因为某些卡可以作为多个祭品来使用  \n",
        "body": "GetTributeCount"
    },
    "HINTMSG_TARGET": {
        "prefix": "HINTMSG_TARGET",
        "description": "请选择效果的对象",
        "body": "HINTMSG_TARGET"
    },
    "CATEGORY_REMOVE": {
        "prefix": "CATEGORY_REMOVE",
        "description": "除外效果",
        "body": "CATEGORY_REMOVE"
    },
    "SelectOption": {
        "prefix": "SelectOption",
        "description": "•Duel.SelectOption(int player, int desc1, ...)\n让玩家选择选项，从第二个参数开始，每一个参数代表一条选项  \n返回选择的选项的序号(从0开始)  \n",
        "body": "SelectOption"
    },
    "GetLinkedZone": {
        "prefix": "GetLinkedZone",
        "description": "•Card.GetLinkedZone(Card c[, int player=c:GetControler()])\n返回c的[以 player 来看的场上的]连接区域  \n\n•Duel.GetLinkedZone(int player)\n返回以玩家player来看的所有连接区域  \n\n",
        "body": "GetLinkedZone"
    },
    "SelectEffectYesNo": {
        "prefix": "SelectEffectYesNo",
        "description": "•Duel.SelectEffectYesNo(int player, Card c[, int desc=95])\n让玩家player选择是否发动卡片c的效果[，提示文字可以自行用desc替换，desc 用 aux.Stringid 获取]  \n",
        "body": "SelectEffectYesNo"
    },
    "POS_DEFENSE": {
        "prefix": "POS_DEFENSE",
        "description": "守备表示",
        "body": "POS_DEFENSE"
    },
    "STATUS_EFFECT_REPLACED": {
        "prefix": "STATUS_EFFECT_REPLACED",
        "description": "效果被替代(红莲霸权)",
        "body": "STATUS_EFFECT_REPLACED"
    },
    "TIMING_TODECK": {
        "prefix": "TIMING_TODECK",
        "description": "回卡组时点",
        "body": "TIMING_TODECK"
    },
    "TYPE_SPELL": {
        "prefix": "TYPE_SPELL",
        "description": "魔法卡",
        "body": "TYPE_SPELL"
    },
    "EFFECT_TYPE_CONTINUOUS": {
        "prefix": "EFFECT_TYPE_CONTINUOUS",
        "description": "由事件觸發的輔助用效果/永續效果",
        "body": "EFFECT_TYPE_CONTINUOUS"
    },
    "Card.GetColumnGroupCount": {
        "prefix": "Card.GetColumnGroupCount",
        "description": "•Card.GetColumnGroupCount(Card c)\n用法同 Card.GetColumnGroup ，只是返回的是卡片的数量  \n",
        "body": "Card.GetColumnGroupCount"
    },
    "REASON_LINK": {
        "prefix": "REASON_LINK",
        "description": "用于连接召唤",
        "body": "REASON_LINK"
    },
    "EVENT_SSET": {
        "prefix": "EVENT_SSET",
        "description": "放置魔陷时",
        "body": "EVENT_SSET"
    },
    "HINTMSG_POSITION": {
        "prefix": "HINTMSG_POSITION",
        "description": "请选择表示形式",
        "body": "HINTMSG_POSITION"
    },
    "OPCODE_ISSETCARD": {
        "prefix": "OPCODE_ISSETCARD",
        "body": "OPCODE_ISSETCARD"
    },
    "AddSynchroProcedure": {
        "prefix": "AddSynchroProcedure",
        "description": "•aux.AddSynchroProcedure(Card c, function f1|nil, function f2|nil, int minc[, int maxc=99])\n为c添加同调召唤手续  \nf1为 1 只满足的过滤条件，并且必须为调整；f2为 minc [~ maxc]只满足的过滤条件  \n",
        "body": "AddSynchroProcedure"
    },
    "IsMSetable": {
        "prefix": "IsMSetable",
        "description": "•Card.IsMSetable(Card, bool ignore_count, Effect e|nil[, int minc=0, int zone=0x1f])\n检查c是否可进行通常召唤的set，ignore_count=true则不检查召唤次数限制  \ne~=nil则检查c是否可以以效果e进行通常召唤的set，minc 表示至少需要的祭品数（用于区分妥协召唤set与上级召唤set）,zone 表示必须要放置到的区域  \n",
        "body": "IsMSetable"
    },
    "IsPlayerCanSendtoGrave": {
        "prefix": "IsPlayerCanSendtoGrave",
        "description": "•Duel.IsPlayerCanSendtoGrave(int player[, Card c])\n检查玩家是否能把卡片[c]送去墓地  \n",
        "body": "IsPlayerCanSendtoGrave"
    },
    "CHINT_NUMBER": {
        "prefix": "CHINT_NUMBER",
        "body": "CHINT_NUMBER"
    },
    "Card.GetAttackedGroupCount": {
        "prefix": "Card.GetAttackedGroupCount",
        "description": "•Card.GetAttackedGroupCount(Card c)\n返回c本回合攻击过的卡片数量  \n",
        "body": "Card.GetAttackedGroupCount"
    },
    "bdocon": {
        "prefix": "bdocon",
        "description": "•aux.bdocon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且是与对方怪兽战斗 的 condition  \nfunction Auxiliary.bdocon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsRelateToBattle() and c:IsStatus(STATUS_OPPO_BATTLE)  \nend  \n",
        "body": "bdocon"
    },
    "gffcheck": {
        "prefix": "gffcheck",
        "description": "•aux.gffcheck(Group g, function f1, any a1, function f2, any a2)\n--check for group with 2 cards, each card match f1 with a1, f2 with a2 as argument  \nfunction Auxiliary.gffcheck(g,f1,a1,f2,a2)  \n\tif #g~=2 then return false end  \n\tlocal c1=g:GetFirst()  \n\tlocal c2=g:GetNext()  \n\treturn f1(c1,a1) and f2(c2,a2) or f1(c2,a1) and f2(c1,a2)  \nend  \n",
        "body": "gffcheck"
    },
    "REASON_COST": {
        "prefix": "REASON_COST",
        "description": "用於代價或無法支付代價而破壞",
        "body": "REASON_COST"
    },
    "aux.AddSynchroProcedure": {
        "prefix": "aux.AddSynchroProcedure",
        "description": "•aux.AddSynchroProcedure(Card c, function f1|nil, function f2|nil, int minc[, int maxc=99])\n为c添加同调召唤手续  \nf1为 1 只满足的过滤条件，并且必须为调整；f2为 minc [~ maxc]只满足的过滤条件  \n",
        "body": "aux.AddSynchroProcedure"
    },
    "qlifilter": {
        "prefix": "qlifilter",
        "description": "•aux.qlifilter(Effect e, Effect te)\n机壳怪兽通用抗性(不受原本等级·阶级比这张卡等级低的怪兽效果影响)的过滤函数的简单写法，用在效果注册里 SetValue  \nte 是 将要影响到 e:GetHandler() 的效果  \nfunction Auxiliary.qlifilter(e,te)  \n\tif te:IsActiveType(TYPE_MONSTER) and te:IsActivated() then  \n\t\tlocal lv=e:GetHandler():GetLevel()  \n\t\tlocal ec=te:GetOwner()  \n\t\tif ec:IsType(TYPE_LINK) then  \n\t\t\treturn false  \n\t\telseif ec:IsType(TYPE_XYZ) then  \n\t\t\treturn ec:GetOriginalRank()<lv  \n\t\telse  \n\t\t\treturn ec:GetOriginalLevel()<lv  \n\t\tend  \n\telse  \n\t\treturn false  \n\tend  \nend  \n",
        "body": "qlifilter"
    },
    "EFFECT_TYPE_QUICK_F": {
        "prefix": "EFFECT_TYPE_QUICK_F",
        "description": "诱发即时必发效果（熊猫龙等）",
        "body": "EFFECT_TYPE_QUICK_F"
    },
    "aux.IsCodeListed": {
        "prefix": "aux.IsCodeListed",
        "description": "•aux.IsCodeListed(Card c, int code)\n检测 c 是否是有卡名 code 记述的卡  \n",
        "body": "aux.IsCodeListed"
    },
    "AnnounceAttribute": {
        "prefix": "AnnounceAttribute",
        "description": "•Duel.AnnounceAttribute(int player, int count, int available)\n让玩家player从可选的属性中宣言count个属性  \navailable是所有可选属性的组合值，可以自行组合，可以直接将名字相加  \nATTRIBUTE_EARTH\t\t=0x01\t\t--地  \nATTRIBUTE_WATER\t\t=0x02\t\t--水  \nATTRIBUTE_FIRE\t\t=0x04\t\t--炎  \nATTRIBUTE_WIND\t\t=0x08\t\t--风  \nATTRIBUTE_LIGHT\t\t=0x10\t\t--光  \nATTRIBUTE_DARK\t\t=0x20\t\t--暗  \nATTRIBUTE_DEVINE\t=0x40\t\t--神  \n",
        "body": "AnnounceAttribute"
    },
    "aux.dscon": {
        "prefix": "aux.dscon",
        "description": "•aux.dscon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 不是伤害阶段 或者 不是已经进行过伤害计算 的简单写法 SetCondition  \nfunction Auxiliary.bpcon(e,tp,eg,ep,ev,re,r,rp)  \n\treturn Duel.GetCurrentPhase()~=PHASE_DAMAGE or not Duel.IsDamageCalculated()  \nend  \n",
        "body": "aux.dscon"
    },
    "EFFECT_FLAG_LIMIT_ZONE": {
        "prefix": "EFFECT_FLAG_LIMIT_ZONE",
        "description": "限制魔法·陷阱卡发动时可以放置的区域",
        "body": "EFFECT_FLAG_LIMIT_ZONE"
    },
    "Duel.ChangePosition": {
        "prefix": "Duel.ChangePosition",
        "description": "•Duel.ChangePosition(Card|Group targets, int au[, int ad=au, int du=au, int dd=au, bool noflip=false, bool setavailable=false])\n根据对应位置的参数改变targets里 对应形式 的表示形式。返回实际操作的数量。  \n若只有2个参数，则不管什么表示形式，都变成 第二个参数 代表的形式  \n表侧攻击表示 = au  \n里侧攻击表示 = ad  \n表侧守备表示 = du  \n里侧守备表示 = dd  \n如果noflip=true则不触发反转效果（但会触发反转时的诱发效果）  \n如果setavailable=true则对象之后变成里侧也发动反转效果  \n比如: Duel.ChangePosition(g,POS_FACEUP_DEFENSE,POS_FACEUP_DEFENSE,POS_FACEUP_ATTACK,POS_FACEUP_DEFENSE)  \n就表示 把卡片组g 中 原本(表侧攻击表示的卡 和 里侧攻击表示的卡 和 里侧守备表示的卡) 变成 表侧守备表示，  \n\t原本 表侧守备表示的卡 变成 表侧攻击表示  \n",
        "body": "Duel.ChangePosition"
    },
    "aux.AddContactFusionProcedure": {
        "prefix": "aux.AddContactFusionProcedure",
        "description": "•aux.AddContactFusionProcedure(Card c, function filter, int self_location, int opponent_location, any mat_operation[, ...])\n为c 添加接触融合手续。  \nfilter 表示素材的过滤条件  \nself_location, opponent_location 表示以c:GetControler() 来看的自己，对方的区域  \nmat_operation 表示要对素材进行的操作  \n",
        "body": "aux.AddContactFusionProcedure"
    },
    "Duel.Destroy": {
        "prefix": "Duel.Destroy",
        "description": "•Duel.Destroy(Card|Group targets, int reason[ ,int dest = LOCATION_GRAVE])\n以reason原因破坏targets去dest，返回值是实际被破坏的数量  \n如果reason包含REASON_RULE，则破坏事件将不会检查卡片是否免疫效果，  \n不会触发代破效果并且无视“不能破坏”  \n",
        "body": "Duel.Destroy"
    },
    "Card.CopyEffect": {
        "prefix": "Card.CopyEffect",
        "description": "•Card.CopyEffect(Card c, int code, int reset_flag[, int reset_count=1])\n为c添加卡号是code的卡的可复制的效果，并且添加额外的reset条件  \n返回值是表示复制效果的代号id  \n",
        "body": "Card.CopyEffect"
    },
    "IncreaseSummonedCount": {
        "prefix": "IncreaseSummonedCount",
        "description": "•Duel.IncreaseSummonedCount([Card c])\n手动增加1次玩家[对于卡片c]的已经通常召唤过的次数  \n",
        "body": "IncreaseSummonedCount"
    },
    "EFFECT_FLAG_OATH": {
        "prefix": "EFFECT_FLAG_OATH",
        "description": "誓约效果",
        "body": "EFFECT_FLAG_OATH"
    },
    "EFFECT_FLAG_REPEAT": {
        "prefix": "EFFECT_FLAG_REPEAT",
        "description": "神之化身的攻击力重复计算",
        "body": "EFFECT_FLAG_REPEAT"
    },
    "aux.indoval": {
        "prefix": "aux.indoval",
        "description": "•aux.indoval(Effect e, Effect re, int rp)\n不会被对方的卡破坏的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.indoval(e,re,rp)  \n\treturn rp==1-e:GetHandlerPlayer()  \nend  \n",
        "body": "aux.indoval"
    },
    "TargetBoolFunction": {
        "prefix": "TargetBoolFunction",
        "description": "•Auxiliary.TargetBoolFunction(function f,...)\n一般用在效果注册里,返回的是一个 有 bool 返回值类型的 函数，第2个参数开始为额外参数  \nfunction Auxiliary.TargetBoolFunction(f,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(effect,target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))  \n\t\t\tend  \nend  \n",
        "body": "TargetBoolFunction"
    },
    "IsRankAbove": {
        "prefix": "IsRankAbove",
        "description": "•Card.IsRankAbove(Card c, int rank)\n检查c是否是阶级rank以上  \n",
        "body": "IsRankAbove"
    },
    "OPCODE_ISCODE": {
        "prefix": "OPCODE_ISCODE",
        "body": "OPCODE_ISCODE"
    },
    "TYPE_TUNER": {
        "prefix": "TYPE_TUNER",
        "description": "调整",
        "body": "TYPE_TUNER"
    },
    "EVENT_RECOVER": {
        "prefix": "EVENT_RECOVER",
        "description": "回复生命值时",
        "body": "EVENT_RECOVER"
    },
    "Duel.ShuffleDeck": {
        "prefix": "Duel.ShuffleDeck",
        "description": "•Duel.ShuffleDeck(int player)\n手动洗切玩家player的卡组  \n注：会重置洗卡检测的状态  \n",
        "body": "Duel.ShuffleDeck"
    },
    "Duel.ChangeAttackTarget": {
        "prefix": "Duel.ChangeAttackTarget",
        "description": "•Duel.ChangeAttackTarget(Card c|nil)\n将攻击对象变为c，c为nil表示直接攻击，返回值表示是否成功转移攻击对象  \n",
        "body": "Duel.ChangeAttackTarget"
    },
    "DOUBLE_DAMAGE": {
        "prefix": "DOUBLE_DAMAGE",
        "body": "DOUBLE_DAMAGE"
    },
    "Card.IsAbleToHand": {
        "prefix": "Card.IsAbleToHand",
        "description": "•Card.IsAbleToHand(Card c)\n检查c是否可以送去手牌  \n注：仅当卡片或者玩家受到“不能加入手牌”的效果的影响时（如雷王）此函数才返回false  \n##以下几个函数类似  \n",
        "body": "Card.IsAbleToHand"
    },
    "EVENT_TOSS_DICE": {
        "prefix": "EVENT_TOSS_DICE",
        "description": "掷骰子的结果产生后",
        "body": "EVENT_TOSS_DICE"
    },
    "ShuffleExtra": {
        "prefix": "ShuffleExtra",
        "description": "•Duel.ShuffleExtra(int player)\n手动洗切玩家player的额外卡组  \n",
        "body": "ShuffleExtra"
    },
    "RACE_SPELLCASTER": {
        "prefix": "RACE_SPELLCASTER",
        "description": "魔法师",
        "body": "RACE_SPELLCASTER"
    },
    "EFFECT_TRIBUTE_LIMIT": {
        "prefix": "EFFECT_TRIBUTE_LIMIT",
        "description": "祭品限制",
        "body": "EFFECT_TRIBUTE_LIMIT"
    },
    "Duel.CheckTribute": {
        "prefix": "Duel.CheckTribute",
        "description": "•Duel.CheckTribute(Card c, int min[, int max=min, Group mg|nil, int toplayer=c:GetControler(), int zone=0x1f])\n判断场上[或mg中]是否存在用于通常召唤c[到toplayer场上的区域 zone]的min[到max]个祭品  \n",
        "body": "Duel.CheckTribute"
    },
    "XyzSummon": {
        "prefix": "XyzSummon",
        "description": "•Duel.XyzSummon(int player, Card c, Group mg|nil[, int minc=0, int maxc=0])\n让玩家player用场上的卡[或mg][选minc-maxc 个素材]对c进行超量召唤手续  \nmg非空且min为0则直接把mg全部作为超量素材  \n",
        "body": "XyzSummon"
    },
    "OPCODE_NOT": {
        "prefix": "OPCODE_NOT",
        "body": "OPCODE_NOT"
    },
    "Duel.IsPlayerCanRemove": {
        "prefix": "Duel.IsPlayerCanRemove",
        "description": "•Duel.IsPlayerCanRemove(int player[, Card c, int reason=REASON_EFFECT])\n检查玩家player是否能除外[卡片 c]  \n",
        "body": "Duel.IsPlayerCanRemove"
    },
    "IsHasProperty": {
        "prefix": "IsHasProperty",
        "description": "•Effect.IsHasProperty(Effect e, int prop1[, int prop2])\n检查效果e是否含有标志prop1[和prop2]  \n",
        "body": "IsHasProperty"
    },
    "IsPlayerAffectedByEffect": {
        "prefix": "IsPlayerAffectedByEffect",
        "description": "•Duel.IsPlayerAffectedByEffect(int player, int code)\n检查player是否受到种类为code的效果影响，如果有就返回那些效果，没有则返回nil ,player 为0和1以外的数值时，也会返回nil  \n",
        "body": "IsPlayerAffectedByEffect"
    },
    "Duel.ChainAttack": {
        "prefix": "Duel.ChainAttack",
        "description": "•Duel.ChainAttack([Card c])\n使攻击卡[或卡片c]可以再进行1次攻击（比如 大开辟，破灭的女王）  \n",
        "body": "Duel.ChainAttack"
    },
    "IsActivatable": {
        "prefix": "IsActivatable",
        "description": "•Effect.IsActivatable(Effect e, int player[, bool neglect_loc=false, bool neglect_target=false])\n检查效果e能否由player发动  \nneglect_loc=true 为不检测发动位置， neglect_target=true 为不检测对象要求  \n",
        "body": "IsActivatable"
    },
    "IsPlayerCanRelease": {
        "prefix": "IsPlayerCanRelease",
        "description": "•Duel.IsPlayerCanRelease(int player[, Card c])\n检查玩家player是否能解放[卡片 c]  \n",
        "body": "IsPlayerCanRelease"
    },
    "Group.SelectWithSumEqual": {
        "prefix": "Group.SelectWithSumEqual",
        "description": "•Group.SelectWithSumEqual(Group g, int player, function f, int sum, int min, int max, ...)\n让玩家player从卡片组g中选取一个数量为min-max的子集使子集的特定函数 f 的和等于sum，从第7个参数开始为额外参数  \n",
        "body": "Group.SelectWithSumEqual"
    },
    "Duel.GetBattledCount": {
        "prefix": "Duel.GetBattledCount",
        "description": "•Duel.GetBattledCount(int player)\n返回玩家player这回合战斗过的次数   \n",
        "body": "Duel.GetBattledCount"
    },
    "Card.GetSummonPlayer": {
        "prefix": "Card.GetSummonPlayer",
        "description": "•Card.GetSummonPlayer(Card c)\n返回召唤/特殊召唤 c 上场的玩家  \n",
        "body": "Card.GetSummonPlayer"
    },
    "EFFECT_REMOVE_FUSION_ATTRIBUTE": {
        "prefix": "EFFECT_REMOVE_FUSION_ATTRIBUTE",
        "description": "reserve",
        "body": "EFFECT_REMOVE_FUSION_ATTRIBUTE"
    },
    "GetAttackedCount": {
        "prefix": "GetAttackedCount",
        "description": "•Card.GetAttackedCount(Card c)\n返回c本回合攻击过的次数  \n注：如果此值与上一个函数的返回值不同，那么说明此卡本回合进行过直接攻击  \n",
        "body": "GetAttackedCount"
    },
    "ResetFlagEffect": {
        "prefix": "ResetFlagEffect",
        "description": "•Card.ResetFlagEffect(Card c, int code)\n手动清除c的种类是code的标识效果  \n\n•Duel.ResetFlagEffect(int player, int code)\n手动reset玩家player的 code 标识效果  \n\n",
        "body": "ResetFlagEffect"
    },
    "Duel.IsPlayerCanSpecialSummon": {
        "prefix": "Duel.IsPlayerCanSpecialSummon",
        "description": "•Duel.IsPlayerCanSpecialSummon(int player[, int sumtype, int sumpos, int target_player, Card c])\n检查玩家player能否特殊召唤[c到target_player场上，以sumtype召唤方式，sumpos表示形式]  \n如果需要可选参数，则必须全部使用  \n",
        "body": "Duel.IsPlayerCanSpecialSummon"
    },
    "Card.GetBaseAttack": {
        "prefix": "Card.GetBaseAttack",
        "description": "•Card.GetBaseAttack(Card c)\n返回c的原本攻击力  \n",
        "body": "Card.GetBaseAttack"
    },
    "NegateEffect": {
        "prefix": "NegateEffect",
        "description": "•Duel.NegateEffect(int chainc)\n使连锁chainc的效果无效，返回值表示是否成功  \nchainc=0 表示当前效果  \n",
        "body": "NegateEffect"
    },
    "EFFECT_FORBIDDEN": {
        "prefix": "EFFECT_FORBIDDEN",
        "description": "不能Play(禁止令)",
        "body": "EFFECT_FORBIDDEN"
    },
    "EFFECT_CANNOT_SELECT_EFFECT_TARGET": {
        "prefix": "EFFECT_CANNOT_SELECT_EFFECT_TARGET",
        "description": "對手不能選擇為效果對象",
        "body": "EFFECT_CANNOT_SELECT_EFFECT_TARGET"
    },
    "EFFECT_FLAG_IGNORE_RANGE": {
        "prefix": "EFFECT_FLAG_IGNORE_RANGE",
        "description": "影响所有区域的卡（大宇宙）",
        "body": "EFFECT_FLAG_IGNORE_RANGE"
    },
    "LOCATION_DECKBOT": {
        "prefix": "LOCATION_DECKBOT",
        "description": "弹回卡组底部",
        "body": "LOCATION_DECKBOT"
    },
    "EFFECT_TYPE_QUICK_O": {
        "prefix": "EFFECT_TYPE_QUICK_O",
        "description": "诱发即时效果",
        "body": "EFFECT_TYPE_QUICK_O"
    },
    "GetLevel": {
        "prefix": "GetLevel",
        "description": "•Card.GetLevel(Card c)\n返回c的当前等级  \n",
        "body": "GetLevel"
    },
    "EFFECT_BP_TWICE": {
        "prefix": "EFFECT_BP_TWICE",
        "description": "2次战斗阶段",
        "body": "EFFECT_BP_TWICE"
    },
    "EFFECT_SPSUMMON_CONDITION": {
        "prefix": "EFFECT_SPSUMMON_CONDITION",
        "description": "特殊召唤条件",
        "body": "EFFECT_SPSUMMON_CONDITION"
    },
    "POS_FACEDOWN_DEFENSE": {
        "prefix": "POS_FACEDOWN_DEFENSE",
        "description": "里侧守备",
        "body": "POS_FACEDOWN_DEFENSE"
    },
    "aux.bdcon": {
        "prefix": "aux.bdcon",
        "description": "•aux.bdcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING 的 condition  \nfunction Auxiliary.bdcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsRelateToBattle()  \nend  \n",
        "body": "aux.bdcon"
    },
    "CheckXyzMaterial": {
        "prefix": "CheckXyzMaterial",
        "description": "•Duel.CheckXyzMaterial(Card c, function f|nil, int lv, int min, int max, Group mg|nil)\n检查场上[或mg中]是否存在用于超量召唤c的超量用等级为lv的min-max个满足条件f的叠放素材  \n",
        "body": "CheckXyzMaterial"
    },
    "IsPlayerCanDiscardDeckAsCost": {
        "prefix": "IsPlayerCanDiscardDeckAsCost",
        "description": "•Duel.IsPlayerCanDiscardDeckAsCost(int player, int count)\n检查玩家player能否把卡组顶端count张卡送去墓地作为cost  \n",
        "body": "IsPlayerCanDiscardDeckAsCost"
    },
    "POS_ATTACK": {
        "prefix": "POS_ATTACK",
        "description": "攻击表示",
        "body": "POS_ATTACK"
    },
    "SelectSequence": {
        "prefix": "SelectSequence",
        "description": "•Duel.SelectSequence()\n看函数名字，像是选择序号的  \n但是此函数只有一个 check_action_permission(L) 操作，还没有返回值，不知何用  \n",
        "body": "SelectSequence"
    },
    "EFFECT_BOTH_BATTLE_DAMAGE": {
        "prefix": "EFFECT_BOTH_BATTLE_DAMAGE",
        "description": "战斗伤害由双方承受",
        "body": "EFFECT_BOTH_BATTLE_DAMAGE"
    },
    "aux.AddFusionProcCode2FunRep": {
        "prefix": "aux.AddFusionProcCode2FunRep",
        "description": "•aux.AddFusionProcCode2FunRep(Card c, int code1, int code2, function f, int minc, int maxc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为 code1,code2 的各1只怪兽 ，和满足过滤条件 f 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,f,minc,maxc,code1,code2)  \n",
        "body": "aux.AddFusionProcCode2FunRep"
    },
    "GetExtraTopGroup": {
        "prefix": "GetExtraTopGroup",
        "description": "•Duel.GetExtraTopGroup(int player, int count)\n返回玩家player的额外卡组表侧表示的卡中最上方的count张卡  \n",
        "body": "GetExtraTopGroup"
    },
    "Duel.ChangeTargetParam": {
        "prefix": "Duel.ChangeTargetParam",
        "description": "•Duel.ChangeTargetParam(int chainc, int param)\n把连锁chainc的参数换成param  \nchainc=0 表示当前效果  \n",
        "body": "Duel.ChangeTargetParam"
    },
    "Group.GetClassCount": {
        "prefix": "Group.GetClassCount",
        "description": "•Group.GetClassCount(Group g, function f, ...)\n计算g中所有卡的种类数量，f为分类的依据，返回相同的值视为同一种类，从第3个参数开始为额外参数  \n比如 g:GetClassCount(Card.GetCode) 就是计算g中卡名不同的卡的数量  \n",
        "body": "Group.GetClassCount"
    },
    "LOCATION_SZONE": {
        "prefix": "LOCATION_SZONE",
        "description": "魔陷区(0~4)+场地区(5)",
        "body": "LOCATION_SZONE"
    },
    "EFFECT_FLAG_CANNOT_INACTIVATE": {
        "prefix": "EFFECT_FLAG_CANNOT_INACTIVATE",
        "description": "發動不會被無效",
        "body": "EFFECT_FLAG_CANNOT_INACTIVATE"
    },
    "STATUS_JUST_POS": {
        "prefix": "STATUS_JUST_POS",
        "description": "已改變表示形式(用於STATUS_CONTINUOUS_POS判定)",
        "body": "STATUS_JUST_POS"
    },
    "CHAININFO_TRIGGERING_EFFECT": {
        "prefix": "CHAININFO_TRIGGERING_EFFECT",
        "description": "连锁的效果",
        "body": "CHAININFO_TRIGGERING_EFFECT"
    },
    "CATEGORY_TOKEN": {
        "prefix": "CATEGORY_TOKEN",
        "description": "含衍生物效果",
        "body": "CATEGORY_TOKEN"
    },
    "SUMMON_TYPE_NORMAL": {
        "prefix": "SUMMON_TYPE_NORMAL",
        "description": "通常召唤(EFFECT_SUMMON_PROC,EFFECT_SET_PROC 可用Value修改數值)",
        "body": "SUMMON_TYPE_NORMAL"
    },
    "Duel.SelectEffectYesNo": {
        "prefix": "Duel.SelectEffectYesNo",
        "description": "•Duel.SelectEffectYesNo(int player, Card c[, int desc=95])\n让玩家player选择是否发动卡片c的效果[，提示文字可以自行用desc替换，desc 用 aux.Stringid 获取]  \n",
        "body": "Duel.SelectEffectYesNo"
    },
    "AnnounceCoin": {
        "prefix": "AnnounceCoin",
        "description": "•Duel.AnnounceCoin(int player)\n让玩家player宣言硬币的正反面  \n",
        "body": "AnnounceCoin"
    },
    "EVENT_LEAVE_FIELD": {
        "prefix": "EVENT_LEAVE_FIELD",
        "description": "离场时",
        "body": "EVENT_LEAVE_FIELD"
    },
    "HINTMSG_OPTION": {
        "prefix": "HINTMSG_OPTION",
        "description": "请选择一个选项",
        "body": "HINTMSG_OPTION"
    },
    "EFFECT_PIERCE": {
        "prefix": "EFFECT_PIERCE",
        "description": "贯穿伤害",
        "body": "EFFECT_PIERCE"
    },
    "GetMZoneCount": {
        "prefix": "GetMZoneCount",
        "description": "•Duel.GetMZoneCount(int player[, Group|Card targets|nil, int use_player, int reason = LOCATION_REASON_TOFIELD, int zone=0xff])\n返回玩家player场上[targets 离开后]可用的[区域 zone 里的]怪兽区数量  \n##第三个第四个额外参数与凯撒斗技场等限制格子的效果有关  \n",
        "body": "GetMZoneCount"
    },
    "aux.AddFusionProcMixRep": {
        "prefix": "aux.AddFusionProcMixRep",
        "description": "•aux.AddFusionProcMixRep(Card c, bool sub, bool insf, (function f1)|(int code1), int minc, int maxc, ...)\n为c 添加融合召唤手续  \n用满足f1 的怪兽 minc-maxc 只，和 额外参数里 各1只的怪兽为融合素材,  \n额外参数的类型 可以是 function 或者 卡密(int code)  \n",
        "body": "aux.AddFusionProcMixRep"
    },
    "Card.IsAbleToDeckOrExtraAsCost": {
        "prefix": "Card.IsAbleToDeckOrExtraAsCost",
        "description": "•Card.IsAbleToDeckOrExtraAsCost(Card c)\n检查c是否可以作为cost送去卡组或额外卡组（用于新宇侠、剑斗兽融合怪兽的召唤手续检测）等价于 (c:IsAbleToDeckAsCost() or c:IsAbleToExtraAsCost())  \n",
        "body": "Card.IsAbleToDeckOrExtraAsCost"
    },
    "EVENT_SPSUMMON_SUCCESS": {
        "prefix": "EVENT_SPSUMMON_SUCCESS",
        "description": "特殊召唤成功时",
        "body": "EVENT_SPSUMMON_SUCCESS"
    },
    "GetXyzType": {
        "prefix": "GetXyzType",
        "description": "•Card.GetXyzType(Card c)\n返回c用作同调素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "GetXyzType"
    },
    "Card.GetSequence": {
        "prefix": "Card.GetSequence",
        "description": "•Card.GetSequence(Card c)\n返回c在当前位置的序号  \n在场上时，序号代表所在的格子，从左往右分别是0-4，场地魔法格的序号为5，左右灵摆区域为6-7  \n在其它地方时，序号表示的是第几张卡，最下面的卡的序号为0  \n",
        "body": "Card.GetSequence"
    },
    "IsFusionType": {
        "prefix": "IsFusionType",
        "description": "•Card.IsFusionType(Card c, int type)\n检查c用作融合素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n",
        "body": "IsFusionType"
    },
    "EVENT_CHAIN_DISABLED": {
        "prefix": "EVENT_CHAIN_DISABLED",
        "description": "连锁效果无效时",
        "body": "EVENT_CHAIN_DISABLED"
    },
    "TIMING_POS_CHANGE": {
        "prefix": "TIMING_POS_CHANGE",
        "description": "表示形式变更时点",
        "body": "TIMING_POS_CHANGE"
    },
    "HINTMSG_SUMMON": {
        "prefix": "HINTMSG_SUMMON",
        "description": "请选择要召唤的卡",
        "body": "HINTMSG_SUMMON"
    },
    "EFFECT_FLAG_CONTINUOUS_TARGET": {
        "prefix": "EFFECT_FLAG_CONTINUOUS_TARGET",
        "description": "建立持續對象的永續魔法、永續陷阱",
        "body": "EFFECT_FLAG_CONTINUOUS_TARGET"
    },
    "IsAbleToGrave": {
        "prefix": "IsAbleToGrave",
        "description": "•Card.IsAbleToGrave(Card c)\n检查c是否可以送去墓地  \n",
        "body": "IsAbleToGrave"
    },
    "EVENT_CHANGE_POS": {
        "prefix": "EVENT_CHANGE_POS",
        "description": "表示形式变更时",
        "body": "EVENT_CHANGE_POS"
    },
    "SortDecktop": {
        "prefix": "SortDecktop",
        "description": "•Duel.SortDecktop(int sort_player, int target_player, int count)\n让玩家sort_player对玩家target_player的卡组最上方count张卡进行排序，最先选的卡在最上面，然后下面是第二张选择的卡，以此类推  \n最多只能排序16张卡  \n",
        "body": "SortDecktop"
    },
    "GetEquipTarget": {
        "prefix": "GetEquipTarget",
        "description": "•Card.GetEquipTarget(Card c)\n返回c当前的装备对象  \n",
        "body": "GetEquipTarget"
    },
    "SelectUnselect": {
        "prefix": "SelectUnselect",
        "description": "•Group.SelectUnselect(Group cg, Group sg, int player, bool btok=false, bool cancelable=false, int minc, int maxc)\n让玩家 player 从卡片组 cg 中选择 1 张卡放入卡片组 sg ，并返回选的卡。    \nbtok 表示是否可以点击完成选择的按钮， cancelable 表示是否可以取消已选择的卡，   \nminc 和 maxc 是客户端的文字缓冲提示，表示需要选择 minc-maxc 张卡，但是这个只是影响视觉效果，并不代表必须要选择那个数量  \n",
        "body": "SelectUnselect"
    },
    "Card.GetReasonPlayer": {
        "prefix": "Card.GetReasonPlayer",
        "description": "•Card.GetReasonPlayer(Card c)\n返回导致c的位置变化的玩家  \n",
        "body": "Card.GetReasonPlayer"
    },
    "SetLabelObject": {
        "prefix": "SetLabelObject",
        "description": "•Effect.SetLabelObject(Effect e, Card|Group|Effect labelobject)\n设置效果 e 的LabelObject属性  \n",
        "body": "SetLabelObject"
    },
    "Duel.CheckSummonedCount": {
        "prefix": "Duel.CheckSummonedCount",
        "description": "•Duel.CheckSummonedCount([Card c])\n检查回合玩家本回合是否还能通常召唤[卡片c]  \n",
        "body": "Duel.CheckSummonedCount"
    },
    "SelectTarget": {
        "prefix": "SelectTarget",
        "description": "•Duel.SelectTarget(int sel_player, function f|nil, int player, int s, int o, int min, int max, Card|Group ex|nil, ...)\n基本同Duel.SelectMatchingCard ，不同之处在于此函数会同时将当前正在处理的连锁的对象设置成选择的卡  \n",
        "body": "SelectTarget"
    },
    "GetLinkType": {
        "prefix": "GetLinkType",
        "description": "•Card.GetLinkType(Card c)\n返回c用作link素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "GetLinkType"
    },
    "Duel.ShuffleSetCard": {
        "prefix": "Duel.ShuffleSetCard",
        "description": "•Duel.ShuffleSetCard(Group g)\n洗切覆盖的卡片组 g （实例：魔术礼帽），若g中有表侧表示的卡，则此函数无效  \n此函数现在可以洗切魔陷区的覆盖卡  \n",
        "body": "Duel.ShuffleSetCard"
    },
    "IsAttackPos": {
        "prefix": "IsAttackPos",
        "description": "•Card.IsAttackPos(Card c)\n检查c是否是攻击表示  \n",
        "body": "IsAttackPos"
    },
    "EFFECT_UPDATE_RSCALE": {
        "prefix": "EFFECT_UPDATE_RSCALE",
        "description": "改变右刻度",
        "body": "EFFECT_UPDATE_RSCALE"
    },
    "Effect.UseCountLimit": {
        "prefix": "Effect.UseCountLimit",
        "description": "•Effect.UseCountLimit(Effect e, int p[, int count=1, bool oath_only=false])\n手动减少玩家 p 对效果 e 的 count 个可用次数[ oath_only 为 该效果是否是 EFFECT_FLAG_OATH]  \n",
        "body": "Effect.UseCountLimit"
    },
    "aux.AddRitualProcEqual2Code2": {
        "prefix": "aux.AddRitualProcEqual2Code2",
        "description": "•aux.AddRitualProcEqual2Code2(Card c, int code1, int code2, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \ncode1,code2 为仪式怪兽卡号，素材的等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1,code2)  \n\taux.AddRitualProcEqual2(c,aux.FilterBoolFunction(Card.IsCode,code1,code2),summon_location,grave_filter,mat_filter)  \n",
        "body": "aux.AddRitualProcEqual2Code2"
    },
    "SelectReleaseGroupEx": {
        "prefix": "SelectReleaseGroupEx",
        "description": "•Duel.SelectReleaseGroupEx(int player, function f|nil, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家player从场上·手卡选择min-max张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第6个参数开始为额外参数  \n",
        "body": "SelectReleaseGroupEx"
    },
    "EFFECT_NONTUNER": {
        "prefix": "EFFECT_NONTUNER",
        "description": "同时当作调整以外的怪兽（幻影王 幽骑）",
        "body": "EFFECT_NONTUNER"
    },
    "IsDestructable": {
        "prefix": "IsDestructable",
        "description": "•Card.IsDestructable(Card c[, Effect e])\n检查c是否是可被[效果 e]破坏的  \n",
        "body": "IsDestructable"
    },
    "HINTMSG_TOFIELD": {
        "prefix": "HINTMSG_TOFIELD",
        "description": "请选择要放置到场上的卡",
        "body": "HINTMSG_TOFIELD"
    },
    "CancelCardTarget": {
        "prefix": "CancelCardTarget",
        "description": "•Card.CancelCardTarget(Card c1, Card c2)\n取消c2为c1的永续对象  \n",
        "body": "CancelCardTarget"
    },
    "GetColumn": {
        "prefix": "GetColumn",
        "description": "•aux.GetColumn(Card c, int player=0)\n返回以 player 来看的卡片 c 所在的那一列的序号，不包含 场地区域，从左到右 分别是 0~4  \n",
        "body": "GetColumn"
    },
    "SetOwnerPlayer": {
        "prefix": "SetOwnerPlayer",
        "description": "•Effect.SetOwnerPlayer(Effect e[, int player=0])\n设置效果 e 的OwnerPlayer属性为player  \n",
        "body": "SetOwnerPlayer"
    },
    "TIMING_REMOVE": {
        "prefix": "TIMING_REMOVE",
        "description": "除外时点",
        "body": "TIMING_REMOVE"
    },
    "ACTIVITY_FLIPSUMMON": {
        "prefix": "ACTIVITY_FLIPSUMMON",
        "body": "ACTIVITY_FLIPSUMMON"
    },
    "GetMutualLinkedGroup": {
        "prefix": "GetMutualLinkedGroup",
        "description": "•Card.GetMutualLinkedGroup(Card c)\n返回和c互相连接状态的卡片组  \n",
        "body": "GetMutualLinkedGroup"
    },
    "ChangeBattleDamage": {
        "prefix": "ChangeBattleDamage",
        "description": "•Duel.ChangeBattleDamage(int player, int value[, bool check=true])\n把玩家player在本次战斗中受到的伤害变成value，若 check=false 则原本战斗伤害就算为0也改变伤害  \n\n•aux.ChangeBattleDamage(int player, int value)\n如果 player 是受到战斗伤害的玩家，则改变战斗伤害为 value  \n\n",
        "body": "ChangeBattleDamage"
    },
    "GetRitualLevel": {
        "prefix": "GetRitualLevel",
        "description": "•Card.GetRitualLevel(Card c, Card rc)\n返回c的对于仪式怪兽rc仪式解放等级  \n此函数除了某些特定卡如仪式供物，返回值与Card.GetLevel(c)相同  \n",
        "body": "GetRitualLevel"
    },
    "ATTRIBUTE_LIGHT": {
        "prefix": "ATTRIBUTE_LIGHT",
        "description": "光",
        "body": "ATTRIBUTE_LIGHT"
    },
    "IsPlayerCanMSet": {
        "prefix": "IsPlayerCanMSet",
        "description": "•Duel.IsPlayerCanMSet(int player[, int sumtype, Card c])\n检查玩家player是否可以盖放怪兽[c，以sumtype方式]  \n如果需要可选参数，则必须全部使用  \n",
        "body": "IsPlayerCanMSet"
    },
    "REASON_REVEAL": {
        "prefix": "REASON_REVEAL",
        "description": "翻开卡组（森罗）",
        "body": "REASON_REVEAL"
    },
    "ClearTargetCard": {
        "prefix": "ClearTargetCard",
        "description": "•Duel.ClearTargetCard()\n把当前正在处理的连锁的对象全部清除  \n",
        "body": "ClearTargetCard"
    },
    "EFFECT_CANNOT_CHANGE_POSITION": {
        "prefix": "EFFECT_CANNOT_CHANGE_POSITION",
        "description": "不能改变表示形式",
        "body": "EFFECT_CANNOT_CHANGE_POSITION"
    },
    "Group.GetNext": {
        "prefix": "Group.GetNext",
        "description": "•Group.GetNext(Group g)\n使指针指向卡片组g下一张卡并返回这张卡，如果不存在则返回nil  \n",
        "body": "Group.GetNext"
    },
    "GetOriginalAttribute": {
        "prefix": "GetOriginalAttribute",
        "description": "•Card.GetOriginalAttribute(Card c)\n返回c的卡片记载的属性  \n",
        "body": "GetOriginalAttribute"
    },
    "SendtoGrave": {
        "prefix": "SendtoGrave",
        "description": "•Duel.SendtoGrave(Card|Group targets, int reason)\n以reason原因把targets送去墓地，返回值是实际被操作的数量  \n",
        "body": "SendtoGrave"
    },
    "GetOverlayCount": {
        "prefix": "GetOverlayCount",
        "description": "•Card.GetOverlayCount(Card c)\n返回c当前叠放着的卡片数量  \n\n•Duel.GetOverlayCount(int player, int s, int o)\n返回以player来看的指定位置的所有叠放的卡的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n\n",
        "body": "GetOverlayCount"
    },
    "indsval": {
        "prefix": "indsval",
        "description": "•aux.indsval(Effect e, Effect re, int rp)\n不会被自己的卡破坏的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.indsval(e,re,rp)  \n\treturn rp==e:GetHandlerPlayer()  \nend  \n",
        "body": "indsval"
    },
    "EFFECT_ADD_SETCODE": {
        "prefix": "EFFECT_ADD_SETCODE",
        "description": "视为「XX」字段的效果",
        "body": "EFFECT_ADD_SETCODE"
    },
    "EFFECT_CANNOT_TO_GRAVE_AS_COST": {
        "prefix": "EFFECT_CANNOT_TO_GRAVE_AS_COST",
        "description": "不能作为COST送去墓地",
        "body": "EFFECT_CANNOT_TO_GRAVE_AS_COST"
    },
    "TYPE_FIELD": {
        "prefix": "TYPE_FIELD",
        "description": "场地",
        "body": "TYPE_FIELD"
    },
    "Duel.GetFirstTarget": {
        "prefix": "Duel.GetFirstTarget",
        "description": "•Duel.GetFirstTarget()\n返回当前连锁的所有的对象卡，一般只有一个对象时使用  \n##多个对象也能使用，剩下的对象依次按顺序返回，但是很容易记错对象的顺序，所以不建议对多个对象使用  \n",
        "body": "Duel.GetFirstTarget"
    },
    "EVENT_PRE_DAMAGE_CALCULATE": {
        "prefix": "EVENT_PRE_DAMAGE_CALCULATE",
        "description": "伤害计算时（羽斬）",
        "body": "EVENT_PRE_DAMAGE_CALCULATE"
    },
    "EVENT_CUSTOM": {
        "prefix": "EVENT_CUSTOM",
        "description": "自訂事件",
        "body": "EVENT_CUSTOM"
    },
    "Card.GetOverlayGroup": {
        "prefix": "Card.GetOverlayGroup",
        "description": "•Card.GetOverlayGroup(Card c)\n返回c当前叠放着的卡片组  \n",
        "body": "Card.GetOverlayGroup"
    },
    "EFFECT_CANNOT_DIRECT_ATTACK": {
        "prefix": "EFFECT_CANNOT_DIRECT_ATTACK",
        "description": "不能直接攻击",
        "body": "EFFECT_CANNOT_DIRECT_ATTACK"
    },
    "Card.IsLinkBelow": {
        "prefix": "Card.IsLinkBelow",
        "description": "•Card.IsLinkBelow(Card c, int link)\n检查c是否连接标记数量是link以下（至少为1）  \n",
        "body": "Card.IsLinkBelow"
    },
    "GetCoinResult": {
        "prefix": "GetCoinResult",
        "description": "•Duel.GetCoinResult()\n返回当前投硬币的结果  \n",
        "body": "GetCoinResult"
    },
    "EFFECT_ADD_FUSION_SETCODE": {
        "prefix": "EFFECT_ADD_FUSION_SETCODE",
        "description": "作为融合素材时可以当作某一字段(魔玩具改造)",
        "body": "EFFECT_ADD_FUSION_SETCODE"
    },
    "GetSynchroType": {
        "prefix": "GetSynchroType",
        "description": "•Card.GetSynchroType(Card c)\n返回c用作同调素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "GetSynchroType"
    },
    "LOCATION_OVERLAY": {
        "prefix": "LOCATION_OVERLAY",
        "description": "超量素材",
        "body": "LOCATION_OVERLAY"
    },
    "Card.IsFacedown": {
        "prefix": "Card.IsFacedown",
        "description": "•Card.IsFacedown(Card c)\n检查c是否是里侧表示  \n",
        "body": "Card.IsFacedown"
    },
    "ChangeTargetCard": {
        "prefix": "ChangeTargetCard",
        "description": "•Duel.ChangeTargetCard(int chainc, Group g)\n把连锁chainc的对象换成g  \nchainc=0 表示当前效果  \n",
        "body": "ChangeTargetCard"
    },
    "IsLevel": {
        "prefix": "IsLevel",
        "description": "•Card.IsLevel(Card c, int level1[, int level2,...])\n检查c是否是等级 level1[, 或者为 level2...]  \n",
        "body": "IsLevel"
    },
    "EVENT_TOSS_DICE_NEGATE": {
        "prefix": "EVENT_TOSS_DICE_NEGATE",
        "description": "重新掷骰子",
        "body": "EVENT_TOSS_DICE_NEGATE"
    },
    "GetDestination": {
        "prefix": "GetDestination",
        "description": "•Card.GetDestination(Card c)\n返回c位置变化的目的地  \n此函数仅在处理位置转移代替效果时有效  \n",
        "body": "GetDestination"
    },
    "MustMaterialCheck": {
        "prefix": "MustMaterialCheck",
        "description": "•aux.MustMaterialCheck(Card|Group value, int player , int code)\n检查 value 中是否有 player 受到效果种类 code 影响的卡或者卡片组  \n目前代码中涉及的code有 EFFECT_MUST_BE_SMATERIAL, EFFECT_MUST_BE_XMATERIAL, EFFECT_MUST_BE_FMATERIAL, EFFECT_MUST_BE_LMATERIAL ,都是 必须成为素材的检测  \n",
        "body": "MustMaterialCheck"
    },
    "IsAttribute": {
        "prefix": "IsAttribute",
        "description": "•Card.IsAttribute(Card c, int attribute)\n检查c是否属于属性attribute  \n",
        "body": "IsAttribute"
    },
    "Damage": {
        "prefix": "Damage",
        "description": "•Duel.Damage(int player, int value, int reason[, bool is_step=false])\n以reason原因给与玩家player造成value的伤害，返回实际收到的伤害值  \n如果受到伤害变成回复等效果的影响时，返回值为0.  \nis_step为true则是伤害/恢复LP过程的分解，需要调用Duel.RDComplete()触发时点  \n",
        "body": "Damage"
    },
    "Overlay": {
        "prefix": "Overlay",
        "description": "•Duel.Overlay(Card c, Card|Group ocard)\n把ocard作为c的叠放卡叠放  \n",
        "body": "Overlay"
    },
    "IsAbleToDeckOrExtraAsCost": {
        "prefix": "IsAbleToDeckOrExtraAsCost",
        "description": "•Card.IsAbleToDeckOrExtraAsCost(Card c)\n检查c是否可以作为cost送去卡组或额外卡组（用于新宇侠、剑斗兽融合怪兽的召唤手续检测）等价于 (c:IsAbleToDeckAsCost() or c:IsAbleToExtraAsCost())  \n",
        "body": "IsAbleToDeckOrExtraAsCost"
    },
    "Effect.SetDescription": {
        "prefix": "Effect.SetDescription",
        "description": "•Effect.SetDescription(Effect e, int desc)\n设置效果 e 的效果描述  \n",
        "body": "Effect.SetDescription"
    },
    "Card.GetPreviousCodeOnField": {
        "prefix": "Card.GetPreviousCodeOnField",
        "description": "•Card.GetPreviousCodeOnField(Card c)\n返回c位置变化之前在场上的卡号  \n",
        "body": "Card.GetPreviousCodeOnField"
    },
    "IsHasType": {
        "prefix": "IsHasType",
        "description": "•Effect.IsHasType(Effect e, int type)\n检查效果e是否属于类型type  \n",
        "body": "IsHasType"
    },
    "REASON_TEMPORARY": {
        "prefix": "REASON_TEMPORARY",
        "description": "暂时",
        "body": "REASON_TEMPORARY"
    },
    "SelectMatchingCard": {
        "prefix": "SelectMatchingCard",
        "description": "•Duel.SelectMatchingCard(int sel_player, function f|nil, int player, int s, int o, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家sel_player选择以player来看的指定位置满足过滤条件f并且不等于ex的min-max张卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第9个参数开始为额外参数  \n",
        "body": "SelectMatchingCard"
    },
    "EVENT_STARTUP": {
        "prefix": "EVENT_STARTUP",
        "description": "N/A",
        "body": "EVENT_STARTUP"
    },
    "HINTMSG_COUNTER": {
        "prefix": "HINTMSG_COUNTER",
        "description": "请选择要放置指示物的卡",
        "body": "HINTMSG_COUNTER"
    },
    "Duel.CheckTunerMaterial": {
        "prefix": "Duel.CheckTunerMaterial",
        "description": "•Duel.CheckTunerMaterial(Card c, Card tuner, function f1|nil, function f2|nil, int min, int max[, Group mg|nil])\n检查场上[或mg中]是否存在一组以tuner作为调整,并且满足条件的卡作为同调召唤c的素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \n",
        "body": "Duel.CheckTunerMaterial"
    },
    "Card.ReverseInDeck": {
        "prefix": "Card.ReverseInDeck",
        "description": "•Card.ReverseInDeck(Card c)\n设置c在卡组中正面表示（POS_FACEUP_DEFENSE）  \n",
        "body": "Card.ReverseInDeck"
    },
    "EFFECT_FLAG_COPY_INHERIT": {
        "prefix": "EFFECT_FLAG_COPY_INHERIT",
        "description": "若由复制的效果產生則继承其Reset属性",
        "body": "EFFECT_FLAG_COPY_INHERIT"
    },
    "AddRitualProcEqual2Code2": {
        "prefix": "AddRitualProcEqual2Code2",
        "description": "•aux.AddRitualProcEqual2Code2(Card c, int code1, int code2, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)\n为c添加仪式召唤手续  \ncode1,code2 为仪式怪兽卡号，素材的等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1,code2)  \n\taux.AddRitualProcEqual2(c,aux.FilterBoolFunction(Card.IsCode,code1,code2),summon_location,grave_filter,mat_filter)  \n",
        "body": "AddRitualProcEqual2Code2"
    },
    "CHAININFO_TRIGGERING_DEFENSE": {
        "prefix": "CHAININFO_TRIGGERING_DEFENSE",
        "description": "连锁发生时的守备力",
        "body": "CHAININFO_TRIGGERING_DEFENSE"
    },
    "Card.GetOriginalLeftScale": {
        "prefix": "Card.GetOriginalLeftScale",
        "description": "•Card.GetOriginalLeftScale(Card c)\n返回c的原本的左灵摆刻度  \n",
        "body": "Card.GetOriginalLeftScale"
    },
    "Duel.ChangeTargetCard": {
        "prefix": "Duel.ChangeTargetCard",
        "description": "•Duel.ChangeTargetCard(int chainc, Group g)\n把连锁chainc的对象换成g  \nchainc=0 表示当前效果  \n",
        "body": "Duel.ChangeTargetCard"
    },
    "EVENT_CONTROL_CHANGED": {
        "prefix": "EVENT_CONTROL_CHANGED",
        "description": "控制权变更",
        "body": "EVENT_CONTROL_CHANGED"
    },
    "aux.FilterBoolFunction": {
        "prefix": "aux.FilterBoolFunction",
        "description": "•aux.FilterBoolFunction(function f, ...)\n用于过滤满足单一过滤条件 f 的卡,,返回的是一个 有 bool 返回值类型的 函数，第2个参数开始为额外参数  \nfunction Auxiliary.FilterBoolFunction(f,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))  \n\t\t\tend  \nend  \n",
        "body": "aux.FilterBoolFunction"
    },
    "IsAbleToChangeControler": {
        "prefix": "IsAbleToChangeControler",
        "description": "•Card.IsAbleToChangeControler(Card c)\n检查c是否可以改变控制权  \n注：仅当卡收到了“不能改变控制权”的效果的影响时，此函数返回false  \n",
        "body": "IsAbleToChangeControler"
    },
    "SetUnionState": {
        "prefix": "SetUnionState",
        "description": "•aux.SetUnionState(Card c)\n为c添加同盟怪兽属性  \n",
        "body": "SetUnionState"
    },
    "EFFECT_SKIP_M1": {
        "prefix": "EFFECT_SKIP_M1",
        "description": "跳过主要阶段1",
        "body": "EFFECT_SKIP_M1"
    },
    "EFFECT_SKIP_M2": {
        "prefix": "EFFECT_SKIP_M2",
        "description": "跳过主要阶段2",
        "body": "EFFECT_SKIP_M2"
    },
    "OPCODE_AND": {
        "prefix": "OPCODE_AND",
        "body": "OPCODE_AND"
    },
    "exccon": {
        "prefix": "exccon",
        "description": "•aux.exccon(Effect e)\n这张卡送去墓地的回合 不能发动这个效果 的简单写法 SetCondition  \nfunction Auxiliary.exccon(e)  \n\treturn Duel.GetTurnCount()~=e:GetHandler():GetTurnID() or e:GetHandler():IsReason(REASON_RETURN)  \nend  \n",
        "body": "exccon"
    },
    "Card.GetRitualLevel": {
        "prefix": "Card.GetRitualLevel",
        "description": "•Card.GetRitualLevel(Card c, Card rc)\n返回c的对于仪式怪兽rc仪式解放等级  \n此函数除了某些特定卡如仪式供物，返回值与Card.GetLevel(c)相同  \n",
        "body": "Card.GetRitualLevel"
    },
    "EFFECT_MONSTER_SSET": {
        "prefix": "EFFECT_MONSTER_SSET",
        "description": "怪兽可以在魔陷区放置",
        "body": "EFFECT_MONSTER_SSET"
    },
    "Card.GetHandSynchro": {
        "prefix": "Card.GetHandSynchro",
        "description": "•Card.GetHandSynchro(Card c)\n如果卡片 c 受到手卡同调效果 EFFECT_HAND_SYNCHRO 影响，则返回 Effect e,function filter_target,int min,int max ;否则返回nil  \ne 是有这个影响的效果  \nfilter_target 是过滤条件  \nmin,max 是数量  \n",
        "body": "Card.GetHandSynchro"
    },
    "IsAbleToHandAsCost": {
        "prefix": "IsAbleToHandAsCost",
        "description": "•Card.IsAbleToHandAsCost(Card c)\n检查c是否可以作为cost送去手牌  \n注：此函数会在Card.IsAbleToHand的基础上追加检测c的实际目的地  \n当c送往手牌会被送去其它地方时（如缩退回路适用中，或者c是融合、同调 等额外怪兽的一种），此函数返回false  \n##以下几个函数类似  \n",
        "body": "IsAbleToHandAsCost"
    },
    "Card.IsForbidden": {
        "prefix": "Card.IsForbidden",
        "description": "•Card.IsForbidden(Card c)\n检查c是否处于被宣言禁止状态  \n",
        "body": "Card.IsForbidden"
    },
    "Card.IsLink": {
        "prefix": "Card.IsLink",
        "description": "•Card.IsLink(Card c, int link1[, int link2,...])\n检查c的连接标记数量是否是 link1[, 或者为 link2...]  \n",
        "body": "Card.IsLink"
    },
    "EFFECT_FLAG_NO_TURN_RESET": {
        "prefix": "EFFECT_FLAG_NO_TURN_RESET",
        "description": "发条等“这张卡在场上只能发动一次”的效果",
        "body": "EFFECT_FLAG_NO_TURN_RESET"
    },
    "Card.IsAttackable": {
        "prefix": "Card.IsAttackable",
        "description": "•Card.IsAttackable(Card c)\n检查c是否可以攻击  \n",
        "body": "Card.IsAttackable"
    },
    "CreateGroup": {
        "prefix": "CreateGroup",
        "description": "•Group.CreateGroup()\n新建一个空的卡片组  \n",
        "body": "CreateGroup"
    },
    "EFFECT_TUNE_MAGICIAN_X": {
        "prefix": "EFFECT_TUNE_MAGICIAN_X",
        "description": "调弦之魔术师超量素材限制",
        "body": "EFFECT_TUNE_MAGICIAN_X"
    },
    "PHASE_BATTLE_STEP": {
        "prefix": "PHASE_BATTLE_STEP",
        "description": "战斗步驟",
        "body": "PHASE_BATTLE_STEP"
    },
    "Duel.IsPlayerCanFlipSummon": {
        "prefix": "Duel.IsPlayerCanFlipSummon",
        "description": "•Duel.IsPlayerCanFlipSummon(int player[, Card c])\n检查玩家player是否可以反转召唤[卡片 c]  \n",
        "body": "Duel.IsPlayerCanFlipSummon"
    },
    "Duel.CheckLPCost": {
        "prefix": "Duel.CheckLPCost",
        "description": "•Duel.CheckLPCost(int player, int cost)\n检查玩家player是否能支付cost点lp  \n",
        "body": "Duel.CheckLPCost"
    },
    "Duel.GetEnvironment": {
        "prefix": "Duel.GetEnvironment",
        "description": "•Duel.GetEnvironment()\n返回两个值，表示当前场地代号，以及当前场地效果的来源玩家  \n场地代号指当前生效的场地卡的代号，或者海神的巫女等卡把场地变化效果的值  \n来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者  \n",
        "body": "Duel.GetEnvironment"
    },
    "RACE_FISH": {
        "prefix": "RACE_FISH",
        "description": "鱼",
        "body": "RACE_FISH"
    },
    "EFFECT_TYPE_ACTIONS": {
        "prefix": "EFFECT_TYPE_ACTIONS",
        "description": "触发型，以下類型會自動添加此屬性（对峙的G）",
        "body": "EFFECT_TYPE_ACTIONS"
    },
    "EFFECT_ADD_LINK_CODE": {
        "prefix": "EFFECT_ADD_LINK_CODE",
        "description": "用作连接素材时的卡名",
        "body": "EFFECT_ADD_LINK_CODE"
    },
    "aux.tgoval": {
        "prefix": "aux.tgoval",
        "description": "•aux.tgoval(Effect e, Effect re, int rp)\n不会成为对方的卡的效果对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.tgoval(e,re,rp)  \n\treturn rp==1-e:GetHandlerPlayer()  \nend  \n",
        "body": "aux.tgoval"
    },
    "GetFirstTarget": {
        "prefix": "GetFirstTarget",
        "description": "•Duel.GetFirstTarget()\n返回当前连锁的所有的对象卡，一般只有一个对象时使用  \n##多个对象也能使用，剩下的对象依次按顺序返回，但是很容易记错对象的顺序，所以不建议对多个对象使用  \n",
        "body": "GetFirstTarget"
    },
    "EFFECT_TUNE_MAGICIAN_F": {
        "prefix": "EFFECT_TUNE_MAGICIAN_F",
        "description": "调弦之魔术师融合素材限制",
        "body": "EFFECT_TUNE_MAGICIAN_F"
    },
    "EFFECT_TYPE_EQUIP": {
        "prefix": "EFFECT_TYPE_EQUIP",
        "description": "装备效果",
        "body": "EFFECT_TYPE_EQUIP"
    },
    "aux.SZoneSequence": {
        "prefix": "aux.SZoneSequence",
        "description": "•aux.SZoneSequence(int seq)\n返回是第几列魔陷区，从左到右 分别是 0~4 ,不包含场地区  \n",
        "body": "aux.SZoneSequence"
    },
    "Card.GetControler": {
        "prefix": "Card.GetControler",
        "description": "•Card.GetControler(Card c)\n返回c的当前控制者  \n",
        "body": "Card.GetControler"
    },
    "IsDamageCalculated": {
        "prefix": "IsDamageCalculated",
        "description": "•Duel.IsDamageCalculated()\n用于在伤害阶段检查是否已经计算了战斗伤害  \n",
        "body": "IsDamageCalculated"
    },
    "STATUS_ACTIVATE_DISABLED": {
        "prefix": "STATUS_ACTIVATE_DISABLED",
        "description": "发动无效後尚未移動",
        "body": "STATUS_ACTIVATE_DISABLED"
    },
    "STATUS_PROC_COMPLETE": {
        "prefix": "STATUS_PROC_COMPLETE",
        "description": "完成正规召唤（解除苏生限制）",
        "body": "STATUS_PROC_COMPLETE"
    },
    "Group.Filter": {
        "prefix": "Group.Filter",
        "description": "•Group.Filter(Group g, function f, Card|Group ex|nil, ...)\n过滤函数，从卡片组g中筛选满足筛选条件f并且不等于ex的卡  \n从第4个参数开始为额外参数  \n",
        "body": "Group.Filter"
    },
    "Card.IsImmuneToEffect": {
        "prefix": "Card.IsImmuneToEffect",
        "description": "•Card.IsImmuneToEffect(Card c, Effect e)\n检查c是否免疫效果e（即不受效果e的影响）  \n",
        "body": "Card.IsImmuneToEffect"
    },
    "Duel.SynchroSummon": {
        "prefix": "Duel.SynchroSummon",
        "description": "•Duel.SynchroSummon(int player, Card c, Card tuner|nil[, Group mg|nil, int minc=0, int maxc=0])\n让玩家player以tuner作为调整,场上[或mg][minc-maxc 张]的卡为素材，对c进行同调召唤手续  \n",
        "body": "Duel.SynchroSummon"
    },
    "REASON_SYNCHRO": {
        "prefix": "REASON_SYNCHRO",
        "description": "用於同调召喚",
        "body": "REASON_SYNCHRO"
    },
    "Effect.GetCategory": {
        "prefix": "Effect.GetCategory",
        "description": "•Effect.GetCategory(Effect e)\n返回效果 e 的Category属性  \n",
        "body": "Effect.GetCategory"
    },
    "GetCost": {
        "prefix": "GetCost",
        "description": "•Effect.GetCost(Effect e)\n返回效果 e 的cost属性  \n",
        "body": "GetCost"
    },
    "Duel.IsExistingMatchingCard": {
        "prefix": "Duel.IsExistingMatchingCard",
        "description": "•Duel.IsExistingMatchingCard(function f|nil, int player, int s, int o, int count, Card|Group ex|nil, ...)\n过滤函数，检查以player来看的指定位置是否存在至少count张满足过滤条件f并且不等于ex的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第7个参数开始为额外参数  \n",
        "body": "Duel.IsExistingMatchingCard"
    },
    "EFFECT_IMMUNE_EFFECT": {
        "prefix": "EFFECT_IMMUNE_EFFECT",
        "description": "效果免疫",
        "body": "EFFECT_IMMUNE_EFFECT"
    },
    "Duel.SetChainLimitTillChainEnd": {
        "prefix": "Duel.SetChainLimitTillChainEnd",
        "description": "•Duel.SetChainLimitTillChainEnd(function f)\n功能同Duel.SetChainLimit，但是此函数设定的连锁条件直到连锁结束才会解除  \n",
        "body": "Duel.SetChainLimitTillChainEnd"
    },
    "IsAbleToEnterBP": {
        "prefix": "IsAbleToEnterBP",
        "description": "•Duel.IsAbleToEnterBP()\n检查回合玩家能否进入战斗阶段  \n",
        "body": "IsAbleToEnterBP"
    },
    "SUMMON_TYPE_SYNCHRO": {
        "prefix": "SUMMON_TYPE_SYNCHRO",
        "description": "同调召唤",
        "body": "SUMMON_TYPE_SYNCHRO"
    },
    "CATEGORY_COIN": {
        "prefix": "CATEGORY_COIN",
        "description": "硬币效果",
        "body": "CATEGORY_COIN"
    },
    "Card.GetMutualLinkedZone": {
        "prefix": "Card.GetMutualLinkedZone",
        "description": "•Card.GetMutualLinkedZone(Card c[, int player=c:GetControler()])\n返回[以 player 来看的]与卡片 c 互相连接的卡 所在的区域   \n",
        "body": "Card.GetMutualLinkedZone"
    },
    "IsSummonable": {
        "prefix": "IsSummonable",
        "description": "•Card.IsSummonable(Card c, bool ignore_count, Effect e|nil[, int minc=0, int zone=0x1f])\n检查c是否可以进行通常召唤（不包含通常召唤的set)，ignore_count=true则不检查召唤次数限制  \ne~=nil则检查c是否可以以效果e进行通常召唤，minc 表示至少需要的祭品数（用于区分妥协召唤与上级召唤）,zone 表示必须要召唤到的区域  \n",
        "body": "IsSummonable"
    },
    "SelectFusionMaterial": {
        "prefix": "SelectFusionMaterial",
        "description": "•Duel.SelectFusionMaterial(int player, Card c, Group g[, Card gc|nil, int chkf=PLAYER_NONE])\n让玩家player从g中选择一组[必须包含gc在内的]融合怪兽c的融合素材  \n##根据c的种类为EFFECT_FUSION_MATERIAL的效果的Operation操作  \n",
        "body": "SelectFusionMaterial"
    },
    "EFFECT_CANNOT_RELEASE": {
        "prefix": "EFFECT_CANNOT_RELEASE",
        "description": "不能进行解放行为",
        "body": "EFFECT_CANNOT_RELEASE"
    },
    "EFFECT_MUST_BE_FMATERIAL": {
        "prefix": "EFFECT_MUST_BE_FMATERIAL",
        "description": "必须作为融合素材",
        "body": "EFFECT_MUST_BE_FMATERIAL"
    },
    "Card.GetActivateEffect": {
        "prefix": "Card.GetActivateEffect",
        "description": "•Card.GetActivateEffect(Card c)\n返回c的“卡片发动”的效果，即类型为EFFECT_TYPE_ACTIVATE的效果  \n仅对魔法和陷阱有效  \n",
        "body": "Card.GetActivateEffect"
    },
    "Card.IsType": {
        "prefix": "Card.IsType",
        "description": "•Card.IsType(Card c, int type)\n检查c是否属于类型type  \n",
        "body": "Card.IsType"
    },
    "TIMING_DRAW_PHASE": {
        "prefix": "TIMING_DRAW_PHASE",
        "description": "抽卡阶段时点",
        "body": "TIMING_DRAW_PHASE"
    },
    "FilterSelect": {
        "prefix": "FilterSelect",
        "description": "•Group.FilterSelect(Group g, int player, function f, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家player从卡片组g中选择 min-max 张满足筛选条件f并且不等于ex的卡  \n从第7个参数开始为额外参数  \n",
        "body": "FilterSelect"
    },
    "HINTMSG_SMATERIAL": {
        "prefix": "HINTMSG_SMATERIAL",
        "description": "请选择要作为同调素材的卡",
        "body": "HINTMSG_SMATERIAL"
    },
    "SetCost": {
        "prefix": "SetCost",
        "description": "•Effect.SetCost(Effect e, function cost_func)\n设置效果 e 的Cost属性  \n",
        "body": "SetCost"
    },
    "RESET_OVERLAY": {
        "prefix": "RESET_OVERLAY",
        "description": "超量叠放重置",
        "body": "RESET_OVERLAY"
    },
    "GetOriginalRightScale": {
        "prefix": "GetOriginalRightScale",
        "description": "•Card.GetOriginalRightScale(Card c)\n返回c的原本的右灵摆刻度  \n",
        "body": "GetOriginalRightScale"
    },
    "EFFECT_MSET_COST": {
        "prefix": "EFFECT_MSET_COST",
        "description": "怪兽放置代价",
        "body": "EFFECT_MSET_COST"
    },
    "Effect.SetHintTiming": {
        "prefix": "Effect.SetHintTiming",
        "description": "•Effect.SetHintTiming(Effect e, int s_time[, int o_time=s_time])\n设置效果 e 的提示时点，第二个和第三个参数分别表示 自己 和对方的回合  \n",
        "body": "Effect.SetHintTiming"
    },
    "Card.GetPreviousTypeOnField": {
        "prefix": "Card.GetPreviousTypeOnField",
        "description": "•Card.GetPreviousTypeOnField(Card c)\n返回c位置变化之前在场上的类型  \n",
        "body": "Card.GetPreviousTypeOnField"
    },
    "EFFECT_MUST_ATTACK": {
        "prefix": "EFFECT_MUST_ATTACK",
        "description": "必须攻击",
        "body": "EFFECT_MUST_ATTACK"
    },
    "Card.GetPreviousControler": {
        "prefix": "Card.GetPreviousControler",
        "description": "•Card.GetPreviousControler(Card c)\n返回c的位置变化之前的控制者  \n",
        "body": "Card.GetPreviousControler"
    },
    "EFFECT_CANNOT_TO_DECK": {
        "prefix": "EFFECT_CANNOT_TO_DECK",
        "description": "不能回卡组",
        "body": "EFFECT_CANNOT_TO_DECK"
    },
    "IsLevelAbove": {
        "prefix": "IsLevelAbove",
        "description": "•Card.IsLevelAbove(Card c, int level)\n检查c是否是等级level以上  \n",
        "body": "IsLevelAbove"
    },
    "EFFECT_SPIRIT_MAYNOT_RETURN": {
        "prefix": "EFFECT_SPIRIT_MAYNOT_RETURN",
        "description": "灵魂怪兽可以不返回手牌",
        "body": "EFFECT_SPIRIT_MAYNOT_RETURN"
    },
    "GetLeaveFieldDest": {
        "prefix": "GetLeaveFieldDest",
        "description": "•Card.GetLeaveFieldDest(Card c)\n返回c离场时因改变去向的效果（如大宇宙）的目的地  \n",
        "body": "GetLeaveFieldDest"
    },
    "IsLinkAbove": {
        "prefix": "IsLinkAbove",
        "description": "•Card.IsLinkAbove(Card c, int link)\n检查c是否连接标记数量是link以上  \n",
        "body": "IsLinkAbove"
    },
    "aux.TuneMagicianCheckX": {
        "prefix": "aux.TuneMagicianCheckX",
        "description": "•aux.TuneMagicianCheckX(Card c, Group sg, Effect e)\n调弦之魔术师(73941492)专用  \n",
        "body": "aux.TuneMagicianCheckX"
    },
    "EFFECT_FLAG_PLAYER_TARGET": {
        "prefix": "EFFECT_FLAG_PLAYER_TARGET",
        "description": "以玩家为对象",
        "body": "EFFECT_FLAG_PLAYER_TARGET"
    },
    "Duel.SkipPhase": {
        "prefix": "Duel.SkipPhase",
        "description": "•Duel.SkipPhase(int player, int phase, int reset_flag, int reset_count[, int value])\n跳过玩家player的phase阶段，并在特定的阶段后reset，reset参数和效果相同  \n#value只对phase=PHASE_BATTLE才有用，value=1跳过战斗阶段的结束步骤，用于“变成回合结束阶段”等（招财猫王，闪光弹）  \n",
        "body": "Duel.SkipPhase"
    },
    "AdjustInstantly": {
        "prefix": "AdjustInstantly",
        "description": "•Duel.AdjustInstantly([Card c])\n手动刷新场上[受到卡片c影响]的卡的无效状态  \n",
        "body": "AdjustInstantly"
    },
    "HINTMSG_SELECT": {
        "prefix": "HINTMSG_SELECT",
        "description": "请选择",
        "body": "HINTMSG_SELECT"
    },
    "aux.GetLinkMaterials": {
        "prefix": "aux.GetLinkMaterials",
        "description": "•aux.GetLinkMaterials(int tp, function filter, Card lc)\n获取玩家 tp 的 LOCATION_MZONE 里满足条件 f 的能作为卡片 lc 的连接素材的卡片组  \n",
        "body": "aux.GetLinkMaterials"
    },
    "Duel.GetCoinResult": {
        "prefix": "Duel.GetCoinResult",
        "description": "•Duel.GetCoinResult()\n返回当前投硬币的结果  \n",
        "body": "Duel.GetCoinResult"
    },
    "Duel.SpecialSummonComplete": {
        "prefix": "Duel.SpecialSummonComplete",
        "description": "•Duel.SpecialSummonComplete()\n此函数在确定复数个Duel.SpecialSummonStep调用完毕之后调用，用于触发事件  \n",
        "body": "Duel.SpecialSummonComplete"
    },
    "CHAININFO_TRIGGERING_ATTACK": {
        "prefix": "CHAININFO_TRIGGERING_ATTACK",
        "description": "连锁发生时的攻击力",
        "body": "CHAININFO_TRIGGERING_ATTACK"
    },
    "Duel.IncreaseSummonedCount": {
        "prefix": "Duel.IncreaseSummonedCount",
        "description": "•Duel.IncreaseSummonedCount([Card c])\n手动增加1次玩家[对于卡片c]的已经通常召唤过的次数  \n",
        "body": "Duel.IncreaseSummonedCount"
    },
    "Duel.ShuffleExtra": {
        "prefix": "Duel.ShuffleExtra",
        "description": "•Duel.ShuffleExtra(int player)\n手动洗切玩家player的额外卡组  \n",
        "body": "Duel.ShuffleExtra"
    },
    "Duel.ResetFlagEffect": {
        "prefix": "Duel.ResetFlagEffect",
        "description": "•Duel.ResetFlagEffect(int player, int code)\n手动reset玩家player的 code 标识效果  \n",
        "body": "Duel.ResetFlagEffect"
    },
    "LOCATION_EXTRA": {
        "prefix": "LOCATION_EXTRA",
        "description": "额外",
        "body": "LOCATION_EXTRA"
    },
    "Card.RegisterFlagEffect": {
        "prefix": "Card.RegisterFlagEffect",
        "description": "•Card.RegisterFlagEffect(Card c, int code, int reset_flag, int property, int reset_count[, int label, int desc])\n为c注册一个标识用效果  \n注：注册给卡的标识用效果不会用于系统，  \n即使code与内置效果code重合也不会影响，  \n并且类型总是EFFECT_TYPE_SINGLE，reset方法，property和一般的效果相同，  \n并且不会无效化，不受卡的免疫效果影响  \n",
        "body": "Card.RegisterFlagEffect"
    },
    "EFFECT_DOUBLE_TRIBUTE": {
        "prefix": "EFFECT_DOUBLE_TRIBUTE",
        "description": "可以作为2个祭品",
        "body": "EFFECT_DOUBLE_TRIBUTE"
    },
    "IsRelateToCard": {
        "prefix": "IsRelateToCard",
        "description": "•Card.IsRelateToCard(Card c1, Card c2)\n检查c1是否和c2有联系  \n",
        "body": "IsRelateToCard"
    },
    "ASSUME_TYPE": {
        "prefix": "ASSUME_TYPE",
        "body": "ASSUME_TYPE"
    },
    "DUEL_NO_CHAIN_HINT": {
        "prefix": "DUEL_NO_CHAIN_HINT",
        "description": "N/A",
        "body": "DUEL_NO_CHAIN_HINT"
    },
    "SetTargetCard": {
        "prefix": "SetTargetCard",
        "description": "•Duel.SetTargetCard(Card|Group targets)\n把当前正在处理的连锁的对象设置成targets  \n注，这里的对象指的的广义的对象，包括不取对象的效果可能要处理的对象  \n",
        "body": "SetTargetCard"
    },
    "Clone": {
        "prefix": "Clone",
        "description": "•Effect.Clone(Effect e)\n新建一个效果e的副本  \n\n•Group.Clone(Group g)\n新建卡片组g的副本  \n\n",
        "body": "Clone"
    },
    "IsAbleToRemove": {
        "prefix": "IsAbleToRemove",
        "description": "•Card.IsAbleToRemove(Card c[, int player, int pos=POS_FACEUP, int reason=REASON_EFFECT])\n检查c是否可以被[玩家 player 以 pos 的表示形式,reason 原因]除外  \n",
        "body": "IsAbleToRemove"
    },
    "Group.ForEach": {
        "prefix": "Group.ForEach",
        "description": "•Group.ForEach(Group g, function f,...)\n为卡片组g中的每一张卡调用一次f ,第三个参数开始为额外参数  \n",
        "body": "Group.ForEach"
    },
    "EFFECT_FLAG_FUNC_VALUE": {
        "prefix": "EFFECT_FLAG_FUNC_VALUE",
        "description": "此效果的Value属性是函数",
        "body": "EFFECT_FLAG_FUNC_VALUE"
    },
    "Card.GetSummonType": {
        "prefix": "Card.GetSummonType",
        "description": "•Card.GetSummonType(Card c)\n返回c的召唤/特殊召唤的方式  \n",
        "body": "Card.GetSummonType"
    },
    "GetLink": {
        "prefix": "GetLink",
        "description": "•Card.GetLink(Card c)\n返回c的连接标记数量  \n",
        "body": "GetLink"
    },
    "aux.ritlimit": {
        "prefix": "aux.ritlimit",
        "description": "•aux.ritlimit(Effect e, Effect se, int sp, int st)\n不能用 仪式召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.ritlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_RITUAL==SUMMON_TYPE_RITUAL  \nend  \n",
        "body": "aux.ritlimit"
    },
    "REASON_RRECOVER": {
        "prefix": "REASON_RRECOVER",
        "description": "傷害轉換後的回復",
        "body": "REASON_RRECOVER"
    },
    "ASSUME_ATTACK": {
        "prefix": "ASSUME_ATTACK",
        "body": "ASSUME_ATTACK"
    },
    "HINT_OPSELECTED": {
        "prefix": "HINT_OPSELECTED",
        "body": "HINT_OPSELECTED"
    },
    "GetLinkMaterials": {
        "prefix": "GetLinkMaterials",
        "description": "•aux.GetLinkMaterials(int tp, function filter, Card lc)\n获取玩家 tp 的 LOCATION_MZONE 里满足条件 f 的能作为卡片 lc 的连接素材的卡片组  \n",
        "body": "GetLinkMaterials"
    },
    "GetEquipCount": {
        "prefix": "GetEquipCount",
        "description": "•Card.GetEquipCount(Card c)\n返回c当前装备着的卡片数量  \n",
        "body": "GetEquipCount"
    },
    "SelectTribute": {
        "prefix": "SelectTribute",
        "description": "•Duel.SelectTribute(int player, Card c, int min, int max[, Group mg|nil, int toplayer=player])\n让玩家player从场上[或mg中]选择用于通常召唤c的min-max个祭品，召唤到 toplayer 场上  \n",
        "body": "SelectTribute"
    },
    "Duel.AnnounceLevel": {
        "prefix": "Duel.AnnounceLevel",
        "description": "•Duel.AnnounceLevel(int player[, int min=1, int max=12, ...])\n让玩家宣言一个[min-max]等级并返回  \n第四个参数开始，表示要排除的等级  \n",
        "body": "Duel.AnnounceLevel"
    },
    "GlobalEffect": {
        "prefix": "GlobalEffect",
        "description": "•Effect.GlobalEffect()\n新建一个全局效果  \n",
        "body": "GlobalEffect"
    },
    "aux.Next": {
        "prefix": "aux.Next",
        "description": "•aux.Next(Group g)\n卡片组 g 的迭代器，指针会先指向第一张卡，然后每次调用这函数指向下一张卡，通常用在需要对g中的卡片进行操作的时候  \n例如：  \n\tlocal g=Group.CreateGroup()  \n\tfor tc in aux.Next(g) do  \n\tend  \n等价于：  \n\tlocal g=Group.CreateGroup()  \n\tlocal tc=g:GetFirst()  \n\twhile tc do  \n\t\ttc=g:GetNext()  \n\tend  \n",
        "body": "aux.Next"
    },
    "CATEGORY_DECKDES": {
        "prefix": "CATEGORY_DECKDES",
        "description": "從卡组送去墓地效果",
        "body": "CATEGORY_DECKDES"
    },
    "AnnounceLevel": {
        "prefix": "AnnounceLevel",
        "description": "•Duel.AnnounceLevel(int player[, int min=1, int max=12, ...])\n让玩家宣言一个[min-max]等级并返回  \n第四个参数开始，表示要排除的等级  \n",
        "body": "AnnounceLevel"
    },
    "EVENT_LEVEL_UP": {
        "prefix": "EVENT_LEVEL_UP",
        "description": "等级上升时",
        "body": "EVENT_LEVEL_UP"
    },
    "nzatk": {
        "prefix": "nzatk",
        "description": "•aux.nzatk(Card c)\n攻击力不为0的表侧表示的怪兽的过滤函数的简单写法  \nfunction Auxiliary.nzatk(c)  \n\treturn c:IsFaceup() and c:GetAttack()>0  \nend  \n",
        "body": "nzatk"
    },
    "IsSSetable": {
        "prefix": "IsSSetable",
        "description": "•Card.IsSSetable(Card c[, bool ignore_field=false])\n检查c是否可以set到魔法陷阱区，ignore_field=true则无视魔陷区格子是否能使用的限制  \n",
        "body": "IsSSetable"
    },
    "ResetEffect": {
        "prefix": "ResetEffect",
        "description": "•Card.ResetEffect(Card c, int reset_code, int reset_type)\n以重置类型为reset_type、重置种类为reset_code手动重置c受到的效果的影响  \nreset_type只能是以下类型，对应的重置种类为  \nRESET_EVENT       发生事件重置        reset_code为事件  \nRESET_PHASE       阶段结束重置        reset_code为阶段  \nRESET_CODE        重置指定code的效果  reset_code为效果的种类code，只能重置EFFECT_TYPE_SINGLE的永续型效果  \nRESET_COPY        重置复制的效果      reset_code为copy_id  \nRESET_CARD        重置卡片的效果      reset_code为效果owner的卡号  \n",
        "body": "ResetEffect"
    },
    "EFFECT_SWAP_ATTACK_FINAL": {
        "prefix": "EFFECT_SWAP_ATTACK_FINAL",
        "description": "N/A",
        "body": "EFFECT_SWAP_ATTACK_FINAL"
    },
    "DiscardHand": {
        "prefix": "DiscardHand",
        "description": "•Duel.DiscardHand(int player, function f, int min, int max, int reason, Card|Group ex|nil, ...)\n过滤函数让玩家player选择并以reason原因丢弃满足筛选条件f并不等于ex的min-max张手卡  \n第7个参数开始为额外参数  \n",
        "body": "DiscardHand"
    },
    "SetType": {
        "prefix": "SetType",
        "description": "•Effect.SetType(Effect e, int type)\n为效果e设置Type属性  \nEFFECT_TYPE_SINGLE\t\t\t=0x0001\t\t--自己状态变化时触发  \nEFFECT_TYPE_FIELD\t\t\t=0x0002\t\t--场上所有卡状态变化时触发  \nEFFECT_TYPE_EQUIP\t\t\t=0x0004\t\t--装备效果  \nEFFECT_TYPE_ACTIONS\t\t\t=0x0008\t\t--触发型，以下類型會自動添加此屬性（对峙的G）  \nEFFECT_TYPE_ACTIVATE\t\t=0x0010\t\t--魔陷发动  \nEFFECT_TYPE_FLIP\t\t\t=0x0020\t\t--翻转效果  \nEFFECT_TYPE_IGNITION\t\t=0x0040\t\t--起动效果  \nEFFECT_TYPE_TRIGGER_O\t\t=0x0080\t\t--诱发选发效果  \nEFFECT_TYPE_QUICK_O\t\t\t=0x0100\t\t--诱发即时效果  \nEFFECT_TYPE_TRIGGER_F\t\t=0x0200\t\t--诱发必发效果  \nEFFECT_TYPE_QUICK_F\t\t\t=0x0400\t\t--诱发即时必发效果（熊猫龙等）  \nEFFECT_TYPE_CONTINUOUS\t\t=0x0800\t\t--由事件觸發的輔助用效果/永續效果  \nEFFECT_TYPE_XMATERIAL\t\t=0x1000\t\t--作为超量素材时超量怪兽获得的效果（十二兽）  \nEFFECT_TYPE_GRANT\t\t\t=0x2000\t\t--使其他卡片获得效果（天气模样）  \nEFFECT_TYPE_TARGET          =0x4000     --影响持续取的对象的效果（基本只用于魔陷）  \n",
        "body": "SetType"
    },
    "IsFusionCode": {
        "prefix": "IsFusionCode",
        "description": "•Card.IsFusionCode(Card c, int code[, ...])\n检查c作为融合素材时能否当作卡号为code的卡，额外参数是其他code  \n",
        "body": "IsFusionCode"
    },
    "SelectReleaseGroup": {
        "prefix": "SelectReleaseGroup",
        "description": "•Duel.SelectReleaseGroup(int sel_player, function f|nil, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家sel_player从场上选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）  \n第6个参数开始为额外参数  \n",
        "body": "SelectReleaseGroup"
    },
    "CATEGORY_TOEXTRA": {
        "prefix": "CATEGORY_TOEXTRA",
        "description": "回额外卡组效果",
        "body": "CATEGORY_TOEXTRA"
    },
    "OPCODE_ADD": {
        "prefix": "OPCODE_ADD",
        "body": "OPCODE_ADD"
    },
    "HINTMSG_SELF": {
        "prefix": "HINTMSG_SELF",
        "description": "请选择自己的卡",
        "body": "HINTMSG_SELF"
    },
    "aux.FilterEqualFunction": {
        "prefix": "aux.FilterEqualFunction",
        "description": "•aux.FilterEqualFunction(function f, any value, ...)\n用于过滤满足单一过滤条件 f ,且值为 value 的卡,,返回的是一个 有 bool 返回值类型的 函数， 第3个参数开始为额外参数  \nfunction Auxiliary.FilterEqualFunction(f,value,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))==value  \n\t\t\tend  \nend  \n",
        "body": "aux.FilterEqualFunction"
    },
    "__bxor": {
        "prefix": "__bxor",
        "description": "•Group.__bxor(Group|Card target1, Group|Card target2)\n新建一个卡片组，将 target1 和 target2 中不同的卡（就是只存在于 target1 或者 target2 里的卡）全部添加到 这个卡片组里，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n",
        "body": "__bxor"
    },
    "GetTextDefense": {
        "prefix": "GetTextDefense",
        "description": "•Card.GetTextDefense(Card c)\n返回c的卡片记载的守备力，返回值是负数表示是\"?\"  \n",
        "body": "GetTextDefense"
    },
    "SelectDisableField": {
        "prefix": "SelectDisableField",
        "description": "•Duel.SelectDisableField(int player, int count, int s, int o, int filter)\n让玩家player选择指定位置(s 和 o)中filter以外的count个格子，并返回选择位置的标记  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n注意这个函数并不会实际无效所选格子  \n常用于选择区域不能使用  \n##位置标记的定义如下  \n##flag = 0;  \n##seq为在玩家p，位置l中选择的格子序号  \n##for(int32 i = 0; i < count; ++i) {  \n##\tflag |= 1 << (seq[i] + (p[i] == player ? 0 : 16) + (l[i] == LOCATION_MZONE ? 0 : 8));  \n##}  \n",
        "body": "SelectDisableField"
    },
    "GetLP": {
        "prefix": "GetLP",
        "description": "•Duel.GetLP(int player)\n返回玩家player的当前LP  \n",
        "body": "GetLP"
    },
    "EFFECT_ADD_RACE": {
        "prefix": "EFFECT_ADD_RACE",
        "description": "增加种族",
        "body": "EFFECT_ADD_RACE"
    },
    "SSet": {
        "prefix": "SSet",
        "description": "•Duel.SSet(int player, Card|Group targets[, int target_player=player, bool confirm=true])\n让玩家player把targets盖放到target_player的魔法陷阱区， confirm 表示是否需要确认  \n若targets为Group，则返回成功操作的数量  \n",
        "body": "SSet"
    },
    "REASON_BATTLE": {
        "prefix": "REASON_BATTLE",
        "description": "战斗破坏",
        "body": "REASON_BATTLE"
    },
    "DualNormalCondition": {
        "prefix": "DualNormalCondition",
        "description": "•aux.DualNormalCondition(Effect e)\n检查二重怪兽e:GetHandler()是否为被视为通常怪兽的状态（用于效果的Condition属性）  \n",
        "body": "DualNormalCondition"
    },
    "GetActivateSequence": {
        "prefix": "GetActivateSequence",
        "description": "•Effect.GetActivateSequence(Effect e)\n返回效果e的发动区域序号  \n",
        "body": "GetActivateSequence"
    },
    "HINT_ZONE": {
        "prefix": "HINT_ZONE",
        "body": "HINT_ZONE"
    },
    "aux.MustMaterialCounterFilter": {
        "prefix": "aux.MustMaterialCounterFilter",
        "description": "•aux.MustMaterialCounterFilter(Card c, Group g)\n如果 g 中 包含 c ，则返回 false  \n",
        "body": "aux.MustMaterialCounterFilter"
    },
    "GetColumnGroupCount": {
        "prefix": "GetColumnGroupCount",
        "description": "•Card.GetColumnGroupCount(Card c)\n用法同 Card.GetColumnGroup ，只是返回的是卡片的数量  \n",
        "body": "GetColumnGroupCount"
    },
    "EVENT_BATTLE_CONFIRM": {
        "prefix": "EVENT_BATTLE_CONFIRM",
        "description": "伤害计算前（反转後）",
        "body": "EVENT_BATTLE_CONFIRM"
    },
    "Duel.ChangeChainOperation": {
        "prefix": "Duel.ChangeChainOperation",
        "description": "•Duel.ChangeChainOperation(int chainc, function f)\n把连锁chainc的效果的处理函数换成f，用于实现“把效果变成”等的效果  \nchainc=0 表示当前效果  \nf(e,tp,eg,ep,ev,re,r,rp)  \n",
        "body": "Duel.ChangeChainOperation"
    },
    "Next": {
        "prefix": "Next",
        "description": "•aux.Next(Group g)\n卡片组 g 的迭代器，指针会先指向第一张卡，然后每次调用这函数指向下一张卡，通常用在需要对g中的卡片进行操作的时候  \n例如：  \n\tlocal g=Group.CreateGroup()  \n\tfor tc in aux.Next(g) do  \n\tend  \n等价于：  \n\tlocal g=Group.CreateGroup()  \n\tlocal tc=g:GetFirst()  \n\twhile tc do  \n\t\ttc=g:GetNext()  \n\tend  \n",
        "body": "Next"
    },
    "GetReasonPlayer": {
        "prefix": "GetReasonPlayer",
        "description": "•Card.GetReasonPlayer(Card c)\n返回导致c的位置变化的玩家  \n",
        "body": "GetReasonPlayer"
    },
    "EVENT_CHAINING": {
        "prefix": "EVENT_CHAINING",
        "description": "效果发动时",
        "body": "EVENT_CHAINING"
    },
    "CHAININFO_EXTTYPE": {
        "prefix": "CHAININFO_EXTTYPE",
        "description": "连锁额外类型",
        "body": "CHAININFO_EXTTYPE"
    },
    "AddFusionProcCodeFun": {
        "prefix": "AddFusionProcCodeFun",
        "description": "•aux.AddFusionProcCodeFun(Card c, int code, function f, int cc, bool sub, bool insf)\n为c 添加融合召唤手续  \n用卡号为 code 的1只怪兽，和 cc 个满足条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,table.unpack(fun)),fun 是包含 cc 个 满足条件 f 的卡的表  \n",
        "body": "AddFusionProcCodeFun"
    },
    "EFFECT_SKIP_DP": {
        "prefix": "EFFECT_SKIP_DP",
        "description": "跳过抽卡阶段",
        "body": "EFFECT_SKIP_DP"
    },
    "PHASE_BATTLE_START": {
        "prefix": "PHASE_BATTLE_START",
        "description": "战斗阶段开始",
        "body": "PHASE_BATTLE_START"
    },
    "RESET_SELF_TURN": {
        "prefix": "RESET_SELF_TURN",
        "description": "自己回合的階段重置",
        "body": "RESET_SELF_TURN"
    },
    "LINK_MARKER_LEFT": {
        "prefix": "LINK_MARKER_LEFT",
        "description": "←",
        "body": "LINK_MARKER_LEFT"
    },
    "Card.IsRelateToCard": {
        "prefix": "Card.IsRelateToCard",
        "description": "•Card.IsRelateToCard(Card c1, Card c2)\n检查c1是否和c2有联系  \n",
        "body": "Card.IsRelateToCard"
    },
    "Card.IsAbleToRemoveAsCost": {
        "prefix": "Card.IsAbleToRemoveAsCost",
        "description": "•Card.IsAbleToRemoveAsCost(Card c[, int pos=POS_FACEUP])\n检查c是否可以[以 pos 表示形式]作为cost除外  \n",
        "body": "Card.IsAbleToRemoveAsCost"
    },
    "__len": {
        "prefix": "__len",
        "description": "•Group.__len(Group g)\n和 Group.GetCount 一样  \n",
        "body": "__len"
    },
    "SUMMON_TYPE_SPECIAL": {
        "prefix": "SUMMON_TYPE_SPECIAL",
        "description": "特殊召唤(EFFECT_SPSUMMON_PROC,EFFECT_SPSUMMON_PROC_G 可用Value修改數值)",
        "body": "SUMMON_TYPE_SPECIAL"
    },
    "EFFECT_EXTRA_ATTACK": {
        "prefix": "EFFECT_EXTRA_ATTACK",
        "description": "增加攻击次数",
        "body": "EFFECT_EXTRA_ATTACK"
    },
    "EFFECT_LEAVE_FIELD_REDIRECT": {
        "prefix": "EFFECT_LEAVE_FIELD_REDIRECT",
        "description": "离场时重新指定去向",
        "body": "EFFECT_LEAVE_FIELD_REDIRECT"
    },
    "EFFECT_CANNOT_SSET": {
        "prefix": "EFFECT_CANNOT_SSET",
        "description": "不能覆盖魔陷",
        "body": "EFFECT_CANNOT_SSET"
    },
    "EFFECT_LEFT_SPSUMMON_COUNT": {
        "prefix": "EFFECT_LEFT_SPSUMMON_COUNT",
        "description": "剩餘召喚次數(召喚限制網)",
        "body": "EFFECT_LEFT_SPSUMMON_COUNT"
    },
    "Card.GetCounter": {
        "prefix": "Card.GetCounter",
        "description": "•Card.GetCounter(Card c, int countertype)\n返回c上的countertype类型的指示物的数量， countertype=0 则返回c上所有类型的指示物数量之和  \n",
        "body": "Card.GetCounter"
    },
    "Card.GetFieldID": {
        "prefix": "Card.GetFieldID",
        "description": "•Card.GetFieldID(Card c)\n返回c转移到当前位置的时间标识  \n此数值唯一，越小表示c是越早出现在那个位置  \n卡片从里侧翻开也会改变此数值  \n",
        "body": "Card.GetFieldID"
    },
    "indoval": {
        "prefix": "indoval",
        "description": "•aux.indoval(Effect e, Effect re, int rp)\n不会被对方的卡破坏的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.indoval(e,re,rp)  \n\treturn rp==1-e:GetHandlerPlayer()  \nend  \n",
        "body": "indoval"
    },
    "CATEGORY_FUSION_SUMMON": {
        "prefix": "CATEGORY_FUSION_SUMMON",
        "description": "融合召唤效果（暴走魔法阵）",
        "body": "CATEGORY_FUSION_SUMMON"
    },
    "Group.DeleteGroup": {
        "prefix": "Group.DeleteGroup",
        "description": "•Group.DeleteGroup(Group g)\n删除卡片组g  \n",
        "body": "Group.DeleteGroup"
    },
    "Duel.SelectTarget": {
        "prefix": "Duel.SelectTarget",
        "description": "•Duel.SelectTarget(int sel_player, function f|nil, int player, int s, int o, int min, int max, Card|Group ex|nil, ...)\n基本同Duel.SelectMatchingCard ，不同之处在于此函数会同时将当前正在处理的连锁的对象设置成选择的卡  \n",
        "body": "Duel.SelectTarget"
    },
    "Card.GetOwnerTarget": {
        "prefix": "Card.GetOwnerTarget",
        "description": "•Card.GetOwnerTarget(Card c)\n返回取c作为永续对象的所有卡  \n",
        "body": "Card.GetOwnerTarget"
    },
    "IsDefensePos": {
        "prefix": "IsDefensePos",
        "description": "•Card.IsDefensePos(Card c)\n检查c是否是守备表示  \n",
        "body": "IsDefensePos"
    },
    "Duel.ChangeTargetPlayer": {
        "prefix": "Duel.ChangeTargetPlayer",
        "description": "•Duel.ChangeTargetPlayer(int chainc, in player)\n把连锁chainc的对象玩家换成player  \nchainc=0 表示当前效果  \n",
        "body": "Duel.ChangeTargetPlayer"
    },
    "EFFECT_ADD_EXTRA_TRIBUTE": {
        "prefix": "EFFECT_ADD_EXTRA_TRIBUTE",
        "description": "增加可使用的祭品（真龙）",
        "body": "EFFECT_ADD_EXTRA_TRIBUTE"
    },
    "Duel.CheckTiming": {
        "prefix": "Duel.CheckTiming",
        "description": "•Duel.CheckTiming(int timing)\n检查当前是否是timing提示时点  \nTIMING_DRAW_PHASE\t\t\t=0x1\t\t\t--抽卡阶段时点  \nTIMING_STANDBY_PHASE\t\t=0x2        \t--准备阶段时点  \nTIMING_MAIN_END\t\t\t\t=0x4        \t--主要阶段结束时点  \nTIMING_BATTLE_START\t\t\t=0x8        \t--战斗阶段开始时点  \nTIMING_BATTLE_END\t\t\t=0x10       \t--战斗阶段结束时点  \nTIMING_END_PHASE\t\t\t=0x20       \t--结束阶段时点  \nTIMING_SUMMON\t\t\t\t=0x40       \t--召唤时点  \nTIMING_SPSUMMON\t\t\t\t=0x80       \t--特殊召唤时点  \nTIMING_FLIPSUMMON\t\t\t=0x100      \t--翻转召唤时点  \nTIMING_MSET\t\t\t\t\t=0x200\t\t\t--放置怪兽时点  \nTIMING_SSET\t\t\t\t\t=0x400      \t--放置魔陷时点  \nTIMING_POS_CHANGE\t\t\t=0x800      \t--表示形式变更时点  \nTIMING_ATTACK\t\t\t\t=0x1000     \t--攻击宣言时点  \nTIMING_DAMAGE_STEP\t\t\t=0x2000     \t--伤害步骤时点  \nTIMING_DAMAGE_CAL\t\t\t=0x4000     \t--伤害计算时点  \nTIMING_CHAIN_END\t\t\t=0x8000     \t--连锁结束时点  \nTIMING_DRAW\t\t\t\t\t=0x10000    \t--抽卡时点（不是抽卡阶段  \nTIMING_DAMAGE\t\t\t\t=0x20000    \t--造成伤害时点  \nTIMING_RECOVER\t\t\t\t=0x40000\t\t--回复时点  \nTIMING_DESTROY\t\t\t\t=0x80000    \t--破坏时点  \nTIMING_REMOVE\t\t\t\t=0x100000   \t--除外时点  \nTIMING_TOHAND\t\t\t\t=0x200000   \t--加入手牌时点（检索、回收等）  \nTIMING_TODECK\t\t\t\t=0x400000   \t--回卡组时点  \nTIMING_TOGRAVE\t\t\t\t=0x800000   \t--进墓地时点  \nTIMING_BATTLE_PHASE\t\t\t=0x1000000  \t--战斗阶段时点  \nTIMING_EQUIP\t\t\t\t=0x2000000  \t--装备时点  \nTIMING_BATTLE_STEP_END\t\t=0x4000000  \t--戰鬥步驟結束時  \n",
        "body": "Duel.CheckTiming"
    },
    "Card.SetStatus": {
        "prefix": "Card.SetStatus",
        "description": "•Card.SetStatus(Card c, int state, bool enable)\n给c设置或者取消状态码  \n除非妳清楚的了解每个状态码的含意，否则不要轻易使用此函数  \n",
        "body": "Card.SetStatus"
    },
    "HINTMSG_DESREPLACE": {
        "prefix": "HINTMSG_DESREPLACE",
        "description": "请选择要代替破坏的卡",
        "body": "HINTMSG_DESREPLACE"
    },
    "EFFECT_SELF_DESTROY": {
        "prefix": "EFFECT_SELF_DESTROY",
        "description": "不入連鎖的破壞（罪系列等）",
        "body": "EFFECT_SELF_DESTROY"
    },
    "EFFECT_UNIQUE_CHECK": {
        "prefix": "EFFECT_UNIQUE_CHECK",
        "description": "場上只能存在1張(Card.SetUniqueOnField()專用)",
        "body": "EFFECT_UNIQUE_CHECK"
    },
    "SpecialSummonComplete": {
        "prefix": "SpecialSummonComplete",
        "description": "•Duel.SpecialSummonComplete()\n此函数在确定复数个Duel.SpecialSummonStep调用完毕之后调用，用于触发事件  \n",
        "body": "SpecialSummonComplete"
    },
    "aux.nzdef": {
        "prefix": "aux.nzdef",
        "description": "•aux.nzdef(Card c)\n守备力不为0的表侧表示的怪兽的过滤函数的简单写法  \nfunction Auxiliary.nzdef(c)  \n\treturn c:IsFaceup() and c:GetDefense()>0  \nend  \n",
        "body": "aux.nzdef"
    },
    "aux.GetColumn": {
        "prefix": "aux.GetColumn",
        "description": "•aux.GetColumn(Card c, int player=0)\n返回以 player 来看的卡片 c 所在的那一列的序号，不包含 场地区域，从左到右 分别是 0~4  \n",
        "body": "aux.GetColumn"
    },
    "IsCanBeLinkMaterial": {
        "prefix": "IsCanBeLinkMaterial",
        "description": "•Card.IsCanBeLinkMaterial(Card c, Card sc|nil)\n检查c是否可以成为[连接怪兽sc的]连接素材,没有指定sc的场合，必须填nil  \n",
        "body": "IsCanBeLinkMaterial"
    },
    "RESET_TOHAND": {
        "prefix": "RESET_TOHAND",
        "description": "回手牌或加入手牌重置",
        "body": "RESET_TOHAND"
    },
    "Duel.GetFirstMatchingCard": {
        "prefix": "Duel.GetFirstMatchingCard",
        "description": "•Duel.GetFirstMatchingCard(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)\n过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的第一张卡,没有则返回nil  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n",
        "body": "Duel.GetFirstMatchingCard"
    },
    "IsLinkMarker": {
        "prefix": "IsLinkMarker",
        "description": "•Card.IsLinkMarker(Card c, int dir)\n检查c是否是连接标记为 dir 的卡  \ndir的值有：  \nLINK_MARKER_BOTTOM_LEFT\t\t=0x001 -- ↙  \nLINK_MARKER_BOTTOM\t\t\t=0x002 -- ↓  \nLINK_MARKER_BOTTOM_RIGHT\t=0x004 -- ↘  \nLINK_MARKER_LEFT\t\t\t=0x008 -- ←  \nLINK_MARKER_RIGHT\t\t\t=0x020 -- →  \nLINK_MARKER_TOP_LEFT\t\t=0x040 -- ↖  \nLINK_MARKER_TOP\t\t\t\t=0x080 -- ↑  \nLINK_MARKER_TOP_RIGHT\t\t=0x100 -- ↗  \n",
        "body": "IsLinkMarker"
    },
    "Effect.GetHandler": {
        "prefix": "Effect.GetHandler",
        "description": "•Effect.GetHandler(Effect e)\n返回效果 e 在哪一张卡上生效(通常是用Card.RegisterEffect注册该效果的卡)  \n",
        "body": "Effect.GetHandler"
    },
    "Duel.ClearTargetCard": {
        "prefix": "Duel.ClearTargetCard",
        "description": "•Duel.ClearTargetCard()\n把当前正在处理的连锁的对象全部清除  \n",
        "body": "Duel.ClearTargetCard"
    },
    "Effect.SetLabel": {
        "prefix": "Effect.SetLabel",
        "description": "•Effect.SetLabel(Effect e, int label[, int label2, ...])\n设置效果 e 的Label(可以设置多个)  \n",
        "body": "Effect.SetLabel"
    },
    "Auxiliary.TargetBoolFunction": {
        "prefix": "Auxiliary.TargetBoolFunction",
        "description": "•Auxiliary.TargetBoolFunction(function f,...)\n一般用在效果注册里,返回的是一个 有 bool 返回值类型的 函数，第2个参数开始为额外参数  \nfunction Auxiliary.TargetBoolFunction(f,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(effect,target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))  \n\t\t\tend  \nend  \n",
        "body": "Auxiliary.TargetBoolFunction"
    },
    "CATEGORY_DISABLE": {
        "prefix": "CATEGORY_DISABLE",
        "description": "使效果无效效果",
        "body": "CATEGORY_DISABLE"
    },
    "CATEGORY_POSITION": {
        "prefix": "CATEGORY_POSITION",
        "description": "改变表示形式效果",
        "body": "CATEGORY_POSITION"
    },
    "SetCategory": {
        "prefix": "SetCategory",
        "description": "•Effect.SetCategory(Effect e, int cate)\n设置效果 e 的Category属性  \n",
        "body": "SetCategory"
    },
    "GetReasonCard": {
        "prefix": "GetReasonCard",
        "description": "•Card.GetReasonCard(Card c)\n返回导致c的位置变化的卡  \n此函数仅在某卡被战斗破坏时，因为上级召唤被解放，或者成为特殊召唤使用的素材时有效  \n",
        "body": "GetReasonCard"
    },
    "EVENT_REMOVE_COUNTER": {
        "prefix": "EVENT_REMOVE_COUNTER",
        "description": "去除指示物时(A指示物)，Card.RemoveCounter()必須手動觸發此事件",
        "body": "EVENT_REMOVE_COUNTER"
    },
    "Card.GetBattledGroupCount": {
        "prefix": "Card.GetBattledGroupCount",
        "description": "•Card.GetBattledGroupCount(Card c)\n返回与c本回合进行过战斗的的卡片数量  \n",
        "body": "Card.GetBattledGroupCount"
    },
    "aux.IsCounterAdded": {
        "prefix": "aux.IsCounterAdded",
        "description": "•aux.IsCounterAdded(Card c, int counter)\n检测 c 是否添加了指示物 counter (?)  \n",
        "body": "aux.IsCounterAdded"
    },
    "EFFECT_BATTLE_DAMAGE_TO_EFFECT": {
        "prefix": "EFFECT_BATTLE_DAMAGE_TO_EFFECT",
        "description": "战斗伤害视为效果伤害",
        "body": "EFFECT_BATTLE_DAMAGE_TO_EFFECT"
    },
    "EFFECT_ADD_FUSION_ATTRIBUTE": {
        "prefix": "EFFECT_ADD_FUSION_ATTRIBUTE",
        "description": "reserve",
        "body": "EFFECT_ADD_FUSION_ATTRIBUTE"
    },
    "Card.IsOriginalSetCard": {
        "prefix": "Card.IsOriginalSetCard",
        "description": "•Card.IsOriginalSetCard(Card c, int setname)\n检查c是否是原本卡名含有setname的卡  \n",
        "body": "Card.IsOriginalSetCard"
    },
    "LINK_MARKER_TOP": {
        "prefix": "LINK_MARKER_TOP",
        "description": "↑",
        "body": "LINK_MARKER_TOP"
    },
    "EFFECT_BATTLE_DESTROY_REDIRECT": {
        "prefix": "EFFECT_BATTLE_DESTROY_REDIRECT",
        "description": "战斗破坏时重新指定去向",
        "body": "EFFECT_BATTLE_DESTROY_REDIRECT"
    },
    "Card.GetSynchroType": {
        "prefix": "Card.GetSynchroType",
        "description": "•Card.GetSynchroType(Card c)\n返回c用作同调素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n",
        "body": "Card.GetSynchroType"
    },
    "Card.IsControler": {
        "prefix": "Card.IsControler",
        "description": "•Card.IsControler(Card c, int controler)\n检查c的当前控制着是否是controler  \n",
        "body": "Card.IsControler"
    },
    "EFFECT_SET_CONTROL": {
        "prefix": "EFFECT_SET_CONTROL",
        "description": "设置控制权",
        "body": "EFFECT_SET_CONTROL"
    },
    "CARD_MARINE_DOLPHIN": {
        "prefix": "CARD_MARINE_DOLPHIN",
        "description": "海洋海豚",
        "body": "CARD_MARINE_DOLPHIN"
    },
    "GetMustMaterialGroup": {
        "prefix": "GetMustMaterialGroup",
        "description": "•aux.GetMustMaterialGroup(int player , int code)\n如果 player 受到效果种类 code 影响，则返回受到影响的卡  \n目前代码中涉及的code有 EFFECT_MUST_BE_SMATERIAL, EFFECT_MUST_BE_XMATERIAL, EFFECT_MUST_BE_FMATERIAL, EFFECT_MUST_BE_LMATERIAL ,都是 必须成为素材的效果  \n",
        "body": "GetMustMaterialGroup"
    },
    "EFFECT_CHANGE_FUSION_ATTRIBUTE": {
        "prefix": "EFFECT_CHANGE_FUSION_ATTRIBUTE",
        "description": "用作融合素材时的属性",
        "body": "EFFECT_CHANGE_FUSION_ATTRIBUTE"
    },
    "Card.ResetFlagEffect": {
        "prefix": "Card.ResetFlagEffect",
        "description": "•Card.ResetFlagEffect(Card c, int code)\n手动清除c的种类是code的标识效果  \n",
        "body": "Card.ResetFlagEffect"
    },
    "Card.IsLocation": {
        "prefix": "Card.IsLocation",
        "description": "•Card.IsLocation(Card c, int location)\n检查c当前位置是否是location  \n注：location=LOCATION_MZONE时，怪兽召唤(广义的)之际或被无效会返回 false  \nlocation=LOCATION_SZONE时，魔陷发动无效会返回false  \n",
        "body": "Card.IsLocation"
    },
    "Duel.GetFieldCard": {
        "prefix": "Duel.GetFieldCard",
        "description": "•Duel.GetFieldCard(int player, int location, int seq)\n返回玩家player的场上位于location序号为seq的卡，常用于获得场地区域·灵摆区域的卡  \n注：召唤·反转召唤·特殊召唤 之际 或者 发动被无效 的卡无法获取  \n",
        "body": "Duel.GetFieldCard"
    },
    "EFFECT_UNRELEASABLE_NONSUM": {
        "prefix": "EFFECT_UNRELEASABLE_NONSUM",
        "description": "不能做上级召唤以外的祭品",
        "body": "EFFECT_UNRELEASABLE_NONSUM"
    },
    "EFFECT_SKIP_BP": {
        "prefix": "EFFECT_SKIP_BP",
        "description": "跳过战斗阶段",
        "body": "EFFECT_SKIP_BP"
    },
    "ChangeAttacker": {
        "prefix": "ChangeAttacker",
        "description": "•Duel.ChangeAttacker(Card c[, bool ignore_count=false])\n将攻击怪兽变为c  \n若 ignore_count=true 则原来的攻击怪兽不视为攻击过  \n",
        "body": "ChangeAttacker"
    },
    "EVENT_DAMAGE": {
        "prefix": "EVENT_DAMAGE",
        "description": "造成战斗/效果伤害时",
        "body": "EVENT_DAMAGE"
    },
    "Duel.SelectReleaseGroupEx": {
        "prefix": "Duel.SelectReleaseGroupEx",
        "description": "•Duel.SelectReleaseGroupEx(int player, function f|nil, int min, int max, Card|Group ex|nil, ...)\n过滤函数，让玩家player从场上·手卡选择min-max张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第6个参数开始为额外参数  \n",
        "body": "Duel.SelectReleaseGroupEx"
    },
    "Duel.SSet": {
        "prefix": "Duel.SSet",
        "description": "•Duel.SSet(int player, Card|Group targets[, int target_player=player, bool confirm=true])\n让玩家player把targets盖放到target_player的魔法陷阱区， confirm 表示是否需要确认  \n若targets为Group，则返回成功操作的数量  \n",
        "body": "Duel.SSet"
    },
    "Card.GetPosition": {
        "prefix": "Card.GetPosition",
        "description": "•Card.GetPosition(Card c)\n返回c当前的表示形式  \n",
        "body": "Card.GetPosition"
    },
    "aux.dogcon": {
        "prefix": "aux.dogcon",
        "description": "•aux.dogcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测 e:GetHandler() 是否是被对方破坏送去墓地 SetCondition  \nfunction Auxiliary.dogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:GetPreviousControler()==tp and c:IsReason(REASON_DESTROY) and rp==1-tp  \nend  \n",
        "body": "aux.dogcon"
    },
    "RACE_CYBERSE": {
        "prefix": "RACE_CYBERSE",
        "description": "电子界",
        "body": "RACE_CYBERSE"
    },
    "EFFECT_CANNOT_INACTIVATE": {
        "prefix": "EFFECT_CANNOT_INACTIVATE",
        "description": "发动不能被无效",
        "body": "EFFECT_CANNOT_INACTIVATE"
    },
    "EFFECT_CANNOT_SPECIAL_SUMMON": {
        "prefix": "EFFECT_CANNOT_SPECIAL_SUMMON",
        "description": "不能特殊召唤怪兽",
        "body": "EFFECT_CANNOT_SPECIAL_SUMMON"
    },
    "Group.SelectWithSumGreater": {
        "prefix": "Group.SelectWithSumGreater",
        "description": "•Group.SelectWithSumGreater(Group g, int player, function f, int sum, ...)\n让玩家player从卡片组g中选取一个子集使子集的特定函数f的和刚好大于等于sum，从第5个参数开始为额外参数  \n",
        "body": "Group.SelectWithSumGreater"
    },
    "Auxiliary.TargetEqualFunction": {
        "prefix": "Auxiliary.TargetEqualFunction",
        "description": "•Auxiliary.TargetEqualFunction(function f, any value, ...)\n一般用在效果注册里,返回的是一个 有 bool 返回值类型的 函数，第3个参数开始为额外参数  \nfunction Auxiliary.TargetEqualFunction(f,value,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(effect,target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))==value  \n\t\t\tend  \nend  \n",
        "body": "Auxiliary.TargetEqualFunction"
    },
    "HINTMSG_COIN": {
        "prefix": "HINTMSG_COIN",
        "description": "请选择硬币的正反面",
        "body": "HINTMSG_COIN"
    },
    "Stringid": {
        "prefix": "Stringid",
        "description": "•aux.Stringid(int code, int id)\n用于索引卡号为code的卡片第id个（从0开始）效果提示  \n",
        "body": "Stringid"
    },
    "TYPE_QUICKPLAY": {
        "prefix": "TYPE_QUICKPLAY",
        "description": "速攻",
        "body": "TYPE_QUICKPLAY"
    },
    "STATUS_BATTLE_DESTROYED": {
        "prefix": "STATUS_BATTLE_DESTROYED",
        "description": "战斗破坏确定後尚未移動",
        "body": "STATUS_BATTLE_DESTROYED"
    },
    "Group.GetMaxGroup": {
        "prefix": "Group.GetMaxGroup",
        "description": "•Group.GetMaxGroup(Group g, function f, ...)\nf为返回一个interger值的函数，从g中筛选出具有最大的f的值的卡  \n第2个返回值为这个最大值，从第3个参数开始为额外参数  \n要使用第2个返回值注意检查g非空  \n",
        "body": "Group.GetMaxGroup"
    },
    "Card.IsFusionAttribute": {
        "prefix": "Card.IsFusionAttribute",
        "description": "•Card.IsFusionAttribute(Card c, int attribute[, int player=PLAYER_NONE])\n检查c[由player融合召唤时]用作融合素材是否属于属性attribute  \n",
        "body": "Card.IsFusionAttribute"
    },
    "Card.IsCanBeLinkMaterial": {
        "prefix": "Card.IsCanBeLinkMaterial",
        "description": "•Card.IsCanBeLinkMaterial(Card c, Card sc|nil)\n检查c是否可以成为[连接怪兽sc的]连接素材,没有指定sc的场合，必须填nil  \n",
        "body": "Card.IsCanBeLinkMaterial"
    },
    "EFFECT_CANNOT_SUMMON": {
        "prefix": "EFFECT_CANNOT_SUMMON",
        "description": "不能召唤怪兽",
        "body": "EFFECT_CANNOT_SUMMON"
    },
    "damcon1": {
        "prefix": "damcon1",
        "description": "•aux.damcon1(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n玩家 tp 受到伤害 这个条件的简单写法，，用在效果注册里 SetCondition  \nfunction Auxiliary.damcon1(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal e1=Duel.IsPlayerAffectedByEffect(tp,EFFECT_REVERSE_DAMAGE)  \n\tlocal e2=Duel.IsPlayerAffectedByEffect(tp,EFFECT_REVERSE_RECOVER)  \n\tlocal rd=e1 and not e2  \n\tlocal rr=not e1 and e2  \n\tlocal ex,cg,ct,cp,cv=Duel.GetOperationInfo(ev,CATEGORY_DAMAGE)  \n\tif ex and (cp==tp or cp==PLAYER_ALL) and not rd and not Duel.IsPlayerAffectedByEffect(tp,EFFECT_NO_EFFECT_DAMAGE) then  \n\t\treturn true  \n\tend  \n\tex,cg,ct,cp,cv=Duel.GetOperationInfo(ev,CATEGORY_RECOVER)  \n\treturn ex and (cp==tp or cp==PLAYER_ALL) and rr and not Duel.IsPlayerAffectedByEffect(tp,EFFECT_NO_EFFECT_DAMAGE)  \nend  \n",
        "body": "damcon1"
    },
    "Group.Remove": {
        "prefix": "Group.Remove",
        "description": "•Group.Remove(Group g, function f, Card ex|nil, ...)\n从g中移除满足筛选条件f并且不等于ex的所有卡，第4个参数开始是额外参数  \n",
        "body": "Group.Remove"
    },
    "RESET_EVENT": {
        "prefix": "RESET_EVENT",
        "description": "指定的條件下重置(一般和下面这些事件配合使用)",
        "body": "RESET_EVENT"
    },
    "LOCATION_REASON_TOFIELD": {
        "prefix": "LOCATION_REASON_TOFIELD",
        "description": "Duel.GetLocationCount()預設值,凱薩競技場",
        "body": "LOCATION_REASON_TOFIELD"
    },
    "IsMaterialListCode": {
        "prefix": "IsMaterialListCode",
        "description": "•aux.IsMaterialListCode(Card c, int code])\n检测 c 是否是有卡名 code 为素材的卡  \nc.material  \n",
        "body": "IsMaterialListCode"
    },
    "IsHasCategory": {
        "prefix": "IsHasCategory",
        "description": "•Effect.IsHasCategory(Effect e, int cate)\n检查效果e是否含有效果分类cate  \n",
        "body": "IsHasCategory"
    },
    "Card.IsAllColumn": {
        "prefix": "Card.IsAllColumn",
        "description": "•Card.IsAllColumn(Card c)\n检查与c同一纵列的区域是否全都有卡  \n",
        "body": "Card.IsAllColumn"
    },
    "SetCounterLimit": {
        "prefix": "SetCounterLimit",
        "description": "•Card.SetCounterLimit(Card c, int countertype, int count)\n设定c放置countertype类型指示物的上限  \n",
        "body": "SetCounterLimit"
    },
    "TYPE_TRAPMONSTER": {
        "prefix": "TYPE_TRAPMONSTER",
        "description": "陷阱怪兽",
        "body": "TYPE_TRAPMONSTER"
    },
    "EFFECT_UPDATE_DEFENSE": {
        "prefix": "EFFECT_UPDATE_DEFENSE",
        "description": "改变防御力",
        "body": "EFFECT_UPDATE_DEFENSE"
    },
    "CATEGORY_SEARCH": {
        "prefix": "CATEGORY_SEARCH",
        "description": "检索卡组效果",
        "body": "CATEGORY_SEARCH"
    },
    "CATEGORY_LVCHANGE": {
        "prefix": "CATEGORY_LVCHANGE",
        "description": "改变等级效果",
        "body": "CATEGORY_LVCHANGE"
    },
    "bpcon": {
        "prefix": "bpcon",
        "description": "•aux.bpcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)\n检测能否进入战斗阶段 或者 是否已经在战斗阶段内 的简单写法 SetCondition  \nfunction Auxiliary.bpcon(e,tp,eg,ep,ev,re,r,rp)  \n\treturn Duel.IsAbleToEnterBP() or (Duel.GetCurrentPhase()>=PHASE_BATTLE_START and Duel.GetCurrentPhase()<=PHASE_BATTLE)  \nend  \n",
        "body": "bpcon"
    },
    "Duel.SelectSequence": {
        "prefix": "Duel.SelectSequence",
        "description": "•Duel.SelectSequence()\n看函数名字，像是选择序号的  \n但是此函数只有一个 check_action_permission(L) 操作，还没有返回值，不知何用  \n",
        "body": "Duel.SelectSequence"
    },
    "Duel.SelectTribute": {
        "prefix": "Duel.SelectTribute",
        "description": "•Duel.SelectTribute(int player, Card c, int min, int max[, Group mg|nil, int toplayer=player])\n让玩家player从场上[或mg中]选择用于通常召唤c的min-max个祭品，召唤到 toplayer 场上  \n",
        "body": "Duel.SelectTribute"
    },
    "EnableReviveLimitPendulumSummonable": {
        "prefix": "EnableReviveLimitPendulumSummonable",
        "description": "•aux.EnableReviveLimitPendulumSummonable(Card c[, int location=0xff])\n如果 怪兽 c 从 location 灵摆召唤，也能解除苏生限制(?) (超天新龙 异色眼革命龙 (16306932))  \n",
        "body": "EnableReviveLimitPendulumSummonable"
    },
    "AddXyzProcedureLevelFree": {
        "prefix": "AddXyzProcedureLevelFree",
        "description": "•aux.AddXyzProcedureLevelFree(Card c, function f|nil, function gf|nil, int minc, int maxc[, function alterf|nil, int desc|nil, function op|nil])\n为c添加超量召唤手续  \n用满足条件 f 的卡片组里，满足 gf 的 minc[-maxc] 只怪兽进行叠放，f 为必要条件，gf 为额外条件  \n或者在单个怪兽（通常是超量怪兽）上叠放  \nalterf为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（比如 闪光No.0 希望之异热同心）  \n",
        "body": "AddXyzProcedureLevelFree"
    },
    "OPCODE_NEG": {
        "prefix": "OPCODE_NEG",
        "body": "OPCODE_NEG"
    },
    "TYPE_MONSTER": {
        "prefix": "TYPE_MONSTER",
        "description": "怪兽卡",
        "body": "TYPE_MONSTER"
    },
    "IsAbleToExtra": {
        "prefix": "IsAbleToExtra",
        "description": "•Card.IsAbleToExtra(Card c)\n检查c是否可以送去额外卡组  \n对于非融合、同调等额外怪兽或者非灵摆怪兽此函数均返回false  \n",
        "body": "IsAbleToExtra"
    },
    "CATEGORY_GRAVE_ACTION": {
        "prefix": "CATEGORY_GRAVE_ACTION",
        "description": "包含涉及墓地的部分的效果（屋敷わらし）",
        "body": "CATEGORY_GRAVE_ACTION"
    },
    "mzctcheck": {
        "prefix": "mzctcheck",
        "description": "•aux.mzctcheck(Group g, int tp)\n检测玩家 tp 场上是否有卡片组 g 离开后可用的主要怪兽区格子 的简单写法  \nfunction Auxiliary.mzctcheck(g,tp)  \n\treturn Duel.GetMZoneCount(tp,g)>0  \nend  \n",
        "body": "mzctcheck"
    }
}