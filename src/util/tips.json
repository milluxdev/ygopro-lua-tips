{
    "CheckUniqueOnField": {
        "function": [
            {
                "name": "Card.CheckUniqueOnField(Card c,int check_player[, int check_location=LOCATION_ONFIELD, Card icard|nil])",
                "return": "bool",
                "desc": "检查c在check_player场上的唯一性  \n"
            }
        ]
    },
    "GetEnvironment": {
        "function": [
            {
                "name": "Duel.GetEnvironment()",
                "return": "int,int",
                "desc": "返回两个值，表示当前场地代号，以及当前场地效果的来源玩家  \n场地代号指当前生效的场地卡的代号，或者海神的巫女等卡把场地变化效果的值  \n来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者  \n"
            }
        ]
    },
    "GetPreviousCodeOnField": {
        "function": [
            {
                "name": "Card.GetPreviousCodeOnField(Card c)",
                "return": "int[,int]",
                "desc": "返回c位置变化之前在场上的卡号  \n"
            }
        ]
    },
    "GetLinkedGroup": {
        "function": [
            {
                "name": "Card.GetLinkedGroup(Card c)",
                "return": "Group",
                "desc": "返回c的连接区的卡片组（目前只限怪兽区）  \n"
            },
            {
                "name": "Duel.GetLinkedGroup(int player, int s_range, int o_range)",
                "return": "Group",
                "desc": "返回以玩家player来看的 s_range 和 o_range 区域的处于连接状态的卡片组[其实只要后面2个参数不为0就行，只要不为0，都会变成LOCATION_MZONE]（？）  \n"
            }
        ]
    },
    "CalculateDamage": {
        "function": [
            {
                "name": "Duel.CalculateDamage(Card c1, Card c2[, bool new_attack=false])",
                "return": "void",
                "desc": "令c1与c2进行战斗伤害计算（c1 攻击 c2）  \n若 new_attack=true 则视为 攻击的卡进行过攻击宣言（？）  \n"
            }
        ]
    },
    "CancelToGrave": {
        "function": [
            {
                "name": "Card.CancelToGrave(Card c[, bool cancel=true])",
                "return": "void",
                "desc": "取消送墓确定状态，cancel=false则重新设置送墓确定状态  \n注：送墓确定状态指的是在场上发动的不留场的魔法和陷阱后，这些卡片的状态  \n送墓确定状态中的卡无法返回手牌和卡组，并且连锁结束时送去墓地  \n此函数的作用是取消此状态使其留场，用于光之护封剑和废铁稻草人等卡  \n"
            }
        ]
    },
    "IsExtraLinkState": {
        "function": [
            {
                "name": "Card.IsExtraLinkState(Card c)",
                "return": "bool",
                "desc": "检查c是否是额外连接状态  \n"
            }
        ]
    },
    "IsAbleToDeck": {
        "function": [
            {
                "name": "Card.IsAbleToDeck(Card c)",
                "return": "bool",
                "desc": "检查c是否可以送去卡组  \n"
            }
        ]
    },
    "GetFieldCard": {
        "function": [
            {
                "name": "Duel.GetFieldCard(int player, int location, int seq)",
                "return": "Card",
                "desc": "返回玩家player的场上位于location序号为seq的卡，常用于获得场地区域·灵摆区域的卡  \n注：召唤·反转召唤·特殊召唤 之际 或者 发动被无效 的卡无法获取  \n"
            }
        ]
    },
    "GetTurnID": {
        "function": [
            {
                "name": "Card.GetTurnID(Card c)",
                "return": "int",
                "desc": "返回c转移到当前位置的回合  \n"
            }
        ]
    },
    "Equip": {
        "function": [
            {
                "name": "Duel.Equip(int player, Card c1, Card c2[, bool up=true, bool is_step=false])",
                "return": "bool",
                "desc": "让玩家player把c1作为装备卡装备给c2，返回值表示是否成功  \nup=false则保持装备卡之前的表示形式  \nis_step=true则是装备过程的分解，需要配合Duel.EquipComplete使用  \n"
            }
        ]
    },
    "GetControl": {
        "function": [
            {
                "name": "Duel.GetControl(Card|Group targets, int player[, int reset_phase=0, int reset_count=0, int zone=0xff])",
                "return": "bool",
                "desc": "让玩家 player [直到 reset_count 次 reset_phase 时][在区域 zone]得到 targets 的控制权，返回值表示是否成功  \nreset_phase ,reset_count 若要使用，必须都用  \nPHASE_DRAW\t\t\t=0x01\t--抽卡阶段  \nPHASE_STANDBY\t\t=0x02\t--准备阶段  \nPHASE_MAIN1\t\t\t=0x04\t--主要阶段1  \nPHASE_BATTLE_START\t=0x08\t--战斗阶段开始  \nPHASE_BATTLE_STEP\t=0x10\t--战斗步驟  \nPHASE_DAMAGE\t\t=0x20\t--伤害步驟  \nPHASE_DAMAGE_CAL\t=0x40\t--伤害计算时  \nPHASE_BATTLE\t\t=0x80\t--战斗阶段結束  \nPHASE_MAIN2\t\t\t=0x100\t--主要阶段2  \nPHASE_END\t\t\t=0x200\t--结束阶段  \n"
            }
        ]
    },
    "GetCategory": {
        "function": [
            {
                "name": "Effect.GetCategory(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的Category属性  \n"
            }
        ]
    },
    "IsAttack": {
        "function": [
            {
                "name": "Card.IsAttack(Card c, int atk1[, int atk2,...])",
                "return": "bool",
                "desc": "检查c的攻击力是否是 atk1[, 或者为 atk2...]，如果c不是怪兽卡，或者不在 LOCATION_MZONE 则都返回false  \n"
            }
        ]
    },
    "AddFusionProcFun2": {
        "function": [
            {
                "name": "aux.AddFusionProcFun2(Card c, function f1, function f2, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用满足条件 f1 与 f2 的怪兽 各1只为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,f1,f2)  \n"
            }
        ]
    },
    "EnableReviveLimit": {
        "function": [
            {
                "name": "Card.EnableReviveLimit(Card c)",
                "return": "void",
                "desc": "为c添加苏生限制  \n##实际上是不可复制、不会被无效的EFFECT_UNSUMMONABLE_CARD和EFFECT_REVIVE_LIMIT效果  \n"
            }
        ]
    },
    "IsEnvironment": {
        "function": [
            {
                "name": "Duel.IsEnvironment(int code[, int player=PLAYER_ALL, int loc = LOCATION_FZONE + LOCATION_ONFIELD])",
                "return": "bool",
                "desc": "检查场地代号是否是code [，来源玩家是否是 player][，生效区域是否在 loc 内]  \n场地代号指当前生效的场地卡的代号，或者海神的巫女把场地变化效果的值  \n来源玩家指当前生效的场地卡的控制者，或者海神的巫女等卡的控制者  \n"
            }
        ]
    },
    "SetChainLimitTillChainEnd": {
        "function": [
            {
                "name": "Duel.SetChainLimitTillChainEnd(function f)",
                "return": "void",
                "desc": "功能同Duel.SetChainLimit，但是此函数设定的连锁条件直到连锁结束才会解除  \n"
            }
        ]
    },
    "TuneMagicianFilter": {
        "function": [
            {
                "name": "aux.TuneMagicianFilter(Card c, Effect e)",
                "return": "function",
                "desc": "调弦之魔术师(73941492)专用，,返回的是一个 有 bool 返回值类型的 函数 f(e,c)  \n"
            }
        ]
    },
    "GetTextAttack": {
        "function": [
            {
                "name": "Card.GetTextAttack(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的攻击力，返回值是负数表示是\"?\"  \n"
            }
        ]
    },
    "DisableShuffleCheck": {
        "function": [
            {
                "name": "Duel.DisableShuffleCheck([bool disable=true])",
                "return": "void",
                "desc": "使下一个操作不检查是否需要洗切卡组或手卡  \n注：如果不调用此函数，  \n除了调用Duel.DiscardDeck和Duel.Draw之外从卡组中取出卡或者把卡加入手卡  \n或者把卡加入卡组（非最上端或最底端）时，系统会自动在效果处理结束时洗切卡组或手卡  \n如果不希望如此，比如从卡组顶端除外一张卡等操作，那么需要调用此函数  \n此函数仅保证紧接着的一次操作不会进行洗卡检测  \n"
            }
        ]
    },
    "UseCountLimit": {
        "function": [
            {
                "name": "Effect.UseCountLimit(Effect e, int p[, int count=1, bool oath_only=false])",
                "return": "void",
                "desc": "手动减少玩家 p 对效果 e 的 count 个可用次数[ oath_only 为 该效果是否是 EFFECT_FLAG_OATH]  \n"
            }
        ]
    },
    "ChangeAttackTarget": {
        "function": [
            {
                "name": "Duel.ChangeAttackTarget(Card c|nil)",
                "return": "bool",
                "desc": "将攻击对象变为c，c为nil表示直接攻击，返回值表示是否成功转移攻击对象  \n"
            }
        ]
    },
    "AnnounceCard": {
        "function": [
            {
                "name": "Duel.AnnounceCard(int player[, ...])",
                "return": "int",
                "desc": "让玩家player宣言一个卡片（比如：禁止令）  \nDuel.AnnounceCardFilter 已经被合并到这个函数里  \n如果参数只有2个，会自动加上第三个参数 OPCODE_ISTYPE  \n多个参数参考 古代的齿车机械(18486927):  \n\tlocal code=e:GetHandler():GetCode()  \n\t--c:IsSetCard(0x51) and not c:IsCode(code)  \n\tgetmetatable(e:GetHandler()).announce_filter={0x51,OPCODE_ISSETCARD,code,OPCODE_ISCODE,OPCODE_NOT,OPCODE_AND}  \n\tlocal ac=Duel.AnnounceCard(tp,table.unpack(getmetatable(e:GetHandler()).announce_filter))  \n--Opcode  \nOPCODE_ADD\t\t\t\t=0x40000000   \nOPCODE_SUB\t\t\t\t=0x40000001   \nOPCODE_MUL\t\t\t\t=0x40000002   \nOPCODE_DIV\t\t\t\t=0x40000003 --除法  \nOPCODE_AND\t\t\t\t=0x40000004 --与  \nOPCODE_OR\t\t\t\t=0x40000005 --或  \nOPCODE_NEG\t\t\t\t=0x40000006   \nOPCODE_NOT\t\t\t\t=0x40000007 --非  \nOPCODE_ISCODE\t\t\t=0x40000100 --卡片过滤条件为code  \nOPCODE_ISSETCARD\t\t=0x40000101 --卡片过滤条件为setname  \nOPCODE_ISTYPE\t\t\t=0x40000102 --卡片过滤条件为type  \nOPCODE_ISRACE\t\t\t=0x40000103 --卡片过滤条件为race  \nOPCODE_ISATTRIBUTE\t\t=0x40000104 --卡片过滤条件为attribute  \n"
            }
        ]
    },
    "GetBinClassCount": {
        "function": [
            {
                "name": "Group.GetBinClassCount(Group g, function f, ...)",
                "return": "int",
                "desc": "和 Group.GetClassCount 类似，但是算法不同(使用位运算)  \n"
            }
        ]
    },
    "CheckChainTarget": {
        "function": [
            {
                "name": "Duel.CheckChainTarget(int chainc, Card c)",
                "return": "bool",
                "desc": "检查c是否是连锁chainc的效果的正确的对象  \n"
            }
        ]
    },
    "IsCanRemoveCounter": {
        "function": [
            {
                "name": "Card.IsCanRemoveCounter(Card c, int player, int countertype, int count, int reason)",
                "return": "bool",
                "desc": "检查玩家player是否可以以原因reason移除c上的count个countertype类型的指示物  \n"
            },
            {
                "name": "Duel.IsCanRemoveCounter(int player, int s, int o, int countertype, int count, int reason)",
                "return": "bool",
                "desc": "检查玩家player以reason为原因是否能移除场上的countertype类型的count个指示物  \ns表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置  \n"
            }
        ]
    },
    "AddRitualProcGreater2": {
        "function": [
            {
                "name": "aux.AddRitualProcGreater2(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤手续  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "IsMaterialListSetCard": {
        "function": [
            {
                "name": "aux.IsMaterialListSetCard(Card c, int setcode])",
                "return": "bool",
                "desc": "检测 c 是否是有字段 setcode 为素材的卡  \nc.material_setcode  \n"
            }
        ]
    },
    "CompleteProcedure": {
        "function": [
            {
                "name": "Card.CompleteProcedure(Card c)",
                "return": "void",
                "desc": "使c完成正规的召唤手续  \n##此函数也可通过 c:SetStatus(STATUS_PROC_COMPLETE,true)实现  \n"
            }
        ]
    },
    "Activate": {
        "function": [
            {
                "name": "Duel.Activate(Effect e)",
                "return": "void",
                "desc": "发动效果e（？）  \n"
            }
        ]
    },
    "IsRace": {
        "function": [
            {
                "name": "Card.IsRace(Card c, int race)",
                "return": "bool",
                "desc": "检查c是否属于种族race  \n"
            }
        ]
    },
    "GetHandSynchro": {
        "function": [
            {
                "name": "Card.GetHandSynchro(Card c)",
                "return": "void|Effect[,function,int,int]",
                "desc": "如果卡片 c 受到手卡同调效果 EFFECT_HAND_SYNCHRO 影响，则返回 Effect e,function filter_target,int min,int max ;否则返回nil  \ne 是有这个影响的效果  \nfilter_target 是过滤条件  \nmin,max 是数量  \n"
            }
        ]
    },
    "GetLinkCode": {
        "function": [
            {
                "name": "Card.GetLinkCode(Card c)",
                "return": "int[,int,...]",
                "desc": "返回c作为link素材的卡号（包括c原本的卡号）  \n"
            }
        ]
    },
    "IsFaceup": {
        "function": [
            {
                "name": "Card.IsFaceup(Card c)",
                "return": "bool",
                "desc": "检查c是否是表侧表示  \n"
            }
        ]
    },
    "IsPlayerCanSpecialSummonMonster": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSpecialSummonMonster(int player, int code[, int setcode|nil, int type|nil, int atk|nil, int def|nil, int level|nil, int race|nil, int attribute|nil, int  pos=POS_FACEUP, int target_player=player, int sumtype=0])",
                "return": "bool",
                "desc": "检查玩家player是否可以[以sumtype 方式][以 pos 表示形式]特殊召唤 给定参数的怪兽到target_player场上  \n此函数通常用于判定是否可以特招token和陷阱怪兽  \n"
            }
        ]
    },
    "NegateAttack": {
        "function": [
            {
                "name": "Duel.NegateAttack()",
                "return": "bool",
                "desc": "无效此次攻击，返回值表示是否成功  \n此次攻击已经被其他效果无效或导致攻击的卡不能攻击则返回false  \n"
            }
        ]
    },
    "IsContains": {
        "function": [
            {
                "name": "Group.IsContains(Group g, Card c)",
                "return": "bool",
                "desc": "检查g中是否存在卡片c  \n"
            }
        ]
    },
    "GetLinkCount": {
        "function": [
            {
                "name": "aux.GetLinkCount(Card c)",
                "return": "int",
                "desc": "返回卡片 c 作为连接素材时当做的素材数量  \nfunction Auxiliary.GetLinkCount(c)  \n\tif c:IsType(TYPE_LINK) and c:GetLink()>1 then  \n\t\treturn 1+0x10000*c:GetLink()  \n\telse return 1 end  \nend  \n"
            }
        ]
    },
    "SpecialSummon": {
        "function": [
            {
                "name": "Duel.SpecialSummon(Card|Group targets, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos[, int zone=0xff])",
                "return": "int",
                "desc": "让玩家 sumplayer 以sumtype方式，pos表示形式把targets特殊召唤到target_player场上[的区域 zone]  \n如果nocheck为true则无视卡的召唤条件，如果nolimit为true则无视卡的苏生限制  \n返回值是特殊召唤成功的卡的数量  \n"
            }
        ]
    },
    "GetLocationCount": {
        "function": [
            {
                "name": "Duel.GetLocationCount(int player, int location[, int use_player, int reason = LOCATION_REASON_TOFIELD, int zone=0xff])",
                "return": "int",
                "desc": "返回玩家player的场上location可用的[区域 zone 里的]空格数  \nlocation只能是LOCATION_MZONE或者LOCATION_SZONE  \nreason为LOCATION_REASON_TOFIELD或LOCATION_REASON_CONTROL  \n##第三个第四个额外参数与凯撒斗技场等限制格子的效果有关  \n"
            }
        ]
    },
    "IsChainNegatable": {
        "function": [
            {
                "name": "Duel.IsChainNegatable(int chainc)",
                "return": "bool",
                "desc": "检查连锁chainc的发动能否被无效  \n"
            }
        ]
    },
    "SetMaterial": {
        "function": [
            {
                "name": "Card.SetMaterial(Card c, nil|Group g)",
                "return": "void",
                "desc": "把g中的所有卡作为c的素材（上级召唤，特殊召唤）  \n第二个参数如果传入 nil ,是把卡片c 的素材清除  \n"
            }
        ]
    },
    "IsRelateToEffect": {
        "function": [
            {
                "name": "Card.IsRelateToEffect(Card c, Effect e)",
                "return": "bool",
                "desc": "检查c是否和效果e有联系  \n注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象  \n（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）  \n会自动与那个效果建立联系，一旦离场，联系会重置  \n"
            }
        ]
    },
    "GetAttackAnnouncedCount": {
        "function": [
            {
                "name": "Card.GetAttackAnnouncedCount(Card c)",
                "return": "int",
                "desc": "返回c本回合攻击宣言的次数  \n注：攻击被无效不会被计入攻击过的次数，但是会计入攻击宣言的次数  \n"
            }
        ]
    },
    "DeleteGroup": {
        "function": [
            {
                "name": "Group.DeleteGroup(Group g)",
                "return": "void",
                "desc": "删除卡片组g  \n"
            }
        ]
    },
    "GetCounter": {
        "function": [
            {
                "name": "Card.GetCounter(Card c, int countertype)",
                "return": "int",
                "desc": "返回c上的countertype类型的指示物的数量， countertype=0 则返回c上所有类型的指示物数量之和  \n"
            },
            {
                "name": "Duel.GetCounter(int player, int s, int o, int countertype)",
                "return": "int",
                "desc": "返回场上存在的countertype类型的指示物的数量  \ns表示对player来说的己方的位置，o表示对player来说的对方的位置  \n"
            }
        ]
    },
    "SetChainLimit": {
        "function": [
            {
                "name": "Duel.SetChainLimit(function f)",
                "return": "void",
                "desc": "设定连锁条件，f的函数原型为 bool f(e,ep,tp)  \ne表示要限制连锁的效果，ep表示要限制连锁的玩家，tp表示发动该效果的玩家  \n在cost或者target处理中调用此函数可以限制可以连锁的效果的种类（如超融合）  \n如果f返回false表示不能连锁，一旦设置连锁条件后发生了新的连锁那么连锁条件将会解除  \n"
            }
        ]
    },
    "IsImmuneToEffect": {
        "function": [
            {
                "name": "Card.IsImmuneToEffect(Card c, Effect e)",
                "return": "bool",
                "desc": "检查c是否免疫效果e（即不受效果e的影响）  \n"
            }
        ]
    },
    "GetPreviousLocation": {
        "function": [
            {
                "name": "Card.GetPreviousLocation(Card c)",
                "return": "int",
                "desc": "返回c位置变化前的所在的位置  \n"
            }
        ]
    },
    "IsCanBeRitualMaterial": {
        "function": [
            {
                "name": "Card.IsCanBeRitualMaterial(Card c, Card sc|nil)",
                "return": "bool",
                "desc": "检查c是否可以作为[仪式怪兽sc的]仪式素材,没有指定sc的场合，必须填nil  \n"
            }
        ]
    },
    "tdcfop": {
        "function": [
            {
                "name": "aux.tdcfop(Card c)",
                "return": "void",
                "desc": "卡片 c 的返回卡组的接触融合的操作函数。如果素材有里侧表示的，会展示  \nfunction Auxiliary.tdcfop(c)  \n\treturn\tfunction(g)  \n\t\t\t\tlocal cg=g:Filter(Card.IsFacedown,nil)  \n\t\t\t\tif cg:GetCount()>0 then  \n\t\t\t\t\tDuel.ConfirmCards(1-c:GetControler(),cg)  \n\t\t\t\tend  \n\t\t\t\tDuel.SendtoDeck(g,nil,2,REASON_COST)  \n\t\t\tend  \nend  \n"
            }
        ]
    },
    "SetStatus": {
        "function": [
            {
                "name": "Card.SetStatus(Card c, int state, bool enable)",
                "return": "void",
                "desc": "给c设置或者取消状态码  \n除非妳清楚的了解每个状态码的含意，否则不要轻易使用此函数  \n"
            }
        ]
    },
    "RDComplete": {
        "function": [
            {
                "name": "Duel.RDComplete()",
                "return": "void",
                "desc": "在调用Duel.Damage/Duel.Recover时，若is_step参数为true，则需调用此函数触发时点  \n"
            }
        ]
    },
    "IsCanAddCounter": {
        "function": [
            {
                "name": "Card.IsCanAddCounter(Card c, int countertype[, int count, int singly=false, int location])",
                "return": "bool",
                "desc": "检查c是否可以[逐个(singly=true)在 location 区域]放置[count 个]countertype类型的指示物  \n"
            },
            {
                "name": "Duel.IsCanAddCounter(int player[, int countertype, int count, Card c])",
                "return": "bool",
                "desc": "检查玩家player能否[向卡片c]添加[count个countertype类型的]指示物，如果 player 不是 0或者1，则返回false  \n额外参数如果要用，必须全写  \n"
            }
        ]
    },
    "RandomSelect": {
        "function": [
            {
                "name": "Group.RandomSelect(Group g, int player, int count)",
                "return": "Group",
                "desc": "让玩家player从卡片组g中随机选择count张卡  \n因为是随机选择，所以参数player基本无用，由系统随机选取  \n"
            }
        ]
    },
    "GetFlagEffectLabel": {
        "function": [
            {
                "name": "Card.GetFlagEffectLabel(Card c, int code)",
                "return": "int[,...]",
                "desc": "返回c的种类为code的标识效果的Label(数量可能不止一个)，没有此效果则返回nil  \n"
            },
            {
                "name": "Duel.GetFlagEffectLabel(int player, int code)",
                "return": "int[,...]",
                "desc": "返回玩家player的种类为code的标识效果的全部Label，没有此效果标识则返回nil  \n"
            }
        ]
    },
    "NegateSummon": {
        "function": [
            {
                "name": "Duel.NegateSummon(Card|Group targets)",
                "return": "void",
                "desc": "使正在召唤·反转召唤·特殊召唤的targets的召唤无效  \n"
            }
        ]
    },
    "AddFusionProcCodeRep2": {
        "function": [
            {
                "name": "aux.AddFusionProcCodeRep2(Card c, int code, int minc, int maxc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用 minc-maxc 个卡号为 code 的怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,code1,minc,maxc)  \n"
            }
        ]
    },
    "SelectXyzMaterial": {
        "function": [
            {
                "name": "Duel.SelectXyzMaterial(int player, Card c, function f|nil, int lv, int min, int max[, Group mg|nil])",
                "return": "Group",
                "desc": "让玩家player为超量怪兽c从场上[或mg中]选择超量用等级为lv的min-max个满足条件f的叠放素材  \n"
            }
        ]
    },
    "IsNotDualState": {
        "function": [
            {
                "name": "aux.IsNotDualState(Effect e)",
                "return": "bool",
                "desc": "aux.IsDualState的反义（用于效果的Condition属性）  \n"
            }
        ]
    },
    "GetTarget": {
        "function": [
            {
                "name": "Effect.GetTarget(Effect e)",
                "return": "function",
                "desc": "返回效果 e 的target属性  \n"
            }
        ]
    },
    "IsReason": {
        "function": [
            {
                "name": "Card.IsReason(Card c, int reason)",
                "return": "bool",
                "desc": "检查c是否包含原因reason  \n"
            }
        ]
    },
    "SwapSequence": {
        "function": [
            {
                "name": "Duel.SwapSequence(Card c1, Card c2)",
                "return": "void",
                "desc": "交换c1和c2的位置  \n"
            }
        ]
    },
    "CheckLocation": {
        "function": [
            {
                "name": "Duel.CheckLocation(int player, int location, int seq)",
                "return": "bool",
                "desc": "检查玩家player的场上位于location序号为seq的空格是否可用  \n"
            }
        ]
    },
    "AddFusionProcFunFunRep": {
        "function": [
            {
                "name": "aux.AddFusionProcFunFunRep(Card c, function f1, function f2, int minc, int maxc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用满足过滤条件 f1 的1只怪兽 ，和满足过滤条件 f2 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,false,insf,f2,minc,maxc,f1)  \n"
            }
        ]
    },
    "IsCanTurnSet": {
        "function": [
            {
                "name": "Card.IsCanTurnSet(Card c)",
                "return": "bool",
                "desc": "检查c是否可以转成里侧表示  \n"
            }
        ]
    },
    "SetHint": {
        "function": [
            {
                "name": "Card.SetHint(Card c, int type, int value)",
                "return": "void",
                "desc": "为c设置类型为type的卡片提示信息  \ntype只能为以下值，对应的value类型为  \nCHINT_TURN              回合数  \nCHINT_CARD              卡片id  \nCHINT_RACE              种族  \nCHINT_ATTRIBUTE         属性  \nCHINT_NUMBER            数字  \nCHINT_DESC              描述  \n"
            }
        ]
    },
    "ClearEffectRelation": {
        "function": [
            {
                "name": "Card.ClearEffectRelation(Card c)",
                "return": "void",
                "desc": "清空c所有联系的效果  \n"
            }
        ]
    },
    "SkipPhase": {
        "function": [
            {
                "name": "Duel.SkipPhase(int player, int phase, int reset_flag, int reset_count[, int value])",
                "return": "void",
                "desc": "跳过玩家player的phase阶段，并在特定的阶段后reset，reset参数和效果相同  \n#value只对phase=PHASE_BATTLE才有用，value=1跳过战斗阶段的结束步骤，用于“变成回合结束阶段”等（招财猫王，闪光弹）  \n"
            }
        ]
    },
    "EnablePendulumAttribute": {
        "function": [
            {
                "name": "aux.EnablePendulumAttribute(Card c[, bool active_effect=true])",
                "return": "void",
                "desc": "为灵摆怪兽c添加灵摆怪兽属性（灵摆召唤，灵摆卡的发动）  \nactive_effect=false则不注册灵摆卡“卡的发动”的效果  \n"
            }
        ]
    },
    "IsMaterialListType": {
        "function": [
            {
                "name": "aux.IsMaterialListType(Card c, any ctype])",
                "return": "bool",
                "desc": "检测 c 是否是有类型 ctype 为素材的卡  \nc.material_type  \n"
            }
        ]
    },
    "gbspcon": {
        "function": [
            {
                "name": "aux.gbspcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "剑斗兽通用效果(用「剑斗兽」怪兽的效果特殊召唤)的过滤条件的简单写法，用在效果注册里 SetCondition  \n2619149,4253484,31247589,42592719,65984457,78868776,  虽然写法不同，但是没问题  \nfunction Auxiliary.gbspcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal st=e:GetHandler():GetSummonType()  \n\treturn st>=(SUMMON_TYPE_SPECIAL+100) and st<(SUMMON_TYPE_SPECIAL+150)  \nend  \n"
            }
        ]
    },
    "Merge": {
        "function": [
            {
                "name": "Group.Merge(Group g1, Group g2)",
                "return": "void",
                "desc": "把g2中的所有卡合并到g1，若g1中原本就有属于g2的卡，那些卡将不会重复  \n注：g2本身不会发生变化  \n"
            }
        ]
    },
    "IsExistingTarget": {
        "function": [
            {
                "name": "Duel.IsExistingTarget(function f|nil, int player, int s, int o, int count, Card|Group ex|nil, ...)",
                "return": "bool",
                "desc": "基本同Duel.IsExistingMatchingCard ，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象  \n"
            }
        ]
    },
    "ritlimit": {
        "function": [
            {
                "name": "aux.ritlimit(Effect e, Effect se, int sp, int st)",
                "return": "bool",
                "desc": "不能用 仪式召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.ritlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_RITUAL==SUMMON_TYPE_RITUAL  \nend  \n"
            }
        ]
    },
    "AnnounceType": {
        "function": [
            {
                "name": "Duel.AnnounceType(int player)",
                "return": "int",
                "desc": "让玩家player宣言一个卡片类型（怪兽·魔法·陷阱）  \n别想着直接宣言 复合类型（永续魔法 等）  \n"
            }
        ]
    },
    "IsPlayerCanFlipSummon": {
        "function": [
            {
                "name": "Duel.IsPlayerCanFlipSummon(int player[, Card c])",
                "return": "bool",
                "desc": "检查玩家player是否可以反转召唤[卡片 c]  \n"
            }
        ]
    },
    "GetActivityCount": {
        "function": [
            {
                "name": "Duel.GetActivityCount(int player, int activity_type, ...)",
                "return": "int,...",
                "desc": "返回player进行对应的activity_type操作的次数  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的放置）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的放置）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_BATTLE_PHASE   =6\t--进入战斗阶段  \n"
            }
        ]
    },
    "AddXyzProcedure": {
        "function": [
            {
                "name": "aux.AddXyzProcedure(Card c, function f|nil, int lv, int ct[, function alterf|nil, int desc|nil, int maxc=ct, function op|nil])",
                "return": "void",
                "desc": "为c添加超量召唤手续  \n用满足条件 f 的等级为 lv 的 ct[-maxc] 只怪兽进行叠放  \n或者在单个怪兽（通常是超量怪兽）上叠放  \nalterf 为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（比如 希望皇龙）  \n"
            }
        ]
    },
    "SwapControl": {
        "function": [
            {
                "name": "Duel.SwapControl(Card|Group targets1, Card|Group targets2[, int reset_phase=0, int reset_count=0])",
                "return": "bool",
                "desc": "交换targets1与targets2的控制权，返回值表示是否成功  \n第三个第四个参数同 Duel.GetControl  \n"
            }
        ]
    },
    "GetActiveType": {
        "function": [
            {
                "name": "Effect.GetActiveType(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的效果类型（怪兽·魔法·陷阱等）  \n比如灵摆的结果是 灵摆+魔法  \n"
            }
        ]
    },
    "__bor": {
        "function": [
            {
                "name": "Group.__bor(Group|Card target1, Group|Card target2)",
                "return": "Group",
                "desc": "代码和 Group.__add 完全一样  \n"
            }
        ]
    },
    "SendtoHand": {
        "function": [
            {
                "name": "Duel.SendtoHand(Card|Group targets, int player|nil, int reason)",
                "return": "int",
                "desc": "以reason原因把targets送去玩家player的手牌，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的手牌  \n"
            }
        ]
    },
    "IsPreviousSetCard": {
        "function": [
            {
                "name": "Card.IsPreviousSetCard(Card c, int setname)",
                "return": "bool",
                "desc": "检查c位置变化之前是否是名字含有setname的卡  \n"
            }
        ]
    },
    "FilterCount": {
        "function": [
            {
                "name": "Group.FilterCount(Group g, function f, Card|Group ex|nil, ...)",
                "return": "int",
                "desc": "过滤函数，和Group.Filter基本相同，不同之处在于此函数只返回满足条件的卡的数量  \n"
            }
        ]
    },
    "sumreg": {
        "function": [
            {
                "name": "aux.sumreg(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "妖仙兽 阎魔巳裂(39853199)和一些其他卡(49249907,93368494)用了此函数，就是注册一个flag，其实就是相当于  \nfunction Auxiliary.sumreg(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal tc=eg:GetFirst()  \n\tlocal code=e:GetLabel()  \n\twhile tc do  \n\t\tif tc:GetOriginalCode()==code then  \n\t\t\ttc:RegisterFlagEffect(code,RESET_EVENT+0x1ec0000+RESET_PHASE+PHASE_END,0,1)  \n\t\tend  \n\t\ttc=eg:GetNext()  \n\tend  \nend  \n"
            }
        ]
    },
    "initial_effect": {
        "function": [
            {
                "name": "initial_effect(Card c)",
                "return": "void",
                "desc": "载入卡片时调用  \n一般是注册初始卡片效果，以及设置苏生限制等等  \n"
            }
        ]
    },
    "SearchCard": {
        "function": [
            {
                "name": "Group.SearchCard(Group g, function f, ...)",
                "return": "Card",
                "desc": "过滤函数，返回g中满足筛选条件f的第一张卡，若没有则返回nil，从第3个参数开始为额外参数  \n"
            }
        ]
    },
    "SetCountLimit": {
        "function": [
            {
                "name": "Effect.SetCountLimit(Effect e, int count=1[, int code=0])",
                "return": "void",
                "desc": "设置效果 e 的一回合可以发动的次数count（仅触发型效果有效），相同的code(不等于0或1时)共用1个次数  \ncode包含以下数值具有特殊的性质  \nEFFECT_COUNT_CODE_OATH          誓约使用次数  \nEFFECT_COUNT_CODE_DUEL          决斗中使用次数  \nEFFECT_COUNT_CODE_SINGLE        同一张卡多个效果公共使用次数（不限制同名卡）  \n"
            }
        ]
    },
    "IsPosition": {
        "function": [
            {
                "name": "Card.IsPosition(Card c, int pos)",
                "return": "bool",
                "desc": "检查c是否是表示形式pos  \n"
            }
        ]
    },
    "ForEach": {
        "function": [
            {
                "name": "Group.ForEach(Group g, function f,...)",
                "return": "void",
                "desc": "为卡片组g中的每一张卡调用一次f ,第三个参数开始为额外参数  \n"
            }
        ]
    },
    "IsExistingMatchingCard": {
        "function": [
            {
                "name": "Duel.IsExistingMatchingCard(function f|nil, int player, int s, int o, int count, Card|Group ex|nil, ...)",
                "return": "bool",
                "desc": "过滤函数，检查以player来看的指定位置是否存在至少count张满足过滤条件f并且不等于ex的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第7个参数开始为额外参数  \n"
            }
        ]
    },
    "MustMaterialCounterFilter": {
        "function": [
            {
                "name": "aux.MustMaterialCounterFilter(Card c, Group g)",
                "return": "bool",
                "desc": "如果 g 中 包含 c ，则返回 false  \n"
            }
        ]
    },
    "GetPreviousAttributeOnField": {
        "function": [
            {
                "name": "Card.GetPreviousAttributeOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的属性  \n"
            }
        ]
    },
    "disfilter1": {
        "function": [
            {
                "name": "aux.disfilter1(Card c)",
                "return": "bool",
                "desc": "检测是否是 可以被无效效果的 怪兽  \nfunction Auxiliary.disfilter1(c)  \n\treturn c:IsFaceup() and not c:IsDisabled() and (not c:IsType(TYPE_NORMAL) or c:GetOriginalType()&TYPE_EFFECT~=0)  \nend  \n"
            }
        ]
    },
    "IsPlayerCanRemove": {
        "function": [
            {
                "name": "Duel.IsPlayerCanRemove(int player[, Card c, int reason=REASON_EFFECT])",
                "return": "bool",
                "desc": "检查玩家player是否能除外[卡片 c]  \n"
            }
        ]
    },
    "IsInGroup": {
        "function": [
            {
                "name": "aux.IsInGroup(Card c, Group g)",
                "return": "bool",
                "desc": "function Auxiliary.IsInGroup(c,g)  \n\treturn g:IsContains(c)  \nend  \n"
            }
        ]
    },
    "GetCurrentChain": {
        "function": [
            {
                "name": "Duel.GetCurrentChain()",
                "return": "int",
                "desc": "返回当前正在处理的连锁序号  \n"
            }
        ]
    },
    "IsPlayerCanSpecialSummon": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSpecialSummon(int player[, int sumtype, int sumpos, int target_player, Card c])",
                "return": "bool",
                "desc": "检查玩家player能否特殊召唤[c到target_player场上，以sumtype召唤方式，sumpos表示形式]  \n如果需要可选参数，则必须全部使用  \n"
            }
        ]
    },
    "GetChainEvent": {
        "function": [
            {
                "name": "Duel.GetChainEvent(int chainc)",
                "return": "Group,int,int,Effect,int,int",
                "desc": "返回连锁 chainc 的相关参数，如果 chainc=0，则返回当前正在处理的连锁的相关参数  \n返回6个参数，eg,ep,ev,re,r,rp  \n"
            }
        ]
    },
    "AddFusionProcCode2FunRep": {
        "function": [
            {
                "name": "aux.AddFusionProcCode2FunRep(Card c, int code1, int code2, function f, int minc, int maxc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用卡号为 code1,code2 的各1只怪兽 ，和满足过滤条件 f 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,f,minc,maxc,code1,code2)  \n"
            }
        ]
    },
    "GetPreviousDefenseOnField": {
        "function": [
            {
                "name": "Card.GetPreviousDefenseOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的守备力  \n"
            }
        ]
    },
    "GetChainMaterial": {
        "function": [
            {
                "name": "Duel.GetChainMaterial(int player)",
                "return": "Effect",
                "desc": "返回玩家player受到的连锁素材的效果，此函数仅用于融合类卡的效果  \n"
            }
        ]
    },
    "AddFusionProcFunFun": {
        "function": [
            {
                "name": "aux.AddFusionProcFunFun(Card c, function f1, function f2, int cc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用满足过滤条件 f1 的1只怪兽 ，和满足过滤条件 f2 的 cc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,f1,table.unpack(fun)),fun 是包含 cc 个 满足条件 f2 的卡的表  \n"
            }
        ]
    },
    "IsOriginalSetCard": {
        "function": [
            {
                "name": "Card.IsOriginalSetCard(Card c, int setname)",
                "return": "bool",
                "desc": "检查c是否是原本卡名含有setname的卡  \n"
            }
        ]
    },
    "GetBattlePosition": {
        "function": [
            {
                "name": "Card.GetBattlePosition(Card c)",
                "return": "int",
                "desc": "返回c在本次战斗发生之前的表示形式  \n"
            }
        ]
    },
    "GetEquipGroup": {
        "function": [
            {
                "name": "Card.GetEquipGroup(Card c)",
                "return": "Group",
                "desc": "返回c当前装备着的卡片组  \n"
            }
        ]
    },
    "IsSummonType": {
        "function": [
            {
                "name": "Card.IsSummonType(Card c, int sumtype)",
                "return": "bool",
                "desc": "检查c的召唤类型是否是sumtype  \n"
            }
        ]
    },
    "SelectYesNo": {
        "function": [
            {
                "name": "Duel.SelectYesNo(int player, int desc)",
                "return": "bool",
                "desc": "让玩家player选择是或否  \n"
            }
        ]
    },
    "IsType": {
        "function": [
            {
                "name": "Card.IsType(Card c, int type)",
                "return": "bool",
                "desc": "检查c是否属于类型type  \n"
            }
        ]
    },
    "IsFusionAttribute": {
        "function": [
            {
                "name": "Card.IsFusionAttribute(Card c, int attribute[, int player=PLAYER_NONE])",
                "return": "bool",
                "desc": "检查c[由player融合召唤时]用作融合素材是否属于属性attribute  \n"
            }
        ]
    },
    "IsAttackAbove": {
        "function": [
            {
                "name": "Card.IsAttackAbove(Card c, int atk)",
                "return": "bool",
                "desc": "检查c是否是攻击力atk以上  \n"
            }
        ]
    },
    "dabcheck": {
        "function": [
            {
                "name": "aux.dabcheck(Group g)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否有相同属性的卡的简单写法，返回值如果为 true 表示没有相同属性卡  \nfunction Auxiliary.dabcheck(g)  \n\treturn g:GetClassCount(Card.GetAttribute)==#g  \nend  \n"
            }
        ]
    },
    "GetActivateEffect": {
        "function": [
            {
                "name": "Card.GetActivateEffect(Card c)",
                "return": "Effect,...",
                "desc": "返回c的“卡片发动”的效果，即类型为EFFECT_TYPE_ACTIVATE的效果  \n仅对魔法和陷阱有效  \n"
            }
        ]
    },
    "GetHandlerPlayer": {
        "function": [
            {
                "name": "Effect.GetHandlerPlayer(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的当前控制者，一般是Handle的控制者  \n"
            }
        ]
    },
    "GetTargetCount": {
        "function": [
            {
                "name": "Duel.GetTargetCount(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)",
                "return": "int",
                "desc": "基本同Duel.GetMatchingGroupCount ，不同之处在于需要追加判定卡片是否能成为当前正在处理的效果的对象  \n"
            }
        ]
    },
    "IsPlayerCanSendtoHand": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSendtoHand(int player[, Card c])",
                "return": "bool",
                "desc": "检查玩家是否能把卡片[c]送去手牌  \n"
            }
        ]
    },
    "LinkSummon": {
        "function": [
            {
                "name": "Duel.LinkSummon(int player, Card c, Group mg|nil[, Card lc, int minc=0, int maxc=0])",
                "return": "void",
                "desc": "让玩家player用场上[或mg][包含卡片 lc 在内][minc-maxc 张]的卡对c进行连接召唤手续  \n"
            }
        ]
    },
    "GetColumnGroup": {
        "function": [
            {
                "name": "Card.GetColumnGroup(Card c)",
                "return": "Group",
                "desc": "返回与c同一纵列的c以外的卡片组  \n"
            }
        ]
    },
    "bdogcon": {
        "function": [
            {
                "name": "aux.bdogcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且是与对方怪兽战斗并战斗破坏对方怪兽送去墓地 的 condition  \nfunction Auxiliary.bdogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\tlocal bc=c:GetBattleTarget()  \n\treturn c:IsRelateToBattle() and c:IsStatus(STATUS_OPPO_BATTLE) and bc:IsLocation(LOCATION_GRAVE) and bc:IsType(TYPE_MONSTER)  \nend  \n"
            }
        ]
    },
    "SetTargetParam": {
        "function": [
            {
                "name": "Duel.SetTargetParam(inte param)",
                "return": "void",
                "desc": "把当前正在处理的连锁的对象参数设置成param  \n"
            }
        ]
    },
    "IsLinkAttribute": {
        "function": [
            {
                "name": "Card.IsLinkAttribute(Card c, int attribute[, int player=PLAYER_NONE])",
                "return": "bool",
                "desc": "检查c[由player连接召唤时]用作连接素材是否属于属性attribute  \n"
            }
        ]
    },
    "AddLinkProcedure": {
        "function": [
            {
                "name": "aux.AddLinkProcedure(Card c, function f|nil, int minc[, int maxc=99, function gf|nil])",
                "return": "void",
                "desc": "为c添加连接召唤手续  \n用 minc-maxc 个满足过滤条件 f [的卡片组里满足过滤条件 gf ]的怪兽作为连接素材  \n"
            }
        ]
    },
    "GetSummonLocation": {
        "function": [
            {
                "name": "Card.GetSummonLocation(Card c)",
                "return": "int",
                "desc": "返回c的召唤/特殊召唤的位置  \n"
            }
        ]
    },
    "NegateActivation": {
        "function": [
            {
                "name": "Duel.NegateActivation(int chainc)",
                "return": "bool",
                "desc": "使连锁chainc的发动无效，返回值表示是否成功  \nchainc=0 表示当前效果  \n"
            }
        ]
    },
    "PreSetTarget": {
        "function": [
            {
                "name": "Debug.PreSetTarget(Card c, Card target)",
                "return": "void",
                "desc": "把target选为c的永续对象  \n"
            }
        ]
    },
    "SendtoDeck": {
        "function": [
            {
                "name": "Duel.SendtoDeck(Card|Group targets, int player|nil, int seq, int reason)",
                "return": "int",
                "desc": "以reason原因把targets送去玩家player的卡组，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的卡组  \n如果seq=0，则是返回卡组最顶端；seq=1则是返回卡组最底端；  \n其余情况则是返回最顶端并且标记需要洗卡组  \n"
            }
        ]
    },
    "GetMinGroup": {
        "function": [
            {
                "name": "Group.GetMinGroup(Group g, function f, ...)",
                "return": "Group,int",
                "desc": "f为返回一个interger值的函数，从卡片组g中筛选出具有最小的f的值的卡  \n第2个返回值为这个最小值，从第3个参数开始为额外参数  \n要使用第2个返回值注意检查g非空  \n"
            }
        ]
    },
    "SelectWithSumEqual": {
        "function": [
            {
                "name": "Group.SelectWithSumEqual(Group g, int player, function f, int sum, int min, int max, ...)",
                "return": "Group",
                "desc": "让玩家player从卡片组g中选取一个数量为min-max的子集使子集的特定函数 f 的和等于sum，从第7个参数开始为额外参数  \n"
            }
        ]
    },
    "IsAbleToHand": {
        "function": [
            {
                "name": "Card.IsAbleToHand(Card c)",
                "return": "bool",
                "desc": "检查c是否可以送去手牌  \n注：仅当卡片或者玩家受到“不能加入手牌”的效果的影响时（如雷王）此函数才返回false  \n##以下几个函数类似  \n"
            }
        ]
    },
    "IsFusionSummonableCard": {
        "function": [
            {
                "name": "Card.IsFusionSummonableCard(Card c[, int sum_type])",
                "return": "bool",
                "desc": "检查c是否是可[用 sum_type 方式]融合召唤的卡  \n"
            }
        ]
    },
    "GetPreviousLevelOnField": {
        "function": [
            {
                "name": "Card.GetPreviousLevelOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的等级  \n"
            }
        ]
    },
    "SetTargetPlayer": {
        "function": [
            {
                "name": "Duel.SetTargetPlayer(int player)",
                "return": "void",
                "desc": "把当前正在处理的连锁的对象玩家设置成player  \n"
            }
        ]
    },
    "SetCondition": {
        "function": [
            {
                "name": "Effect.SetCondition(Effect e, function con_func)",
                "return": "void",
                "desc": "设置效果 e 的Condition属性  \n"
            }
        ]
    },
    "dlvcheck": {
        "function": [
            {
                "name": "aux.dlvcheck(Group g)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否有相同等级的卡的简单写法，返回值如果为 true 表示没有相同等级卡  \nfunction Auxiliary.dlvcheck(g)  \n\treturn g:GetClassCount(Card.GetLevel)==#g  \nend  \n"
            }
        ]
    },
    "SetCode": {
        "function": [
            {
                "name": "Effect.SetCode(Effect e, int code)",
                "return": "void",
                "desc": "设置效果 e 的Code属性  \n"
            }
        ]
    },
    "ChangeTargetParam": {
        "function": [
            {
                "name": "Duel.ChangeTargetParam(int chainc, int param)",
                "return": "void",
                "desc": "把连锁chainc的参数换成param  \nchainc=0 表示当前效果  \n"
            }
        ]
    },
    "AddFusionProcFunRep2": {
        "function": [
            {
                "name": "aux.AddFusionProcFunRep2(Card c, function f, int minc, int maxc, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用 minc-maxc 个 满足相同条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,false,insf,f,minc,maxc)  \n"
            }
        ]
    },
    "GetTributeCount": {
        "function": [
            {
                "name": "Duel.GetTributeCount(Card c[, Group mg|nil, bool ex=false])",
                "return": "int",
                "desc": "返回场上[或mg中]用于通常召唤c的祭品数量，ex=true则允许对方场上的怪兽（太阳神之翼神龙-球体形）  \n此数量不一定等于Duel.GetTributeGroup的返回值中的卡片数量  \n因为某些卡可以作为多个祭品来使用  \n"
            }
        ]
    },
    "SelectOption": {
        "function": [
            {
                "name": "Duel.SelectOption(int player, int desc1, ...)",
                "return": "int",
                "desc": "让玩家选择选项，从第二个参数开始，每一个参数代表一条选项  \n返回选择的选项的序号(从0开始)  \n"
            }
        ]
    },
    "GetLinkedZone": {
        "function": [
            {
                "name": "Card.GetLinkedZone(Card c[, int player=c:GetControler()])",
                "return": "int",
                "desc": "返回c的[以 player 来看的场上的]连接区域  \n"
            },
            {
                "name": "Duel.GetLinkedZone(int player)",
                "return": "int",
                "desc": "返回以玩家player来看的所有连接区域  \n"
            }
        ]
    },
    "SelectEffectYesNo": {
        "function": [
            {
                "name": "Duel.SelectEffectYesNo(int player, Card c[, int desc=95])",
                "return": "bool",
                "desc": "让玩家player选择是否发动卡片c的效果[，提示文字可以自行用desc替换，desc 用 aux.Stringid 获取]  \n"
            }
        ]
    },
    "IsCanBeFusionMaterial": {
        "function": [
            {
                "name": "Card.IsCanBeFusionMaterial(Card c[, Card fc, int summon_type=SUMMON_TYPE_FUSION])",
                "return": "bool",
                "desc": "检查c是否可以成为[融合怪兽fc的summon_type方式的]融合素材  \n"
            }
        ]
    },
    "GetTributeRequirement": {
        "function": [
            {
                "name": "Card.GetTributeRequirement(Card c)",
                "return": "int,int",
                "desc": "返回通常召唤c所需要的祭品的最小和最大数量  \n"
            }
        ]
    },
    "RegisterEffect": {
        "function": [
            {
                "name": "Card.RegisterEffect(Card c, Effect e[, bool forced=false])",
                "return": "int",
                "desc": "把效果e注册给c，返回效果的全局id，并设置e的Handler为c  \n默认情况下注册时如果c带有免疫e的效果那么注册会失败  \n如果forced为true则不会检查c对e的免疫效果  \n"
            },
            {
                "name": "Duel.RegisterEffect(Effect e, int player)",
                "return": "void",
                "desc": "把效果e作为玩家player的效果注册给全局环境  \n"
            }
        ]
    },
    "EnableExtraDeckSummonCountLimit": {
        "function": [
            {
                "name": "aux.EnableExtraDeckSummonCountLimit()",
                "return": "void",
                "desc": "打开额外卡组召唤的数量限制， 数量为1 (?)  \n"
            }
        ]
    },
    "TossDice": {
        "function": [
            {
                "name": "Duel.TossDice(int player, int count1[, int count2 = 0])",
                "return": "int[,...]",
                "desc": "让玩家player投count1次骰子[，1-player投count2次骰子](count1+count2<=5)  \n返回值为count1+count2个结果，1-6  \n"
            }
        ]
    },
    "CheckEvent": {
        "function": [
            {
                "name": "Duel.CheckEvent(int event[, bool get_info])",
                "return": "bool[,Group,int,int,Effect,int,int]",
                "desc": "检查当前是否是event时点  \n若get_info=true并且是正确的时点，则还返回触发时点的信息 eg,ep,ev,re,r,rp  \n"
            }
        ]
    },
    "AddSynchroMixProcedure": {
        "function": [
            {
                "name": "aux.AddSynchroMixProcedure(Card c, function f1|nil, function f2|nil, function f3|nil, function f4|nil, int minc, int maxc)",
                "return": "void",
                "desc": "为c添加同调召唤手续，  \nf1,f2,f3 为 1 只满足的过滤条件，f4为 minc ~ maxc只满足的过滤条件  \nf1,f2,f3,f4 之中，至少有一种为调整  \nf2 和 f3 若为nil，则等价于aux.AddSynchroProcedure(c,f1,f4,minc, maxc)  \n"
            }
        ]
    },
    "GetOriginalCodeRule": {
        "function": [
            {
                "name": "Card.GetOriginalCodeRule(Card c)",
                "return": "int[,int]",
                "desc": "返回c规则上的代号（这张卡规则上当作...使用）  \n"
            }
        ]
    },
    "MSet": {
        "function": [
            {
                "name": "Duel.MSet(int player, Card c, bool ignore_count, Effect e|nil[,int min=0, int zone=0x1f])",
                "return": "void",
                "desc": "让玩家 player 以效果e对卡片c[在区域 zone]进行通常召唤的Set，至少使用min个祭品  \n如果e=nil,那么就按照一般的通常召唤规则进行通常召唤  \n如果ignore_count=true，则忽略每回合的通常召唤次数限制  \n"
            }
        ]
    },
    "GetCode": {
        "function": [
            {
                "name": "Card.GetCode(Card c)",
                "return": "int[,int]",
                "desc": "返回c的当前代号（可能因为效果改变）  \n"
            },
            {
                "name": "Effect.GetCode(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的code属性  \n"
            }
        ]
    },
    "GetLocationCountFromEx": {
        "function": [
            {
                "name": "Duel.GetLocationCountFromEx(int player[, int reason_player=player, Group|Card targets|nil, Card sc, int zone=0xff])",
                "return": "int",
                "desc": "返回玩家player场上[假如因玩家 reason_player 的原因让 targets 离场后，把卡片 sc 在 zone 区域特殊召唤]可用的 能让额外卡组的怪兽 出场的空格数  \n"
            }
        ]
    },
    "GetUnionCount": {
        "function": [
            {
                "name": "Card.GetUnionCount(Card c)",
                "return": "int,int",
                "desc": "返回c当前装备的同盟卡数量  \n第二个返回值是 旧同盟 的数量   \n"
            }
        ]
    },
    "SetLabel": {
        "function": [
            {
                "name": "Effect.SetLabel(Effect e, int label[, int label2, ...])",
                "return": "void",
                "desc": "设置效果 e 的Label(可以设置多个)  \n"
            }
        ]
    },
    "AddRitualProcEqual2Code": {
        "function": [
            {
                "name": "aux.AddRitualProcEqual2Code(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果  \ncode1 为仪式怪兽卡号，素材的等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcEqual2(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "GetPreviousAttackOnField": {
        "function": [
            {
                "name": "Card.GetPreviousAttackOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的攻击力  \n"
            }
        ]
    },
    "SetAIName": {
        "function": [
            {
                "name": "Debug.SetAIName(string name)",
                "return": "void",
                "desc": "设置AI的名字，最大长度 100 个字符（1个汉字2个字符）  \n"
            }
        ]
    },
    "IsRankBelow": {
        "function": [
            {
                "name": "Card.IsRankBelow(Card c, int rank)",
                "return": "bool",
                "desc": "检查c是否是阶级rank以下（至少为1）  \n"
            }
        ]
    },
    "AddSynchroProcedure": {
        "function": [
            {
                "name": "aux.AddSynchroProcedure(Card c, function f1|nil, function f2|nil, int minc[, int maxc=99])",
                "return": "void",
                "desc": "为c添加同调召唤手续  \nf1为 1 只满足的过滤条件，并且必须为调整；f2为 minc [~ maxc]只满足的过滤条件  \n"
            }
        ]
    },
    "nzdef": {
        "function": [
            {
                "name": "aux.nzdef(Card c)",
                "return": "bool",
                "desc": "守备力不为0的表侧表示的怪兽的过滤函数的简单写法  \nfunction Auxiliary.nzdef(c)  \n\treturn c:IsFaceup() and c:GetDefense()>0  \nend  \n"
            }
        ]
    },
    "CreateRelation": {
        "function": [
            {
                "name": "Card.CreateRelation(Card c1, Card c2, int reset_flag)",
                "return": "void",
                "desc": "为c1建立与c2的联系，此联系仅会由于c1发生RESET_EVENT的事件reset  \n"
            }
        ]
    },
    "IsMSetable": {
        "function": [
            {
                "name": "Card.IsMSetable(Card, bool ignore_count, Effect e|nil[, int minc=0, int zone=0x1f])",
                "return": "bool",
                "desc": "检查c是否可进行通常召唤的set，ignore_count=true则不检查召唤次数限制  \ne~=nil则检查c是否可以以效果e进行通常召唤的set，minc 表示至少需要的祭品数（用于区分妥协召唤set与上级召唤set）,zone 表示必须要放置到的区域  \n"
            }
        ]
    },
    "ChangeChainOperation": {
        "function": [
            {
                "name": "Duel.ChangeChainOperation(int chainc, function f)",
                "return": "void",
                "desc": "把连锁chainc的效果的处理函数换成f，用于实现“把效果变成”等的效果  \nchainc=0 表示当前效果  \nf(e,tp,eg,ep,ev,re,r,rp)  \n"
            }
        ]
    },
    "IsPlayerCanSendtoGrave": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSendtoGrave(int player[, Card c])",
                "return": "bool",
                "desc": "检查玩家是否能把卡片[c]送去墓地  \n"
            }
        ]
    },
    "GetRitualMaterial": {
        "function": [
            {
                "name": "Duel.GetRitualMaterial(int player)",
                "return": "Group",
                "desc": "返回玩家player可用的用于仪式召唤素材的卡片组  \n包含手上，场上可解放的以及墓地的仪式魔人等卡  \n"
            }
        ]
    },
    "CheckTiming": {
        "function": [
            {
                "name": "Duel.CheckTiming(int timing)",
                "return": "bool",
                "desc": "检查当前是否是timing提示时点  \nTIMING_DRAW_PHASE\t\t\t=0x1\t\t\t--抽卡阶段时点  \nTIMING_STANDBY_PHASE\t\t=0x2        \t--准备阶段时点  \nTIMING_MAIN_END\t\t\t\t=0x4        \t--主要阶段结束时点  \nTIMING_BATTLE_START\t\t\t=0x8        \t--战斗阶段开始时点  \nTIMING_BATTLE_END\t\t\t=0x10       \t--战斗阶段结束时点  \nTIMING_END_PHASE\t\t\t=0x20       \t--结束阶段时点  \nTIMING_SUMMON\t\t\t\t=0x40       \t--召唤时点  \nTIMING_SPSUMMON\t\t\t\t=0x80       \t--特殊召唤时点  \nTIMING_FLIPSUMMON\t\t\t=0x100      \t--翻转召唤时点  \nTIMING_MSET\t\t\t\t\t=0x200\t\t\t--放置怪兽时点  \nTIMING_SSET\t\t\t\t\t=0x400      \t--放置魔陷时点  \nTIMING_POS_CHANGE\t\t\t=0x800      \t--表示形式变更时点  \nTIMING_ATTACK\t\t\t\t=0x1000     \t--攻击宣言时点  \nTIMING_DAMAGE_STEP\t\t\t=0x2000     \t--伤害步骤时点  \nTIMING_DAMAGE_CAL\t\t\t=0x4000     \t--伤害计算时点  \nTIMING_CHAIN_END\t\t\t=0x8000     \t--连锁结束时点  \nTIMING_DRAW\t\t\t\t\t=0x10000    \t--抽卡时点（不是抽卡阶段  \nTIMING_DAMAGE\t\t\t\t=0x20000    \t--造成伤害时点  \nTIMING_RECOVER\t\t\t\t=0x40000\t\t--回复时点  \nTIMING_DESTROY\t\t\t\t=0x80000    \t--破坏时点  \nTIMING_REMOVE\t\t\t\t=0x100000   \t--除外时点  \nTIMING_TOHAND\t\t\t\t=0x200000   \t--加入手牌时点（检索、回收等）  \nTIMING_TODECK\t\t\t\t=0x400000   \t--回卡组时点  \nTIMING_TOGRAVE\t\t\t\t=0x800000   \t--进墓地时点  \nTIMING_BATTLE_PHASE\t\t\t=0x1000000  \t--战斗阶段时点  \nTIMING_EQUIP\t\t\t\t=0x2000000  \t--装备时点  \nTIMING_BATTLE_STEP_END\t\t=0x4000000  \t--戰鬥步驟結束時  \n"
            }
        ]
    },
    "GetFusionMaterial": {
        "function": [
            {
                "name": "Duel.GetFusionMaterial(int player)",
                "return": "Group",
                "desc": "返回玩家player可用的用于融合召唤素材的卡片组  \n包含手卡·场上的怪兽的以及受 EFFECT_EXTRA_FUSION_MATERIAL 影响的卡  \n"
            }
        ]
    },
    "bdocon": {
        "function": [
            {
                "name": "aux.bdocon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且是与对方怪兽战斗 的 condition  \nfunction Auxiliary.bdocon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsRelateToBattle() and c:IsStatus(STATUS_OPPO_BATTLE)  \nend  \n"
            }
        ]
    },
    "CheckChainUniqueness": {
        "function": [
            {
                "name": "Duel.CheckChainUniqueness()",
                "return": "bool",
                "desc": "检查当前连锁中是否存在同名卡的发动，返回true表示无同名卡  \n"
            }
        ]
    },
    "GetTributeGroup": {
        "function": [
            {
                "name": "Duel.GetTributeGroup(Card c)",
                "return": "Group",
                "desc": "返回场上用于通常召唤c可解放（上级召唤用）的卡片组  \n"
            }
        ]
    },
    "gffcheck": {
        "function": [
            {
                "name": "aux.gffcheck(Group g, function f1, any a1, function f2, any a2)",
                "return": "bool",
                "desc": "--check for group with 2 cards, each card match f1 with a1, f2 with a2 as argument  \nfunction Auxiliary.gffcheck(g,f1,a1,f2,a2)  \n\tif #g~=2 then return false end  \n\tlocal c1=g:GetFirst()  \n\tlocal c2=g:GetNext()  \n\treturn f1(c1,a1) and f2(c2,a2) or f1(c2,a1) and f2(c1,a2)  \nend  \n"
            }
        ]
    },
    "Remove": {
        "function": [
            {
                "name": "Group.Remove(Group g, function f, Card ex|nil, ...)",
                "return": "void",
                "desc": "从g中移除满足筛选条件f并且不等于ex的所有卡，第4个参数开始是额外参数  \n"
            },
            {
                "name": "Duel.Remove(Card|Group targets, int pos, int reason)",
                "return": "int",
                "desc": "以reason原因，pos表示形式除外targets，返回值是实际被操作的数量  \n如果reason包含REASON_TEMPORARY，那么视为是暂时除外，可以通过Duel.ReturnToField返回到场上  \n"
            }
        ]
    },
    "qlifilter": {
        "function": [
            {
                "name": "aux.qlifilter(Effect e, Effect te)",
                "return": "bool",
                "desc": "机壳怪兽通用抗性(不受原本等级·阶级比这张卡等级低的怪兽效果影响)的过滤函数的简单写法，用在效果注册里 SetValue  \nte 是 将要影响到 e:GetHandler() 的效果  \nfunction Auxiliary.qlifilter(e,te)  \n\tif te:IsActiveType(TYPE_MONSTER) and te:IsActivated() then  \n\t\tlocal lv=e:GetHandler():GetLevel()  \n\t\tlocal ec=te:GetOwner()  \n\t\tif ec:IsType(TYPE_LINK) then  \n\t\t\treturn false  \n\t\telseif ec:IsType(TYPE_XYZ) then  \n\t\t\treturn ec:GetOriginalRank()<lv  \n\t\telse  \n\t\t\treturn ec:GetOriginalLevel()<lv  \n\t\tend  \n\telse  \n\t\treturn false  \n\tend  \nend  \n"
            }
        ]
    },
    "AnnounceAttribute": {
        "function": [
            {
                "name": "Duel.AnnounceAttribute(int player, int count, int available)",
                "return": "int",
                "desc": "让玩家player从可选的属性中宣言count个属性  \navailable是所有可选属性的组合值，可以自行组合，可以直接将名字相加  \nATTRIBUTE_EARTH\t\t=0x01\t\t--地  \nATTRIBUTE_WATER\t\t=0x02\t\t--水  \nATTRIBUTE_FIRE\t\t=0x04\t\t--炎  \nATTRIBUTE_WIND\t\t=0x08\t\t--风  \nATTRIBUTE_LIGHT\t\t=0x10\t\t--光  \nATTRIBUTE_DARK\t\t=0x20\t\t--暗  \nATTRIBUTE_DEVINE\t=0x40\t\t--神  \n"
            }
        ]
    },
    "PreAddCounter": {
        "function": [
            {
                "name": "Debug.PreAddCounter(Card c, int counter_type[, int count=0])",
                "return": "void",
                "desc": "为c添加count个counter_type的指示物  \n"
            }
        ]
    },
    "GetMatchingGroupCount": {
        "function": [
            {
                "name": "Duel.GetMatchingGroupCount(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)",
                "return": "int",
                "desc": "过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的卡的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n"
            }
        ]
    },
    "tgsval": {
        "function": [
            {
                "name": "aux.tgsval(Effect e, Effect re, int rp)",
                "return": "bool",
                "desc": "不会成为自己的卡的效果对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.tgsval(e,re,rp)  \n\treturn rp==e:GetHandlerPlayer()  \nend  \n"
            }
        ]
    },
    "GetMutualLinkedZone": {
        "function": [
            {
                "name": "Card.GetMutualLinkedZone(Card c[, int player=c:GetControler()])",
                "return": "int",
                "desc": "返回[以 player 来看的]与卡片 c 互相连接的卡 所在的区域   \n"
            }
        ]
    },
    "AddRitualProcEqualCode": {
        "function": [
            {
                "name": "aux.AddRitualProcEqualCode(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果  \ncode1 为仪式怪兽卡号，素材的仪式等级之和必须等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcEqual(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "IncreaseSummonedCount": {
        "function": [
            {
                "name": "Duel.IncreaseSummonedCount([Card c])",
                "return": "void",
                "desc": "手动增加1次玩家[对于卡片c]的已经通常召唤过的次数  \n"
            }
        ]
    },
    "IsLinkBelow": {
        "function": [
            {
                "name": "Card.IsLinkBelow(Card c, int link)",
                "return": "bool",
                "desc": "检查c是否连接标记数量是link以下（至少为1）  \n"
            }
        ]
    },
    "IsDefenseBelow": {
        "function": [
            {
                "name": "Card.IsDefenseBelow(Card c, int def)",
                "return": "bool",
                "desc": "检查c是否是守备力def以下（至少为0）  \n"
            }
        ]
    },
    "GetOwnerTarget": {
        "function": [
            {
                "name": "Card.GetOwnerTarget(Card c)",
                "return": "Group",
                "desc": "返回取c作为永续对象的所有卡  \n"
            }
        ]
    },
    "TargetBoolFunction": {
        "function": [
            {
                "name": "Auxiliary.TargetBoolFunction(function f,...)",
                "return": "function",
                "desc": "一般用在效果注册里,返回的是一个 有 bool 返回值类型的 函数，第2个参数开始为额外参数  \nfunction Auxiliary.TargetBoolFunction(f,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(effect,target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))  \n\t\t\tend  \nend  \n"
            }
        ]
    },
    "IsRankAbove": {
        "function": [
            {
                "name": "Card.IsRankAbove(Card c, int rank)",
                "return": "bool",
                "desc": "检查c是否是阶级rank以上  \n"
            }
        ]
    },
    "EnableDualAttribute": {
        "function": [
            {
                "name": "aux.EnableDualAttribute(Card c)",
                "return": "void",
                "desc": "为c添加二重怪兽属性  \n"
            }
        ]
    },
    "synlimit": {
        "function": [
            {
                "name": "aux.synlimit(Effect e, Effect se, int sp, int st)",
                "return": "bool",
                "desc": "不能用 同调召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.synlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_SYNCHRO==SUMMON_TYPE_SYNCHRO  \nend  \n"
            }
        ]
    },
    "CheckFusionSubstitute": {
        "function": [
            {
                "name": "Card.CheckFusionSubstitute(Card c, Card fc)",
                "return": "bool",
                "desc": "检查c能否代替融合怪兽fc的记述卡名的素材  \n"
            }
        ]
    },
    "IsPlayerCanAdditionalSummon": {
        "function": [
            {
                "name": "Duel.IsPlayerCanAdditionalSummon(int player)",
                "return": "bool",
                "desc": "检查玩家是否进行过额外的通常召唤  \n注：以前这个函数叫 Duel.IsPlayerExtraSummoned(int player)  \n"
            }
        ]
    },
    "GetAttacker": {
        "function": [
            {
                "name": "Duel.GetAttacker()",
                "return": "Card",
                "desc": "返回此次战斗攻击的卡  \n"
            }
        ]
    },
    "GetType": {
        "function": [
            {
                "name": "Card.GetType(Card c)",
                "return": "int",
                "desc": "返回c的当前类型  \n"
            },
            {
                "name": "Effect.GetType(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的Type属性  \n"
            }
        ]
    },
    "SetSPSummonOnce": {
        "function": [
            {
                "name": "Card.SetSPSummonOnce(Card c, int spsummon_code)",
                "return": "void",
                "desc": "设置c一回合只能进行1次特殊召唤（灵兽，波动龙）  \n相同的spsummon_code共用1个次数  \n"
            }
        ]
    },
    "GetLinkRace": {
        "function": [
            {
                "name": "Card.GetLinkRace(Card c[, int player=PLAYER_NONE])",
                "return": "int",
                "desc": "返回c[由player连接召唤时]作为连接素材时的种族  \n"
            }
        ]
    },
    "IsCanOverlay": {
        "function": [
            {
                "name": "Card.IsCanOverlay(Card c[, int player)",
                "return": "bool",
                "desc": "检查c是否可以被[玩家 player]叠放  \n衍生物、不在场上的卡或者是被禁止的卡、不是玩家 player 的卡并且不会被改变控制权的卡 都会返回false  \n"
            }
        ]
    },
    "GetPreviousEquipTarget": {
        "function": [
            {
                "name": "Card.GetPreviousEquipTarget(Card c)",
                "return": "Card",
                "desc": "返回c之前的装备对象  \n"
            }
        ]
    },
    "IsCodeListed": {
        "function": [
            {
                "name": "aux.IsCodeListed(Card c, int code)",
                "return": "bool",
                "desc": "检测 c 是否是有卡名 code 记述的卡  \n"
            }
        ]
    },
    "SetFusionMaterial": {
        "function": [
            {
                "name": "Duel.SetFusionMaterial(Group g)",
                "return": "void",
                "desc": "设置g为需要使用的融合素材  \n"
            }
        ]
    },
    "imval1": {
        "function": [
            {
                "name": "aux.imval1(Effect e, Card c)",
                "return": "bool",
                "desc": "不会成为攻击对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.imval1(e,c)  \n\treturn not c:IsImmuneToEffect(e)  \nend  \n"
            }
        ]
    },
    "GetSummonType": {
        "function": [
            {
                "name": "Card.GetSummonType(Card c)",
                "return": "int",
                "desc": "返回c的召唤/特殊召唤的方式  \n"
            }
        ]
    },
    "ShuffleExtra": {
        "function": [
            {
                "name": "Duel.ShuffleExtra(int player)",
                "return": "void",
                "desc": "手动洗切玩家player的额外卡组  \n"
            }
        ]
    },
    "IsActiveType": {
        "function": [
            {
                "name": "Effect.IsActiveType(Effect e, int type)",
                "return": "bool",
                "desc": "检查效果 e 的效果类型（怪兽·魔法·陷阱等）是否有type  \n"
            }
        ]
    },
    "GetBattleDamage": {
        "function": [
            {
                "name": "Duel.GetBattleDamage(int player)",
                "return": "int",
                "desc": "返回玩家player在本次战斗中受到的伤害  \n"
            }
        ]
    },
    "Draw": {
        "function": [
            {
                "name": "Duel.Draw(int player, int count, int reason)",
                "return": "int",
                "desc": "让玩家player以原因reason抽count张卡，返回实际抽的卡的数量  \n如果reason含有REASON_RULE则此次抽卡不受“不能抽卡”的效果的影响  \n"
            }
        ]
    },
    "GetDiceResult": {
        "function": [
            {
                "name": "Duel.GetDiceResult()",
                "return": "int,int,int,int,int",
                "desc": "返回当前掷骰子的结果  \n"
            }
        ]
    },
    "SetFlagEffectLabel": {
        "function": [
            {
                "name": "Card.SetFlagEffectLabel(Card c, int code, int label)",
                "return": "bool",
                "desc": "返回c是否存在种类为code的标识效果，若存在则设置其Label属性为label  \n"
            },
            {
                "name": "Duel.SetFlagEffectLabel(int player, int code, int label)",
                "return": "bool",
                "desc": "返回player是否存在种类为code的标识效果，并设置其Label属性为label  \n"
            }
        ]
    },
    "Summon": {
        "function": [
            {
                "name": "Duel.Summon(int player, Card c, bool ignore_count, Effect e|nil[, int min=0, int zone=0x1f])",
                "return": "void",
                "desc": "让玩家 player 以效果e对卡片c[在区域 zone]进行通常召唤(非set)，至少使用min个祭品  \n如果e=nil,那么就按照一般的通常召唤规则进行通常召唤  \n如果ignore_count=true，则忽略每回合的通常召唤次数限制  \n"
            }
        ]
    },
    "PayLPCost": {
        "function": [
            {
                "name": "Duel.PayLPCost(int player, int cost)",
                "return": "void",
                "desc": "让玩家player支付cost点lp  \n"
            }
        ]
    },
    "GetClassCount": {
        "function": [
            {
                "name": "Group.GetClassCount(Group g, function f, ...)",
                "return": "int",
                "desc": "计算g中所有卡的种类数量，f为分类的依据，返回相同的值视为同一种类，从第3个参数开始为额外参数  \n比如 g:GetClassCount(Card.GetCode) 就是计算g中卡名不同的卡的数量  \n"
            }
        ]
    },
    "XyzSummon": {
        "function": [
            {
                "name": "Duel.XyzSummon(int player, Card c, Group mg|nil[, int minc=0, int maxc=0])",
                "return": "void",
                "desc": "让玩家player用场上的卡[或mg][选minc-maxc 个素材]对c进行超量召唤手续  \nmg非空且min为0则直接把mg全部作为超量素材  \n"
            }
        ]
    },
    "IsCode": {
        "function": [
            {
                "name": "Card.IsCode(Card c, int code1[, int code2,...])",
                "return": "bool",
                "desc": "检查c的卡号是否是 code1[, 或者为 code2...]  \n"
            }
        ]
    },
    "SetReset": {
        "function": [
            {
                "name": "Effect.SetReset(Effect e, int reset_flag[, int reset_count=1])",
                "return": "void",
                "desc": "设置效果 e 的reset参数  \n"
            }
        ]
    },
    "IsHasProperty": {
        "function": [
            {
                "name": "Effect.IsHasProperty(Effect e, int prop1[, int prop2])",
                "return": "bool",
                "desc": "检查效果e是否含有标志prop1[和prop2]  \n"
            }
        ]
    },
    "IsPlayerAffectedByEffect": {
        "function": [
            {
                "name": "Duel.IsPlayerAffectedByEffect(int player, int code)",
                "return": "Effect|nil,...",
                "desc": "检查player是否受到种类为code的效果影响，如果有就返回那些效果，没有则返回nil ,player 为0和1以外的数值时，也会返回nil  \n"
            }
        ]
    },
    "IsAttackBelow": {
        "function": [
            {
                "name": "Card.IsAttackBelow(Card c, int atk)",
                "return": "bool",
                "desc": "检查c是否是攻击力atk以下（至少为0）  \n"
            }
        ]
    },
    "IsActivatable": {
        "function": [
            {
                "name": "Effect.IsActivatable(Effect e, int player[, bool neglect_loc=false, bool neglect_target=false])",
                "return": "bool",
                "desc": "检查效果e能否由player发动  \nneglect_loc=true 为不检测发动位置， neglect_target=true 为不检测对象要求  \n"
            }
        ]
    },
    "IsPlayerCanRelease": {
        "function": [
            {
                "name": "Duel.IsPlayerCanRelease(int player[, Card c])",
                "return": "bool",
                "desc": "检查玩家player是否能解放[卡片 c]  \n"
            }
        ]
    },
    "GetOriginalCode": {
        "function": [
            {
                "name": "Card.GetOriginalCode(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的代号  \n"
            }
        ]
    },
    "GetLinkedGroupCount": {
        "function": [
            {
                "name": "Card.GetLinkedGroupCount(Card c)",
                "return": "int",
                "desc": "返回c的连接区的卡片组的卡的数量（目前只限怪兽区）  \n"
            },
            {
                "name": "Duel.GetLinkedGroupCount(int player, int s_range, int o_range)",
                "return": "int",
                "desc": "返回以玩家player来看的 s_range 和 o_range 区域的处于连接状态的卡片的数量（？）  \n"
            }
        ]
    },
    "IsPlayerCanDraw": {
        "function": [
            {
                "name": "Duel.IsPlayerCanDraw(int player[, int count=0])",
                "return": "bool",
                "desc": "检查玩家player是否可以效果抽[count张]卡  \n"
            }
        ]
    },
    "GetPreviousTypeOnField": {
        "function": [
            {
                "name": "Card.GetPreviousTypeOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的类型  \n"
            }
        ]
    },
    "GetFirst": {
        "function": [
            {
                "name": "Group.GetFirst(Group g)",
                "return": "Card",
                "desc": "返回卡片组g中第一张卡，并重置当前指针到g中第一张卡  \n如果g中不存在卡则返回nil  \n"
            }
        ]
    },
    "GetUsableMZoneCount": {
        "function": [
            {
                "name": "Duel.GetUsableMZoneCount(int player[, int use_player])",
                "return": "int",
                "desc": "返回玩家player场上[对于 use_player 来说]可用的怪兽区数量（？）  \n"
            }
        ]
    },
    "SetRange": {
        "function": [
            {
                "name": "Effect.SetRange(Effect e, int range)",
                "return": "void",
                "desc": "设置效果 e 的Range属性，即e的生效位置  \n"
            }
        ]
    },
    "GetAttackedCount": {
        "function": [
            {
                "name": "Card.GetAttackedCount(Card c)",
                "return": "int",
                "desc": "返回c本回合攻击过的次数  \n注：如果此值与上一个函数的返回值不同，那么说明此卡本回合进行过直接攻击  \n"
            }
        ]
    },
    "ResetFlagEffect": {
        "function": [
            {
                "name": "Card.ResetFlagEffect(Card c, int code)",
                "return": "void",
                "desc": "手动清除c的种类是code的标识效果  \n"
            },
            {
                "name": "Duel.ResetFlagEffect(int player, int code)",
                "return": "void",
                "desc": "手动reset玩家player的 code 标识效果  \n"
            }
        ]
    },
    "CheckTunerMaterial": {
        "function": [
            {
                "name": "Duel.CheckTunerMaterial(Card c, Card tuner, function f1|nil, function f2|nil, int min, int max[, Group mg|nil])",
                "return": "bool",
                "desc": "检查场上[或mg中]是否存在一组以tuner作为调整,并且满足条件的卡作为同调召唤c的素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \n"
            }
        ]
    },
    "ExceptThisCard": {
        "function": [
            {
                "name": "aux.ExceptThisCard(Effect e)",
                "return": "bool",
                "desc": "若 e:GetHandler() 与效果 e 有联系，则返回 e:GetHandler() ,否则返回 nil  \nfunction Auxiliary.ExceptThisCard(e)  \n\tlocal c=e:GetHandler()  \n\tif c:IsRelateToEffect(e) then return c else return nil end  \nend  \n"
            }
        ]
    },
    "CreateEffect": {
        "function": [
            {
                "name": "Effect.CreateEffect(Card c)",
                "return": "Effect",
                "desc": "新建一个空效果  \n并且效果的Owner为c  \n"
            }
        ]
    },
    "IsExists": {
        "function": [
            {
                "name": "Group.IsExists(Group g, function f, int count, Card|Group ex|nil, ...)",
                "return": "bool",
                "desc": "过滤函数，检查卡片组g中是否存在至少count张满足筛选条件f并且不等于ex的卡  \n从第5个参数开始为额外参数  \n"
            }
        ]
    },
    "AddRitualProcGreater": {
        "function": [
            {
                "name": "aux.AddRitualProcGreater(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetOriginalLevel,\"Greater\",summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "NegateEffect": {
        "function": [
            {
                "name": "Duel.NegateEffect(int chainc)",
                "return": "bool",
                "desc": "使连锁chainc的效果无效，返回值表示是否成功  \nchainc=0 表示当前效果  \n"
            }
        ]
    },
    "IsDefense": {
        "function": [
            {
                "name": "Card.IsDefense(Card c, int def[, int atk2,...])",
                "return": "bool",
                "desc": "检查c的守备力是否是 def1[, 或者为 def2...]，如果c不是怪兽卡，或者不在 LOCATION_MZONE 则都返回false  \n"
            }
        ]
    },
    "CheckLPCost": {
        "function": [
            {
                "name": "Duel.CheckLPCost(int player, int cost)",
                "return": "bool",
                "desc": "检查玩家player是否能支付cost点lp  \n"
            }
        ]
    },
    "GetFusionCode": {
        "function": [
            {
                "name": "Card.GetFusionCode(Card c)",
                "return": "int[,int,...]",
                "desc": "返回c作为融合素材时的卡号（包括c原本的卡号）  \n"
            }
        ]
    },
    "GetTurnCounter": {
        "function": [
            {
                "name": "Card.GetTurnCounter(Card c)",
                "return": "int",
                "desc": "返回c的回合计数器  \n"
            }
        ]
    },
    "IsPreviousPosition": {
        "function": [
            {
                "name": "Card.IsPreviousPosition(Card c, int pos)",
                "return": "bool",
                "desc": "检查c位置变化之前是否是表示形式pos  \n"
            }
        ]
    },
    "NegateRelatedChain": {
        "function": [
            {
                "name": "Duel.NegateRelatedChain(Card c, int reset)",
                "return": "void",
                "desc": "使和卡片c有关的连锁都无效化，发生reset事件则重置,reset 默认包含 RESET_CHAIN  \n"
            }
        ]
    },
    "SZoneSequence": {
        "function": [
            {
                "name": "aux.SZoneSequence(int seq)",
                "return": "int",
                "desc": "返回是第几列魔陷区，从左到右 分别是 0~4 ,不包含场地区  \n"
            }
        ]
    },
    "nbcon": {
        "function": [
            {
                "name": "aux.nbcon(int tp, Effect re)",
                "return": "void",
                "desc": "无效并除外  \nfunction Auxiliary.nbcon(tp,re)  \n\tlocal rc=re:GetHandler()  \n\treturn Duel.IsPlayerCanRemove(tp)  \n\t\tand (not rc:IsRelateToEffect(re) or rc:IsAbleToRemove())  \nend  \n"
            }
        ]
    },
    "xyzlimit": {
        "function": [
            {
                "name": "aux.xyzlimit(Effect e, Effect se, int sp, int st)",
                "return": "bool",
                "desc": "不能用 超量召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.xyzlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_XYZ==SUMMON_TYPE_XYZ  \nend  \n"
            }
        ]
    },
    "penlimit": {
        "function": [
            {
                "name": "aux.penlimit(Effect e, Effect se, int sp, int st)",
                "return": "bool",
                "desc": "不能用 灵摆召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.penlimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_PENDULUM==SUMMON_TYPE_PENDULUM  \nend  \n"
            }
        ]
    },
    "GetLevel": {
        "function": [
            {
                "name": "Card.GetLevel(Card c)",
                "return": "int",
                "desc": "返回c的当前等级  \n"
            }
        ]
    },
    "IsChainDisablable": {
        "function": [
            {
                "name": "Duel.IsChainDisablable(int chainc)",
                "return": "bool",
                "desc": "检查连锁chainc的效果能否被无效  \n"
            }
        ]
    },
    "GetFusionAttribute": {
        "function": [
            {
                "name": "Card.GetFusionAttribute(Card c[, int player=PLAYER_NONE])",
                "return": "int",
                "desc": "返回c[由player融合召唤时]用作融合素材时的属性  \n"
            }
        ]
    },
    "CheckXyzMaterial": {
        "function": [
            {
                "name": "Duel.CheckXyzMaterial(Card c, function f|nil, int lv, int min, int max, Group mg|nil)",
                "return": "bool",
                "desc": "检查场上[或mg中]是否存在用于超量召唤c的超量用等级为lv的min-max个满足条件f的叠放素材  \n"
            }
        ]
    },
    "IsPlayerCanDiscardDeckAsCost": {
        "function": [
            {
                "name": "Duel.IsPlayerCanDiscardDeckAsCost(int player, int count)",
                "return": "bool",
                "desc": "检查玩家player能否把卡组顶端count张卡送去墓地作为cost  \n"
            }
        ]
    },
    "RockPaperScissors": {
        "function": [
            {
                "name": "Duel.RockPaperScissors([bool repeat=true])",
                "return": "int",
                "desc": "猜拳，若 repeat=false 则只猜一次；否则就是直到分出胜负为止。返回胜利的玩家号码  \n"
            }
        ]
    },
    "ReleaseEffectRelation": {
        "function": [
            {
                "name": "Card.ReleaseEffectRelation(Card c, Effect e)",
                "return": "void",
                "desc": "手动释放c与效果e的联系  \n"
            }
        ]
    },
    "SetLP": {
        "function": [
            {
                "name": "Duel.SetLP(int player, int lp)",
                "return": "void",
                "desc": "设置玩家player的当前LP为lp  \n"
            }
        ]
    },
    "SelectSequence": {
        "function": [
            {
                "name": "Duel.SelectSequence()",
                "return": "void",
                "desc": "看函数名字，像是选择序号的  \n但是此函数只有一个 check_action_permission(L) 操作，还没有返回值，不知何用  \n"
            }
        ]
    },
    "AddContactFusionProcedure": {
        "function": [
            {
                "name": "aux.AddContactFusionProcedure(Card c, function filter, int self_location, int opponent_location, any mat_operation[, ...])",
                "return": "void",
                "desc": "为c 添加接触融合手续。  \nfilter 表示素材的过滤条件  \nself_location, opponent_location 表示以c:GetControler() 来看的自己，对方的区域  \nmat_operation 表示要对素材进行的操作  \n"
            }
        ]
    },
    "GetFirstMatchingCard": {
        "function": [
            {
                "name": "Duel.GetFirstMatchingCard(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)",
                "return": "Card",
                "desc": "过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的第一张卡,没有则返回nil  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n"
            }
        ]
    },
    "AnnounceNumber": {
        "function": [
            {
                "name": "Duel.AnnounceNumber(int player, int number, ...)",
                "return": "int,int",
                "desc": "让玩家player宣言一个数字  \n从第二个参数开始，每一个参数代表一个可宣言的数字  \n第一个返回值是宣言的数字，第二个返回值是宣言数字在所有选项中的位置  \n"
            }
        ]
    },
    "GetMaterialCount": {
        "function": [
            {
                "name": "Card.GetMaterialCount(Card c)",
                "return": "int",
                "desc": "返回c出场使用的素材数量  \n"
            }
        ]
    },
    "AddCard": {
        "function": [
            {
                "name": "Group.AddCard(Group g, Card c)",
                "return": "void",
                "desc": "往卡片组g中增加卡片c  \n"
            },
            {
                "name": "Debug.AddCard(int code, int owner, int player, int location, int seq, int pos[, bool proc=false])",
                "return": "Card",
                "desc": "添加卡片，将卡号为code的卡片的持有者设置为owner，以表示形式pos放置在player的场上位于location上序号为seq的格子处  \nproc=true则完成正规召唤程序(即解除苏生限制)  \n"
            }
        ]
    },
    "ReloadFieldBegin": {
        "function": [
            {
                "name": "Debug.ReloadFieldBegin(int flag[, int rule=3])",
                "return": "void",
                "desc": "以选项flag开始布局  \n\tflag 残局： DUEL_ATTACK_FIRST_TURN+DUEL_SIMPLE_AI  \n\t\t 大师1规则： DUEL_OBSOLETE_RULING  \n\trule=4 是新大师规则  \n"
            }
        ]
    },
    "RemoveCard": {
        "function": [
            {
                "name": "Group.RemoveCard(Group g, Card c)",
                "return": "void",
                "desc": "把卡片c从卡片组g中移除  \n"
            }
        ]
    },
    "__band": {
        "function": [
            {
                "name": "Group.__band(Group|Card target1, Group|Card target2)",
                "return": "Group",
                "desc": "新建一个卡片组，将 target1 和 target2 中相同的卡（就是那张卡同时存在于 target1 和 target2 ）全部添加到 这个卡片组里，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n"
            }
        ]
    },
    "BreakEffect": {
        "function": [
            {
                "name": "Duel.BreakEffect()",
                "return": "void",
                "desc": "中断当前效果，使之后的效果处理视为不同时处理，此函数会造成错时点  \n"
            }
        ]
    },
    "GetExtraTopGroup": {
        "function": [
            {
                "name": "Duel.GetExtraTopGroup(int player, int count)",
                "return": "Group",
                "desc": "返回玩家player的额外卡组表侧表示的卡中最上方的count张卡  \n"
            }
        ]
    },
    "IsPublic": {
        "function": [
            {
                "name": "Card.IsPublic(Card c)",
                "return": "bool",
                "desc": "检查c是否处于公开状态  \n"
            }
        ]
    },
    "GetControler": {
        "function": [
            {
                "name": "Card.GetControler(Card c)",
                "return": "int",
                "desc": "返回c的当前控制者  \n"
            }
        ]
    },
    "GetLocation": {
        "function": [
            {
                "name": "Card.GetLocation(Card c)",
                "return": "int",
                "desc": "返回c当前的所在位置  \n"
            }
        ]
    },
    "SetSynchroMaterial": {
        "function": [
            {
                "name": "Duel.SetSynchroMaterial(Group g)",
                "return": "void",
                "desc": "设置g为需要使用的同调素材  \n"
            }
        ]
    },
    "SpecialSummonStep": {
        "function": [
            {
                "name": "Duel.SpecialSummonStep(Card c, int sumtype, int sumplayer, int target_player, bool nocheck, bool nolimit, int pos[, int zone=0xff])",
                "return": "bool",
                "desc": "此函数是Duel.SpecialSummon的分解过程，只特殊召唤一张卡c ，其他参数用法和 Duel.SpecialSummon 一样  \n此函数用于一个效果同时特殊召唤多张参数不同的卡  \n此函数必须和Duel.SpecialSummonComplete()一起使用  \n返回值表示是否特殊召唤成功  \n"
            }
        ]
    },
    "ConfirmCards": {
        "function": [
            {
                "name": "Duel.ConfirmCards(int player, Card|Group targets)",
                "return": "void",
                "desc": "给玩家player确认targets  \n"
            }
        ]
    },
    "GetRace": {
        "function": [
            {
                "name": "Card.GetRace(Card c)",
                "return": "int",
                "desc": "返回c的当前种族  \n注：对某些多种族怪兽如动画效果的魔术猿，此函数的返回值可能是几个种族的组合值  \n"
            }
        ]
    },
    "ReleaseRelation": {
        "function": [
            {
                "name": "Card.ReleaseRelation(Card c1, Card c2)",
                "return": "void",
                "desc": "手动释放c1对于c2的联系  \n"
            }
        ]
    },
    "Reset": {
        "function": [
            {
                "name": "Effect.Reset(Effect e)",
                "return": "void",
                "desc": "把效果e重置，重置之后不可以再使用此效果  \n"
            }
        ]
    },
    "drccheck": {
        "function": [
            {
                "name": "aux.drccheck(Group g)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否有相同种族的卡的简单写法，返回值如果为 true 表示没有相同种族卡  \nfunction Auxiliary.drccheck(g)  \n\treturn g:GetClassCount(Card.GetRace)==#g  \nend  \n"
            }
        ]
    },
    "IsPreviousLocation": {
        "function": [
            {
                "name": "Card.IsPreviousLocation(Card c, int location)",
                "return": "bool",
                "desc": "检查c之前的位置是否是location  \n"
            }
        ]
    },
    "__add": {
        "function": [
            {
                "name": "Group.__add(Group|Card target1, Group|Card target2)",
                "return": "Group",
                "desc": "新建一个卡片组，将 target1 和 target2 中的 全部卡添加到这个卡片组，并返回这个卡片组，若有相同的卡只会添加1次， target1,target2 本身不会有任何变化  \n"
            }
        ]
    },
    "GetPosition": {
        "function": [
            {
                "name": "Card.GetPosition(Card c)",
                "return": "int",
                "desc": "返回c当前的表示形式  \n"
            }
        ]
    },
    "SpecialSummonRule": {
        "function": [
            {
                "name": "Duel.SpecialSummonRule(int player, Card c[, int sumtype=0])",
                "return": "void",
                "desc": "让玩家player对卡片c[用 sumtype 方式]进行特殊召唤手续（？）  \n"
            }
        ]
    },
    "AnnounceCoin": {
        "function": [
            {
                "name": "Duel.AnnounceCoin(int player)",
                "return": "int",
                "desc": "让玩家player宣言硬币的正反面  \n"
            }
        ]
    },
    "IsChainAttackable": {
        "function": [
            {
                "name": "Card.IsChainAttackable(Card c[, int ac = 2, bool monsteronly = false])",
                "return": "bool",
                "desc": "检查c是否可以连续攻击，c的攻击宣言次数>=ac则返回false  \nmonsteronly = true 则表示只能对怪兽攻击  \n注：当c因为闪光之双剑等效果进行过多次攻击之后此函数返回false  \n"
            }
        ]
    },
    "GetMZoneCount": {
        "function": [
            {
                "name": "Duel.GetMZoneCount(int player[, Group|Card targets|nil, int use_player, int reason = LOCATION_REASON_TOFIELD, int zone=0xff])",
                "return": "int",
                "desc": "返回玩家player场上[targets 离开后]可用的[区域 zone 里的]怪兽区数量  \n##第三个第四个额外参数与凯撒斗技场等限制格子的效果有关  \n"
            }
        ]
    },
    "GetDescription": {
        "function": [
            {
                "name": "Effect.GetDescription(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的效果描述，没有则无返回值，下同（到 GetCategory ）  \n"
            }
        ]
    },
    "ReturnToField": {
        "function": [
            {
                "name": "Duel.ReturnToField(Card c[, int pos, int zone=0xff])",
                "return": "bool",
                "desc": "把c[以表示形式pos]返回到场上[的区域 zone]，pos默认值是离场前的表示形式，返回值表示是否成功  \nc必须是以REASON_TEMPORARY原因离场，并且离场后没有离开过那个位置  \n"
            }
        ]
    },
    "GetAttack": {
        "function": [
            {
                "name": "Card.GetAttack(Card c)",
                "return": "int",
                "desc": "返回c的当前攻击力  \n"
            }
        ]
    },
    "KeepAlive": {
        "function": [
            {
                "name": "Group.KeepAlive(Group g)",
                "return": "void",
                "desc": "让卡片组g持续，把卡片组设置为效果的LabelObject需要设置  \n"
            }
        ]
    },
    "GetXyzType": {
        "function": [
            {
                "name": "Card.GetXyzType(Card c)",
                "return": "int",
                "desc": "返回c用作同调素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n"
            }
        ]
    },
    "GetPreviousSequence": {
        "function": [
            {
                "name": "Card.GetPreviousSequence(Card c)",
                "return": "int",
                "desc": "返回c位置变化前的序号  \n"
            }
        ]
    },
    "IsLinkSetCard": {
        "function": [
            {
                "name": "Card.IsLinkSetCard(Card c, int setname)",
                "return": "bool",
                "desc": "检查c作为link素材时能否当作名字含有setname的卡  \n"
            }
        ]
    },
    "ReloadFieldEnd": {
        "function": [
            {
                "name": "Debug.ReloadFieldEnd()",
                "return": "void",
                "desc": "布局结束  \n"
            }
        ]
    },
    "IsFusionType": {
        "function": [
            {
                "name": "Card.IsFusionType(Card c, int type)",
                "return": "bool",
                "desc": "检查c用作融合素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n"
            }
        ]
    },
    "GetOriginalLevel": {
        "function": [
            {
                "name": "Card.GetOriginalLevel(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的等级  \n"
            }
        ]
    },
    "IsControlerCanBeChanged": {
        "function": [
            {
                "name": "Card.IsControlerCanBeChanged(Card c[, bool ignore_mzone=false, int zone=0xff])",
                "return": "bool",
                "desc": "检查c的控制权是否可以改变。 ignore_mzone=true 会忽视转移控制权后的玩家场上是否有空格位， zone 表示必须要使用的位置  \n"
            }
        ]
    },
    "GetOverlayTarget": {
        "function": [
            {
                "name": "Card.GetOverlayTarget(Card c)",
                "return": "Card",
                "desc": "返回以c为超量素材的卡  \n"
            }
        ]
    },
    "SynchroSummon": {
        "function": [
            {
                "name": "Duel.SynchroSummon(int player, Card c, Card tuner|nil[, Group mg|nil, int minc=0, int maxc=0])",
                "return": "void",
                "desc": "让玩家player以tuner作为调整,场上[或mg][minc-maxc 张]的卡为素材，对c进行同调召唤手续  \n"
            }
        ]
    },
    "SetHintTiming": {
        "function": [
            {
                "name": "Effect.SetHintTiming(Effect e, int s_time[, int o_time=s_time])",
                "return": "void",
                "desc": "设置效果 e 的提示时点，第二个和第三个参数分别表示 自己 和对方的回合  \n"
            }
        ]
    },
    "IsFusionSetCard": {
        "function": [
            {
                "name": "Card.IsFusionSetCard(Card c, int setname)",
                "return": "bool",
                "desc": "检查c作为融合素材时能否当作名字含有setname的卡  \n"
            }
        ]
    },
    "IsOnField": {
        "function": [
            {
                "name": "Card.IsOnField(Card c)",
                "return": "bool",
                "desc": "检查c是否在场  \n注：当怪兽召唤，反转召唤，特殊召唤时召唤成功之前，此函数返回false  \n"
            }
        ]
    },
    "IsAbleToGrave": {
        "function": [
            {
                "name": "Card.IsAbleToGrave(Card c)",
                "return": "bool",
                "desc": "检查c是否可以送去墓地  \n"
            }
        ]
    },
    "SortDecktop": {
        "function": [
            {
                "name": "Duel.SortDecktop(int sort_player, int target_player, int count)",
                "return": "void",
                "desc": "让玩家sort_player对玩家target_player的卡组最上方count张卡进行排序，最先选的卡在最上面，然后下面是第二张选择的卡，以此类推  \n最多只能排序16张卡  \n"
            }
        ]
    },
    "GetLabel": {
        "function": [
            {
                "name": "Effect.GetLabel(Effect e)",
                "return": "int[,...]",
                "desc": "返回效果 e 的Label(全部返回)  \n"
            }
        ]
    },
    "GetEquipTarget": {
        "function": [
            {
                "name": "Card.GetEquipTarget(Card c)",
                "return": "Card",
                "desc": "返回c当前的装备对象  \n"
            }
        ]
    },
    "SendtoExtraP": {
        "function": [
            {
                "name": "Duel.SendtoExtraP(Card|Group targets, int player|nil, int reason)",
                "return": "int",
                "desc": "以reason原因把灵摆卡targets表侧表示送去玩家player的额外卡组，返回值是实际被操作的数量  \n如果player是nil则返回卡的持有者的额外卡组  \n"
            }
        ]
    },
    "mzctcheckrel": {
        "function": [
            {
                "name": "aux.mzctcheckrel(Group g, int tp)",
                "return": "bool",
                "desc": "检测玩家 tp 场上是否有卡片组 g 离开后可用的主要怪兽区格子，并且检测卡片组 g 能否解放 的简单写法  \nfunction Auxiliary.mzctcheckrel(g,tp)  \n\treturn Duel.GetMZoneCount(tp,g)>0 and Duel.CheckReleaseGroup(tp,Auxiliary.IsInGroup,#g,nil,g)  \nend  \n"
            }
        ]
    },
    "SelectUnselect": {
        "function": [
            {
                "name": "Group.SelectUnselect(Group cg, Group sg, int player, bool btok=false, bool cancelable=false, int minc, int maxc)",
                "return": "Card",
                "desc": "让玩家 player 从卡片组 cg 中选择 1 张卡放入卡片组 sg ，并返回选的卡。    \nbtok 表示是否可以点击完成选择的按钮， cancelable 表示是否可以取消已选择的卡，   \nminc 和 maxc 是客户端的文字缓冲提示，表示需要选择 minc-maxc 张卡，但是这个只是影响视觉效果，并不代表必须要选择那个数量  \n"
            }
        ]
    },
    "Clear": {
        "function": [
            {
                "name": "Group.Clear(Group g)",
                "return": "void",
                "desc": "清空卡片组g里的内容  \n"
            }
        ]
    },
    "IsDualState": {
        "function": [
            {
                "name": "Card.IsDualState(Card c)",
                "return": "bool",
                "desc": "检查c属否处于再召唤状态  \n"
            },
            {
                "name": "aux.IsDualState(Effect e)",
                "return": "bool",
                "desc": "检查二重怪兽e:GetHandler()是否是再度召唤状态（用于效果的Condition属性）  \n常用于二重怪兽再度召唤获得的效果e的Condition属性  \n"
            }
        ]
    },
    "SetLabelObject": {
        "function": [
            {
                "name": "Effect.SetLabelObject(Effect e, Card|Group|Effect labelobject)",
                "return": "void",
                "desc": "设置效果 e 的LabelObject属性  \n"
            }
        ]
    },
    "GetMatchingGroup": {
        "function": [
            {
                "name": "Duel.GetMatchingGroup(function f|nil, int player, int s, int o, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "过滤函数，返回以player来看的指定位置满足过滤条件f并且不等于ex的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第6个参数开始为额外参数  \n"
            }
        ]
    },
    "SetCardTarget": {
        "function": [
            {
                "name": "Card.SetCardTarget(Card c1, Card c2)",
                "return": "void",
                "desc": "把c2作为c1的永续对象  \nc1和c2的联系会在c1或c2任意一卡离场或变成里侧表示时reset  \n"
            }
        ]
    },
    "GetReason": {
        "function": [
            {
                "name": "Card.GetReason(Card c)",
                "return": "int",
                "desc": "返回c的位置变化原因  \n"
            }
        ]
    },
    "SelectTarget": {
        "function": [
            {
                "name": "Duel.SelectTarget(int sel_player, function f|nil, int player, int s, int o, int min, int max, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "基本同Duel.SelectMatchingCard ，不同之处在于此函数会同时将当前正在处理的连锁的对象设置成选择的卡  \n"
            }
        ]
    },
    "GetOwner": {
        "function": [
            {
                "name": "Card.GetOwner(Card c)",
                "return": "int",
                "desc": "返回c的持有者  \n"
            },
            {
                "name": "Effect.GetOwner(Effect e)",
                "return": "Card",
                "desc": "返回效果 e 的Owner属性  \n"
            }
        ]
    },
    "GetLinkType": {
        "function": [
            {
                "name": "Card.GetLinkType(Card c)",
                "return": "int",
                "desc": "返回c用作link素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n"
            }
        ]
    },
    "GetSum": {
        "function": [
            {
                "name": "Group.GetSum(Group g, function f, ...)",
                "return": "int",
                "desc": "计算g中所有卡的取值的总和，f为为每张卡的取值函数，从第3个参数开始为额外参数  \n等价于：  \nfunction GetSum(g,f,...)  \n\tlocal ct=0  \n\tlocal val={...}  \n\tfor tc in aux.Next(g)  \n\t\tif f(tc,table.unpack(val)) then ct=ct+1 end  \n\tend  \n\treturn ct  \nend  \n"
            }
        ]
    },
    "IsAttackPos": {
        "function": [
            {
                "name": "Card.IsAttackPos(Card c)",
                "return": "bool",
                "desc": "检查c是否是攻击表示  \n"
            }
        ]
    },
    "CheckWithSumEqual": {
        "function": [
            {
                "name": "Group.CheckWithSumEqual(Group g, function f, int sum, int min=0, int max, ...)",
                "return": "bool",
                "desc": "子集求和判定函数，f为返回一个interger值的函数  \n检查卡片组g中是否存在一个数量为min-max的子集满足以f对子集的每一个元素求值的和等于sum，从第6个参数开始为额外参数  \n\t比如：g:CheckWithSumEqual(Card.GetSynchroLevel,7,2,99)  \n\t检查g中是否存在一个子集元素数量在2-99之间的子集，并且满足子集的同调用等级之和等于7  \n"
            }
        ]
    },
    "GetCardTarget": {
        "function": [
            {
                "name": "Card.GetCardTarget(Card c)",
                "return": "Group",
                "desc": "返回c当前所有的永续对象  \n"
            }
        ]
    },
    "SelectReleaseGroupEx": {
        "function": [
            {
                "name": "Duel.SelectReleaseGroupEx(int player, function f|nil, int min, int max, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "过滤函数，让玩家player从场上·手卡选择min-max张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第6个参数开始为额外参数  \n"
            }
        ]
    },
    "IsDestructable": {
        "function": [
            {
                "name": "Card.IsDestructable(Card c[, Effect e])",
                "return": "bool",
                "desc": "检查c是否是可被[效果 e]破坏的  \n"
            }
        ]
    },
    "IsXyzSummonable": {
        "function": [
            {
                "name": "Card.IsXyzSummonable(Card c, Group mg|nil[, minc=0, maxc=0])",
                "return": "bool",
                "desc": "检查是否可以在场上的卡[或mg][中选出 minc-maxc 个超量素材]对c进行超量召唤手续  \n如果mg为nil，此函数与 c:IsSpecialSummonable(SUMMON_TYPE_XYZ)作用相同  \nc 如果不是超量会返回 false  \n"
            }
        ]
    },
    "IsRelateToBattle": {
        "function": [
            {
                "name": "Card.IsRelateToBattle(Card c)",
                "return": "bool",
                "desc": "检查c是否和本次战斗关联  \n注：此效果通常用于伤害计算后伤害阶段结束前，用于检查战斗的卡是否离场过  \n"
            }
        ]
    },
    "IsXyzType": {
        "function": [
            {
                "name": "Card.IsXyzType(Card c, int type)",
                "return": "bool",
                "desc": "检查c用作超量素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n"
            }
        ]
    },
    "CancelCardTarget": {
        "function": [
            {
                "name": "Card.CancelCardTarget(Card c1, Card c2)",
                "return": "void",
                "desc": "取消c2为c1的永续对象  \n"
            }
        ]
    },
    "GetCurrentPhase": {
        "function": [
            {
                "name": "Duel.GetCurrentPhase()",
                "return": "int",
                "desc": "返回当前的阶段  \n"
            }
        ]
    },
    "SetCoinResult": {
        "function": [
            {
                "name": "Duel.SetCoinResult(int res, ... )",
                "return": "void",
                "desc": "强行修改投硬币的结果为res ,最多5个参数，res只能是 0 或 1, ，其他全算作 0  \n此函数用于永续的EVENT_TOSS_COIN事件中  \n"
            }
        ]
    },
    "SetDiceResult": {
        "function": [
            {
                "name": "Duel.SetDiceResult(int res, ...)",
                "return": "void",
                "desc": "强行修改投骰子的结果为res ,最多5个参数，res只能是 1~255, ，其他数字全算作 1  \n此函数用于永续的EVENT_TOSS_DICE事件中  \n"
            }
        ]
    },
    "GetColumn": {
        "function": [
            {
                "name": "aux.GetColumn(Card c, int player=0)",
                "return": "int",
                "desc": "返回以 player 来看的卡片 c 所在的那一列的序号，不包含 场地区域，从左到右 分别是 0~4  \n"
            }
        ]
    },
    "SetOwnerPlayer": {
        "function": [
            {
                "name": "Effect.SetOwnerPlayer(Effect e[, int player=0])",
                "return": "void",
                "desc": "设置效果 e 的OwnerPlayer属性为player  \n"
            }
        ]
    },
    "GetMutualLinkedGroup": {
        "function": [
            {
                "name": "Card.GetMutualLinkedGroup(Card c)",
                "return": "Group",
                "desc": "返回和c互相连接状态的卡片组  \n"
            }
        ]
    },
    "ChangeBattleDamage": {
        "function": [
            {
                "name": "Duel.ChangeBattleDamage(int player, int value[, bool check=true])",
                "return": "void",
                "desc": "把玩家player在本次战斗中受到的伤害变成value，若 check=false 则原本战斗伤害就算为0也改变伤害  \n"
            },
            {
                "name": "aux.ChangeBattleDamage(int player, int value)",
                "return": "int",
                "desc": "如果 player 是受到战斗伤害的玩家，则改变战斗伤害为 value  \n"
            }
        ]
    },
    "CreateEffectRelation": {
        "function": [
            {
                "name": "Card.CreateEffectRelation(Card c, Effect e)",
                "return": "void",
                "desc": "为卡片c和效果e建立联系  \n"
            }
        ]
    },
    "GetRitualLevel": {
        "function": [
            {
                "name": "Card.GetRitualLevel(Card c, Card rc)",
                "return": "int",
                "desc": "返回c的对于仪式怪兽rc仪式解放等级  \n此函数除了某些特定卡如仪式供物，返回值与Card.GetLevel(c)相同  \n"
            }
        ]
    },
    "AnnounceRace": {
        "function": [
            {
                "name": "Duel.AnnounceRace(int player, int count, int available)",
                "return": "int",
                "desc": "让玩家player从可选的种族中宣言count个种族  \navailable是所有可选种族的组合值，可以自行组合  \n可以直接将名字相加，比如 RACE_WARRIOR+RACE_SPELLCASTER  \nRACE_ALL\t\t\t=0x1ffffff\t--全种族  \nRACE_WARRIOR\t\t=0x1\t\t--战士  \nRACE_SPELLCASTER\t=0x2\t\t--魔法师  \nRACE_FAIRY\t\t\t=0x4\t\t--天使  \nRACE_FIEND\t\t\t=0x8\t\t--恶魔  \nRACE_ZOMBIE\t\t\t=0x10\t\t--不死  \nRACE_MACHINE\t\t=0x20\t\t--机械  \nRACE_AQUA\t\t\t=0x40\t\t--水  \nRACE_PYRO\t\t\t=0x80\t\t--炎  \nRACE_ROCK\t\t\t=0x100\t\t--岩石  \nRACE_WINDBEAST\t\t=0x200\t\t--鸟兽  \nRACE_PLANT\t\t\t=0x400\t\t--植物  \nRACE_INSECT\t\t\t=0x800\t\t--昆虫  \nRACE_THUNDER\t\t=0x1000\t\t--雷  \nRACE_DRAGON\t\t\t=0x2000\t\t--龙  \nRACE_BEAST\t\t\t=0x4000\t\t--兽  \nRACE_BEASTWARRIOR\t=0x8000\t\t--兽战士  \nRACE_DINOSAUR\t\t=0x10000\t--恐龙  \nRACE_FISH\t\t\t=0x20000\t--鱼  \nRACE_SEASERPENT\t\t=0x40000\t--海龙  \nRACE_REPTILE\t\t=0x80000\t--爬虫类  \nRACE_PSYCHO\t\t\t=0x100000\t--念动力  \nRACE_DEVINE\t\t\t=0x200000\t--幻神兽  \nRACE_CREATORGOD\t\t=0x400000\t--创造神  \nRACE_WYRM\t\t\t=0x800000\t--幻龙  \nRACE_CYBERSE\t\t=0x1000000\t--电子界  \n"
            }
        ]
    },
    "IsPlayerCanMSet": {
        "function": [
            {
                "name": "Duel.IsPlayerCanMSet(int player[, int sumtype, Card c])",
                "return": "bool",
                "desc": "检查玩家player是否可以盖放怪兽[c，以sumtype方式]  \n如果需要可选参数，则必须全部使用  \n"
            }
        ]
    },
    "ClearTargetCard": {
        "function": [
            {
                "name": "Duel.ClearTargetCard()",
                "return": "void",
                "desc": "把当前正在处理的连锁的对象全部清除  \n"
            }
        ]
    },
    "GetNext": {
        "function": [
            {
                "name": "Group.GetNext(Group g)",
                "return": "Card",
                "desc": "使指针指向卡片组g下一张卡并返回这张卡，如果不存在则返回nil  \n"
            }
        ]
    },
    "GetFirstCardTarget": {
        "function": [
            {
                "name": "Card.GetFirstCardTarget(Card c)",
                "return": "Card",
                "desc": "返回c当前第一个永续对象，没有则返回 nil  \n"
            }
        ]
    },
    "GetOriginalAttribute": {
        "function": [
            {
                "name": "Card.GetOriginalAttribute(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的属性  \n"
            }
        ]
    },
    "SendtoGrave": {
        "function": [
            {
                "name": "Duel.SendtoGrave(Card|Group targets, int reason)",
                "return": "int",
                "desc": "以reason原因把targets送去墓地，返回值是实际被操作的数量  \n"
            }
        ]
    },
    "GetOverlayCount": {
        "function": [
            {
                "name": "Card.GetOverlayCount(Card c)",
                "return": "int",
                "desc": "返回c当前叠放着的卡片数量  \n"
            },
            {
                "name": "Duel.GetOverlayCount(int player, int s, int o)",
                "return": "int",
                "desc": "返回以player来看的指定位置的所有叠放的卡的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n"
            }
        ]
    },
    "dncheck": {
        "function": [
            {
                "name": "aux.dncheck(Group g)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否有同名卡的简单写法，返回值如果为 true 表示没有同名卡  \nfunction Auxiliary.dncheck(g)  \n\treturn g:GetClassCount(Card.GetCode)==#g  \nend  \n"
            }
        ]
    },
    "AddFusionProcShaddoll": {
        "function": [
            {
                "name": "aux.AddFusionProcShaddoll(Card c, int attribute)",
                "return": "void",
                "desc": "影依融合怪兽专用，attribute 为需要的属性  \n"
            }
        ]
    },
    "indsval": {
        "function": [
            {
                "name": "aux.indsval(Effect e, Effect re, int rp)",
                "return": "bool",
                "desc": "不会被自己的卡破坏的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.indsval(e,re,rp)  \n\treturn rp==e:GetHandlerPlayer()  \nend  \n"
            }
        ]
    },
    "SetPlayerInfo": {
        "function": [
            {
                "name": "Debug.SetPlayerInfo(int playerid, int lp, int startcount, int drawcount)",
                "return": "void",
                "desc": "设置玩家信息，基本分为lp，初始手卡为startcount张，每回合抽drawcount张  \n在残局当中， playerid ：自己=0,对方=1  \n"
            }
        ]
    },
    "SetValue": {
        "function": [
            {
                "name": "Effect.SetValue(Effect e, function|int|bool val)",
                "return": "void",
                "desc": "设置效果 e 的Value属性  \n"
            }
        ]
    },
    "GetPreviousRaceOnField": {
        "function": [
            {
                "name": "Card.GetPreviousRaceOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的种族  \n"
            }
        ]
    },
    "IsDiscardable": {
        "function": [
            {
                "name": "Card.IsDiscardable(Card[, int reason=REASON_COST])",
                "return": "bool",
                "desc": "检查c是否可以以reason原因丢弃  \n注：此函数仅用于检测，  \n以REASON_DISCARD作为原因把一张手卡送墓并不会导致那张卡不能丢弃  \n"
            }
        ]
    },
    "GetReleaseGroupCount": {
        "function": [
            {
                "name": "Duel.GetReleaseGroupCount(int player[, bool use_hand=false])",
                "return": "integer",
                "desc": "返回玩家player可解放（非上级召唤用）的卡片数量， use_hand=true 则包括手卡  \n"
            }
        ]
    },
    "GetReleaseGroup": {
        "function": [
            {
                "name": "Duel.GetReleaseGroup(int player[, bool use_hand=false])",
                "return": "Group",
                "desc": "返回玩家player可解放（非上级召唤用）的卡片组， use_hand=true 则包括手卡  \n"
            }
        ]
    },
    "CheckWithSumGreater": {
        "function": [
            {
                "name": "Group.CheckWithSumGreater(Group g, function f, int sum, ...)",
                "return": "bool",
                "desc": "子集求和判定函数之二，f为返回一个interger值的函数  \n检查卡片组g中是否存在一个子集满足以f对子集的每一个元素求值的和刚好大于或者等于sum，从第4个参数开始为额外参数  \n比如：g:CheckWithSumGreater(Card.GetRitualLevel,8)  \n\t检查g中是否存在一个子集满足子集的仪式用等级之和大于等于8  \n\t注：判定必须是“刚好”大于或者等于  \n\t以等级为例，要使等级合计大于等于8，可以选择LV1+LV7而不可以选择LV1+LV4+LV4(在这些选择都满足的情况下)  \n"
            }
        ]
    },
    "GetAttribute": {
        "function": [
            {
                "name": "Card.GetAttribute(Card c)",
                "return": "int",
                "desc": "返回c的当前属性  \n注：对某些多属性怪兽如光与暗之龙，此函数的返回值可能是几个属性的组合值  \n"
            }
        ]
    },
    "EquipComplete": {
        "function": [
            {
                "name": "Duel.EquipComplete()",
                "return": "void",
                "desc": "在调用Duel.Equip时，若is_step参数为true，则需调用此函数触发时点  \n"
            }
        ]
    },
    "GetCoinResult": {
        "function": [
            {
                "name": "Duel.GetCoinResult()",
                "return": "int,int,int,int,int",
                "desc": "返回当前投硬币的结果  \n"
            }
        ]
    },
    "GetMultiLinkedZone": {
        "function": [
            {
                "name": "aux.GetMultiLinkedZone(int tp)",
                "return": "bool",
                "desc": "获取玩家 tp 场上被2个以上链接标记指向的区域。比如那几只守护龙  \n"
            }
        ]
    },
    "GetSummonPlayer": {
        "function": [
            {
                "name": "Card.GetSummonPlayer(Card c)",
                "return": "int",
                "desc": "返回召唤/特殊召唤 c 上场的玩家  \n"
            }
        ]
    },
    "IsSynchroType": {
        "function": [
            {
                "name": "Card.IsSynchroType(Card c, int type)",
                "return": "bool",
                "desc": "检查c用作同调素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n"
            }
        ]
    },
    "GetSynchroType": {
        "function": [
            {
                "name": "Card.GetSynchroType(Card c)",
                "return": "int",
                "desc": "返回c用作同调素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n"
            }
        ]
    },
    "bdgcon": {
        "function": [
            {
                "name": "aux.bdgcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING,并且战斗破坏对方怪兽送去墓地 的 condition  \nfunction Auxiliary.bdgcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\tlocal bc=c:GetBattleTarget()  \n\treturn c:IsRelateToBattle() and bc:IsLocation(LOCATION_GRAVE) and bc:IsType(TYPE_MONSTER)  \nend  \n"
            }
        ]
    },
    "ChangeTargetCard": {
        "function": [
            {
                "name": "Duel.ChangeTargetCard(int chainc, Group g)",
                "return": "void",
                "desc": "把连锁chainc的对象换成g  \nchainc=0 表示当前效果  \n"
            }
        ]
    },
    "IsCanBeXyzMaterial": {
        "function": [
            {
                "name": "Card.IsCanBeXyzMaterial(Card c, Card sc|nil)",
                "return": "bool",
                "desc": "检查c是否可以成为[超量怪兽sc的]超量素材,没有指定sc的场合，必须填nil  \n"
            }
        ]
    },
    "IsLevel": {
        "function": [
            {
                "name": "Card.IsLevel(Card c, int level1[, int level2,...])",
                "return": "bool",
                "desc": "检查c是否是等级 level1[, 或者为 level2...]  \n"
            }
        ]
    },
    "IsLevelBelow": {
        "function": [
            {
                "name": "Card.IsLevelBelow(Card c, int level)",
                "return": "bool",
                "desc": "检查c是否是等级level以下（至少为1）  \n"
            }
        ]
    },
    "GetDestination": {
        "function": [
            {
                "name": "Card.GetDestination(Card c)",
                "return": "int",
                "desc": "返回c位置变化的目的地  \n此函数仅在处理位置转移代替效果时有效  \n"
            }
        ]
    },
    "MustMaterialCheck": {
        "function": [
            {
                "name": "aux.MustMaterialCheck(Card|Group value, int player , int code)",
                "return": "bool",
                "desc": "检查 value 中是否有 player 受到效果种类 code 影响的卡或者卡片组  \n目前代码中涉及的code有 EFFECT_MUST_BE_SMATERIAL, EFFECT_MUST_BE_XMATERIAL, EFFECT_MUST_BE_FMATERIAL, EFFECT_MUST_BE_LMATERIAL ,都是 必须成为素材的检测  \n"
            }
        ]
    },
    "IsAttribute": {
        "function": [
            {
                "name": "Card.IsAttribute(Card c, int attribute)",
                "return": "bool",
                "desc": "检查c是否属于属性attribute  \n"
            }
        ]
    },
    "Damage": {
        "function": [
            {
                "name": "Duel.Damage(int player, int value, int reason[, bool is_step=false])",
                "return": "int",
                "desc": "以reason原因给与玩家player造成value的伤害，返回实际收到的伤害值  \n如果受到伤害变成回复等效果的影响时，返回值为0.  \nis_step为true则是伤害/恢复LP过程的分解，需要调用Duel.RDComplete()触发时点  \n"
            }
        ]
    },
    "Overlay": {
        "function": [
            {
                "name": "Duel.Overlay(Card c, Card|Group ocard)",
                "return": "void",
                "desc": "把ocard作为c的叠放卡叠放  \n"
            }
        ]
    },
    "GetRightScale": {
        "function": [
            {
                "name": "Card.GetRightScale(Card c)",
                "return": "int",
                "desc": "返回c的右灵摆刻度  \n"
            }
        ]
    },
    "IsHasEffect": {
        "function": [
            {
                "name": "Card.IsHasEffect(Card c, int code[, int check_player])",
                "return": "...",
                "desc": "检查c是否受到效果种类是code的效果的影响  \n没有则返回nil  \n有则返回那些效果  \n"
            }
        ]
    },
    "GetValueType": {
        "function": [
            {
                "name": "aux.GetValueType(any value)",
                "return": "Card|Group|Effect|int|bool|string|nil|function|table|any",
                "desc": "返回 value 在lua中的type  \n"
            }
        ]
    },
    "IsAbleToDeckOrExtraAsCost": {
        "function": [
            {
                "name": "Card.IsAbleToDeckOrExtraAsCost(Card c)",
                "return": "bool",
                "desc": "检查c是否可以作为cost送去卡组或额外卡组（用于新宇侠、剑斗兽融合怪兽的召唤手续检测）等价于 (c:IsAbleToDeckAsCost() or c:IsAbleToExtraAsCost())  \n"
            }
        ]
    },
    "Sub": {
        "function": [
            {
                "name": "Group.Sub(Group g1, Group g2)",
                "return": "void",
                "desc": "从g1中移除属于g2中的卡  \n注：g2本身不会发生变化  \n"
            }
        ]
    },
    "SetTurnCounter": {
        "function": [
            {
                "name": "Card.SetTurnCounter(Card c, int ct)",
                "return": "void",
                "desc": "设置c的回合计数器为 ct （光之护封剑等）  \n"
            }
        ]
    },
    "GetBaseAttack": {
        "function": [
            {
                "name": "Card.GetBaseAttack(Card c)",
                "return": "int",
                "desc": "返回c的原本攻击力  \n"
            }
        ]
    },
    "IsHasType": {
        "function": [
            {
                "name": "Effect.IsHasType(Effect e, int type)",
                "return": "bool",
                "desc": "检查效果e是否属于类型type  \n"
            }
        ]
    },
    "SelectMatchingCard": {
        "function": [
            {
                "name": "Duel.SelectMatchingCard(int sel_player, function f|nil, int player, int s, int o, int min, int max, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "过滤函数，让玩家sel_player选择以player来看的指定位置满足过滤条件f并且不等于ex的min-max张卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n第9个参数开始为额外参数  \n"
            }
        ]
    },
    "TuneMagicianCheckX": {
        "function": [
            {
                "name": "aux.TuneMagicianCheckX(Card c, Group sg, Effect e)",
                "return": "function",
                "desc": "调弦之魔术师(73941492)专用  \n"
            }
        ]
    },
    "GetPreviousPosition": {
        "function": [
            {
                "name": "Card.GetPreviousPosition(Card c)",
                "return": "int",
                "desc": "返回c位置变化前的表示形式  \n"
            }
        ]
    },
    "SelectSynchroMaterial": {
        "function": [
            {
                "name": "Duel.SelectSynchroMaterial(int player, Card c, function f1|nil, function f2|nil, int min, int max[, Card smat|nil, Group mg|nil])",
                "return": "Group",
                "desc": "让玩家player从场上[或mg中]选择用于同调c需要的[必须包含smat在内（如果有mg~=nil则忽略此参数）]满足条件的一组素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \nf1,f2 之中，至少有一种为调整的条件  \n"
            }
        ]
    },
    "AddRitualProcEqual2Code2": {
        "function": [
            {
                "name": "aux.AddRitualProcEqual2Code2(Card c, int code1, int code2, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤手续  \ncode1,code2 为仪式怪兽卡号，素材的等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1,code2)  \n\taux.AddRitualProcEqual2(c,aux.FilterBoolFunction(Card.IsCode,code1,code2),summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "GetFieldID": {
        "function": [
            {
                "name": "Card.GetFieldID(Card c)",
                "return": "int",
                "desc": "返回c转移到当前位置的时间标识  \n此数值唯一，越小表示c是越早出现在那个位置  \n卡片从里侧翻开也会改变此数值  \n"
            },
            {
                "name": "Effect.GetFieldID(Effect e)",
                "return": "int",
                "desc": "获取效果e的id  \n"
            }
        ]
    },
    "IsUnionState": {
        "function": [
            {
                "name": "aux.IsUnionState(Effect e)",
                "return": "bool",
                "desc": "检查同盟怪兽e:GetHandler()是否处于同盟装备的状态（用于效果的Condition属性）  \n"
            }
        ]
    },
    "NonTuner": {
        "function": [
            {
                "name": "aux.NonTuner(function f, ...)",
                "return": "function",
                "desc": "用于过滤满足单一过滤条件 f 的调整以外的卡，,返回的是一个 有 bool 返回值类型的 函数，只要求是 调整以外的怪兽的话，就写 aux.NonTuner(nil)  \n第2个参数开始为额外参数  \n"
            }
        ]
    },
    "dogcon": {
        "function": [
            {
                "name": "aux.dogcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 e:GetHandler() 是否是被对方破坏送去墓地 SetCondition  \nfunction Auxiliary.dogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:GetPreviousControler()==tp and c:IsReason(REASON_DESTROY) and rp==1-tp  \nend  \n"
            }
        ]
    },
    "AddRitualProcGreater2Code2": {
        "function": [
            {
                "name": "aux.AddRitualProcGreater2Code2(Card c, int code1, int code2, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤手续  \ncode1,code2 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1,code2)  \n\taux.AddRitualProcGreater2(c,aux.FilterBoolFunction(Card.IsCode,code1,code2),Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "GetRank": {
        "function": [
            {
                "name": "Card.GetRank(Card c)",
                "return": "int",
                "desc": "返回c的当前阶级  \n"
            }
        ]
    },
    "IsPlayerCanSpecialSummonCount": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSpecialSummonCount(int player, int count)",
                "return": "bool",
                "desc": "检查玩家player能否特殊召唤count次  \n"
            }
        ]
    },
    "CopyEffect": {
        "function": [
            {
                "name": "Card.CopyEffect(Card c, int code, int reset_flag[, int reset_count=1])",
                "return": "int",
                "desc": "为c添加卡号是code的卡的可复制的效果，并且添加额外的reset条件  \n返回值是表示复制效果的代号id  \n"
            }
        ]
    },
    "IsAbleToRemoveAsCost": {
        "function": [
            {
                "name": "Card.IsAbleToRemoveAsCost(Card c[, int pos=POS_FACEUP])",
                "return": "bool",
                "desc": "检查c是否可以[以 pos 表示形式]作为cost除外  \n"
            }
        ]
    },
    "IsDisabled": {
        "function": [
            {
                "name": "Card.IsDisabled(Card c)",
                "return": "bool",
                "desc": "检查c是否处于无效状态  \n"
            }
        ]
    },
    "IsAbleToChangeControler": {
        "function": [
            {
                "name": "Card.IsAbleToChangeControler(Card c)",
                "return": "bool",
                "desc": "检查c是否可以改变控制权  \n注：仅当卡收到了“不能改变控制权”的效果的影响时，此函数返回false  \n"
            }
        ]
    },
    "TargetEqualFunction": {
        "function": [
            {
                "name": "Auxiliary.TargetEqualFunction(function f, any value, ...)",
                "return": "function",
                "desc": "一般用在效果注册里,返回的是一个 有 bool 返回值类型的 函数，第3个参数开始为额外参数  \nfunction Auxiliary.TargetEqualFunction(f,value,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(effect,target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))==value  \n\t\t\tend  \nend  \n"
            }
        ]
    },
    "RaiseSingleEvent": {
        "function": [
            {
                "name": "Duel.RaiseSingleEvent(Card eg, int code, Effect re, int r, int rp, int ep, int ev)",
                "return": "void",
                "desc": "以eg,ep,ev,re,r,rp为卡片ec触发一个单体时点 code  \n"
            }
        ]
    },
    "SetUnionState": {
        "function": [
            {
                "name": "aux.SetUnionState(Card c)",
                "return": "void",
                "desc": "为c添加同盟怪兽属性  \n"
            }
        ]
    },
    "RitualUltimateFilter": {
        "function": [
            {
                "name": "aux.RitualUltimateFilter(Card c, function filter, Effect e, int tp, Group m1, Group m2, function level_function, string greater_or_equal, bool chk)",
                "return": "bool",
                "desc": "仪式素材检测。检测 m1 和 m2 中是否存在满足条件的用于仪式召唤 c 的素材。m1 必须要有  \nfilter 为仪式怪兽满足的条件， level_function 表示仪式召唤要满足的等级(返回值为int类型的函数)  \ngreater_or_equal 的值只有 \"Greater\" 和 \"Equal\"  \nchk 这个参数似乎不是必须要有  \n"
            }
        ]
    },
    "exccon": {
        "function": [
            {
                "name": "aux.exccon(Effect e)",
                "return": "bool",
                "desc": "这张卡送去墓地的回合 不能发动这个效果 的简单写法 SetCondition  \nfunction Auxiliary.exccon(e)  \n\treturn Duel.GetTurnCount()~=e:GetHandler():GetTurnID() or e:GetHandler():IsReason(REASON_RETURN)  \nend  \n"
            }
        ]
    },
    "ConfirmExtratop": {
        "function": [
            {
                "name": "Duel.ConfirmExtratop(int player, int count)",
                "return": "void",
                "desc": "确认玩家player额外卡组里侧的卡 最上方count张卡  \n"
            }
        ]
    },
    "IsAbleToExtraAsCost": {
        "function": [
            {
                "name": "Card.IsAbleToExtraAsCost(Card c)",
                "return": "bool",
                "desc": "检查c是否可以作为cost送去额外卡组，主卡组的灵摆卡会返回false  \n"
            }
        ]
    },
    "AddCustomActivityCounter": {
        "function": [
            {
                "name": "Duel.AddCustomActivityCounter(int counter_id, int activity_type, function f)",
                "return": "void",
                "desc": "设置操作类型为activity_type、代号为counter_id的计数器，放在initial_effect函数内  \nf为过滤函数，以Card类型为参数，返回值为false的卡片进行以下类型的操作，计数器增加1（目前最多为1）  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的set）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的set）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_CHAIN          =7\t--发动效果  \n"
            }
        ]
    },
    "PreEquip": {
        "function": [
            {
                "name": "Debug.PreEquip(Card equip_card, Card target)",
                "return": "bool",
                "desc": "为target添加装备equip_card ，返回值表示是否成功  \n"
            }
        ]
    },
    "IsPlayerCanSummon": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSummon(int player[, int sumtype, Card c])",
                "return": "bool",
                "desc": "检查玩家player是否可以通常召唤[c，以sumtype方式]  \n如果需要可选参数，则必须全部使用  \n仅当玩家受到“不能召唤”等效果的影响时返回false  \n"
            }
        ]
    },
    "ShuffleHand": {
        "function": [
            {
                "name": "Duel.ShuffleHand(int player)",
                "return": "void",
                "desc": "手动洗切玩家player的手卡  \n注：会重置洗卡检测的状态  \n"
            }
        ]
    },
    "AddCodeList": {
        "function": [
            {
                "name": "aux.AddCodeList(Card c, int code1[, ...])",
                "return": "void",
                "desc": "为卡片 c 添加卡名记述  \n"
            }
        ]
    },
    "IsDirectAttacked": {
        "function": [
            {
                "name": "Card.IsDirectAttacked(Card c)",
                "return": "bool",
                "desc": "检查c是否直接攻击过  \n"
            }
        ]
    },
    "CheckFusionMaterial": {
        "function": [
            {
                "name": "Card.CheckFusionMaterial(Card c[, Group mg|nil, Card gc|nil, int chkf=PLAYER_NONE, int not_material=FALSE])",
                "return": "bool",
                "desc": "检查场上[或mg]是否包含了c需要[必须包含gc在内]的一组融合素材  \n##根据c的种类为EFFECT_FUSION_MATERIAL的效果的Condition函数检查  \n"
            }
        ]
    },
    "SelectWithSumGreater": {
        "function": [
            {
                "name": "Group.SelectWithSumGreater(Group g, int player, function f, int sum, ...)",
                "return": "Group",
                "desc": "让玩家player从卡片组g中选取一个子集使子集的特定函数f的和刚好大于等于sum，从第5个参数开始为额外参数  \n"
            }
        ]
    },
    "IsAbleToHandAsCost": {
        "function": [
            {
                "name": "Card.IsAbleToHandAsCost(Card c)",
                "return": "bool",
                "desc": "检查c是否可以作为cost送去手牌  \n注：此函数会在Card.IsAbleToHand的基础上追加检测c的实际目的地  \n当c送往手牌会被送去其它地方时（如缩退回路适用中，或者c是融合、同调 等额外怪兽的一种），此函数返回false  \n##以下几个函数类似  \n"
            }
        ]
    },
    "ChangeTargetPlayer": {
        "function": [
            {
                "name": "Duel.ChangeTargetPlayer(int chainc, in player)",
                "return": "void",
                "desc": "把连锁chainc的对象玩家换成player  \nchainc=0 表示当前效果  \n"
            }
        ]
    },
    "IsCanBeBattleTarget": {
        "function": [
            {
                "name": "Card.IsCanBeBattleTarget(Card c1, Card c2)",
                "return": "bool",
                "desc": "检查c1是否可以成为c2的攻击目标  \n"
            }
        ]
    },
    "SwapDeckAndGrave": {
        "function": [
            {
                "name": "Duel.SwapDeckAndGrave(int player)",
                "return": "void",
                "desc": "现世与冥界的逆转专用。把玩家player的卡组和墓地交换  \n"
            }
        ]
    },
    "CreateGroup": {
        "function": [
            {
                "name": "Group.CreateGroup()",
                "return": "Group",
                "desc": "新建一个空的卡片组  \n"
            }
        ]
    },
    "GetOriginalRace": {
        "function": [
            {
                "name": "Card.GetOriginalRace(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的种族  \n"
            }
        ]
    },
    "MoveSequence": {
        "function": [
            {
                "name": "Duel.MoveSequence(Card c, int seq)",
                "return": "void",
                "desc": "移动c的序号，通常用于在场上换格子或者在卡组中移动到最上方或者最下方  \n比如对卡组中的 c 使用这个 Duel.MoveSequence(c,1), 就是把卡片 c 放到卡组最下面  \n"
            }
        ]
    },
    "IsLinkSummonable": {
        "function": [
            {
                "name": "Card.IsLinkSummonable(Card c, Group mg|nil[, Card lcard, minc=0, maxc=0])",
                "return": "bool",
                "desc": "检查是否可以用[包含卡 lcard 的]场上[或mg]的卡[中选出 minc-maxc 个连接素材]对c进行连接召唤手续  \n如果mg为nil，并且没有 lcard，则此函数与 c:IsSpecialSummonable(SUMMON_TYPE_LINK)作用相同  \nc 如果不是连接会返回 false  \n"
            }
        ]
    },
    "IsActivated": {
        "function": [
            {
                "name": "Effect.IsActivated(Effect e)",
                "return": "bool",
                "desc": "检查效果e能否是发动的效果，也就是以下类型  \nEFFECT_TYPE_ACTIVATE\t\t=0x0010\t\t--魔陷发动  \nEFFECT_TYPE_FLIP\t\t\t=0x0020\t\t--翻转效果  \nEFFECT_TYPE_IGNITION\t\t=0x0040\t\t--起动效果  \nEFFECT_TYPE_TRIGGER_O\t\t=0x0080\t\t--诱发选发效果  \nEFFECT_TYPE_QUICK_O\t\t\t=0x0100\t\t--诱发即时效果  \nEFFECT_TYPE_TRIGGER_F\t\t=0x0200\t\t--诱发必发效果  \nEFFECT_TYPE_QUICK_F\t\t\t=0x0400\t\t--诱发即时必发效果（熊猫龙等）  \n"
            }
        ]
    },
    "IsAllColumn": {
        "function": [
            {
                "name": "Card.IsAllColumn(Card c)",
                "return": "bool",
                "desc": "检查与c同一纵列的区域是否全都有卡  \n"
            }
        ]
    },
    "GetPreviousRankOnField": {
        "function": [
            {
                "name": "Card.GetPreviousRankOnField(Card c)",
                "return": "int",
                "desc": "返回c位置变化之前在场上的阶级  \n"
            }
        ]
    },
    "Select": {
        "function": [
            {
                "name": "Group.Select(Group g, int player, int min, int max, Card|Group ex|nil)",
                "return": "Group",
                "desc": "让玩家player从卡片组g中选择min-max张不等于ex的卡  \n"
            }
        ]
    },
    "GetBaseDefense": {
        "function": [
            {
                "name": "Card.GetBaseDefense(Card c)",
                "return": "int",
                "desc": "返回c的原本守备力  \n"
            }
        ]
    },
    "GetFirstTarget": {
        "function": [
            {
                "name": "Duel.GetFirstTarget()",
                "return": "Card,...",
                "desc": "返回当前连锁的所有的对象卡，一般只有一个对象时使用  \n##多个对象也能使用，剩下的对象依次按顺序返回，但是很容易记错对象的顺序，所以不建议对多个对象使用  \n"
            }
        ]
    },
    "SetUniqueOnField": {
        "function": [
            {
                "name": "Card.SetUniqueOnField(Card c, int s, int o, function|int unique_code[, int unique_location=LOCATIOIN_ONFIELD])",
                "return": "void",
                "desc": "设置c以unique_code只能在场上[或怪兽区域或魔陷区域，由unique_location决定]只能存在1张,function 的返回值类型必须是int  \ns不为0会检查自己场上的唯一性，o不为0则检查对方场上的唯一性  \n"
            }
        ]
    },
    "AddRitualProcGreater2Code": {
        "function": [
            {
                "name": "aux.AddRitualProcGreater2Code(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤手续  \ncode1 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcGreater2(c,aux.FilterBoolFunction(Card.IsCode,code1),Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "IsDamageCalculated": {
        "function": [
            {
                "name": "Duel.IsDamageCalculated()",
                "return": "bool",
                "desc": "用于在伤害阶段检查是否已经计算了战斗伤害  \n"
            }
        ]
    },
    "GetOperation": {
        "function": [
            {
                "name": "Effect.GetOperation(Effect e)",
                "return": "function",
                "desc": "返回效果 e 的operation属性  \n"
            }
        ]
    },
    "Hint": {
        "function": [
            {
                "name": "Duel.Hint(int hint_type, int player, int desc)",
                "return": "void",
                "desc": "给玩家player发送hint_type类型的消息提示，提示内容为desc  \n#hint_type只能为以下类型：  \n#HINT_SELECTMSG\t\t将提示内容写入缓存，用于选择卡片的提示，例如Duel.SelectMatchingCard等  \n#HINT_OPSELECTED\t向player提示“对方选择了：...”，常用于向对方玩家提示选择发动了什么效果  \n#HINT_CARD\t\t\t此时desc应为卡号，手动显示卡片发动的动画，常用于提示不入连锁的处理  \n#HINT_RACE\t\t\t此时desc应为种族，向player提示“对方宣言了：...”种族  \n#HINT_ATTRIB\t\t此时desc应为属性，向player提示“对方宣言了：...”属性  \n#HINT_CODE\t\t\t此时desc应为卡号，向player提示“对方宣言了：...”卡片  \n#HINT_NUMBER\t\t此时desc视为单纯的数字，向player提示“对方选择了：...”数字  \n#HINT_MESSAGE\t\t弹出一个对话框显示信息  \n#HINT_EVENT\t\t\t将提示内容写入缓存，用于时点的提示信息（诱发即时效果的提示）  \n#HINT_EFFECT\t\t同HINT_CARD  \n"
            }
        ]
    },
    "GetBattledGroup": {
        "function": [
            {
                "name": "Card.GetBattledGroup(Card c)",
                "return": "Group",
                "desc": "返回与c本回合进行过战斗的卡片组  \n进行过战斗指发生过伤害的计算，用于剑斗兽等卡的判定  \n"
            }
        ]
    },
    "IsForbidden": {
        "function": [
            {
                "name": "Card.IsForbidden(Card c)",
                "return": "bool",
                "desc": "检查c是否处于被宣言禁止状态  \n"
            }
        ]
    },
    "tgoval": {
        "function": [
            {
                "name": "aux.tgoval(Effect e, Effect re, int rp)",
                "return": "bool",
                "desc": "不会成为对方的卡的效果对象的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.tgoval(e,re,rp)  \n\treturn rp==1-e:GetHandlerPlayer()  \nend  \n"
            }
        ]
    },
    "GetCost": {
        "function": [
            {
                "name": "Effect.GetCost(Effect e)",
                "return": "function",
                "desc": "返回效果 e 的cost属性  \n"
            }
        ]
    },
    "GetMaxGroup": {
        "function": [
            {
                "name": "Group.GetMaxGroup(Group g, function f, ...)",
                "return": "Group,int",
                "desc": "f为返回一个interger值的函数，从g中筛选出具有最大的f的值的卡  \n第2个返回值为这个最大值，从第3个参数开始为额外参数  \n要使用第2个返回值注意检查g非空  \n"
            }
        ]
    },
    "IsAbleToGraveAsCost": {
        "function": [
            {
                "name": "Card.IsAbleToGraveAsCost(Card c)",
                "return": "bool",
                "desc": "检查c是否可以作为cost送去墓地  \n"
            }
        ]
    },
    "SelectSubGroup": {
        "function": [
            {
                "name": "Group.SelectSubGroup(Group g, int tp, function f, bool cancelable, int min=1, int max=#g, ...)",
                "return": "Group",
                "desc": "从卡片组 g 中选一个满足 过滤条件 f，并且数量在 min-max 的子集， cancelable 表示是否可以取消操作  \nf 的函数原型为  \nfunction f(Group sg,...) end  \n"
            }
        ]
    },
    "AddRitualProcEqual": {
        "function": [
            {
                "name": "aux.AddRitualProcEqual(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和必须等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetOriginalLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "GetBattledGroupCount": {
        "function": [
            {
                "name": "Card.GetBattledGroupCount(Card c)",
                "return": "int",
                "desc": "返回与c本回合进行过战斗的的卡片数量  \n"
            }
        ]
    },
    "IsAbleToEnterBP": {
        "function": [
            {
                "name": "Duel.IsAbleToEnterBP()",
                "return": "bool",
                "desc": "检查回合玩家能否进入战斗阶段  \n"
            }
        ]
    },
    "GetDefense": {
        "function": [
            {
                "name": "Card.GetDefense(Card c)",
                "return": "int",
                "desc": "返回c的当前守备力  \n"
            }
        ]
    },
    "SetSelectedCard": {
        "function": [
            {
                "name": "Duel.SetSelectedCard(Card|Group targets)",
                "return": "void",
                "desc": "将 targets 设置为必须选择的卡（？）  \n"
            }
        ]
    },
    "IsCanBeSynchroMaterial": {
        "function": [
            {
                "name": "Card.IsCanBeSynchroMaterial(Card c[, Card sc, Card tuner])",
                "return": "bool",
                "desc": "检查c是否可以成为[以 tuner 为调整的同调怪兽sc的]同调素材  \n"
            }
        ]
    },
    "IsLinkState": {
        "function": [
            {
                "name": "Card.IsLinkState(Card c)",
                "return": "bool",
                "desc": "检查c是否是连接状态  \n"
            }
        ]
    },
    "IsSummonable": {
        "function": [
            {
                "name": "Card.IsSummonable(Card c, bool ignore_count, Effect e|nil[, int minc=0, int zone=0x1f])",
                "return": "bool",
                "desc": "检查c是否可以进行通常召唤（不包含通常召唤的set)，ignore_count=true则不检查召唤次数限制  \ne~=nil则检查c是否可以以效果e进行通常召唤，minc 表示至少需要的祭品数（用于区分妥协召唤与上级召唤）,zone 表示必须要召唤到的区域  \n"
            }
        ]
    },
    "SelectFusionMaterial": {
        "function": [
            {
                "name": "Duel.SelectFusionMaterial(int player, Card c, Group g[, Card gc|nil, int chkf=PLAYER_NONE])",
                "return": "Group",
                "desc": "让玩家player从g中选择一组[必须包含gc在内的]融合怪兽c的融合素材  \n##根据c的种类为EFFECT_FUSION_MATERIAL的效果的Operation操作  \n"
            }
        ]
    },
    "IsXyzLevel": {
        "function": [
            {
                "name": "Card.IsXyzLevel(Card c, Card xyzc, int lv)",
                "return": "bool",
                "desc": "检查c对于超量怪兽xyzc的超量用等级是否是lv  \n"
            }
        ]
    },
    "GetSequence": {
        "function": [
            {
                "name": "Card.GetSequence(Card c)",
                "return": "int",
                "desc": "返回c在当前位置的序号  \n在场上时，序号代表所在的格子，从左往右分别是0-4，场地魔法格的序号为5，左右灵摆区域为6-7  \n在其它地方时，序号表示的是第几张卡，最下面的卡的序号为0  \n"
            }
        ]
    },
    "ConfirmDecktop": {
        "function": [
            {
                "name": "Duel.ConfirmDecktop(int player, int count)",
                "return": "void",
                "desc": "确认玩家player卡组最上方count张卡  \n"
            }
        ]
    },
    "IsCanBeEffectTarget": {
        "function": [
            {
                "name": "Card.IsCanBeEffectTarget(Card c[, Effect e])",
                "return": "bool",
                "desc": "检查c是否可以成为效果[e的]对象  \n"
            }
        ]
    },
    "ResetNegateEffect": {
        "function": [
            {
                "name": "Card.ResetNegateEffect(Card c[, int code1,...])",
                "return": "void",
                "desc": "重置c受到的卡号为code1[, code2...]的卡片的效果的影响  \n"
            }
        ]
    },
    "AddRitualProcGreaterCode": {
        "function": [
            {
                "name": "aux.AddRitualProcGreaterCode(Card c, int code1, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果。会默认把 code1 添加到 c 的 codelist  \ncode1 为仪式怪兽卡号，素材的仪式等级之和要 刚好 大于或者等于仪式怪兽的原本等级  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：  \n\taux.AddCodeList(c,code1)  \n\taux.AddRitualProcGreater(c,aux.FilterBoolFunction(Card.IsCode,code1),summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "FilterSelect": {
        "function": [
            {
                "name": "Group.FilterSelect(Group g, int player, function f, int min, int max, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "过滤函数，让玩家player从卡片组g中选择 min-max 张满足筛选条件f并且不等于ex的卡  \n从第7个参数开始为额外参数  \n"
            }
        ]
    },
    "AssumeProperty": {
        "function": [
            {
                "name": "Card.AssumeProperty(Card c,int assume_type, int assume_value)",
                "return": "void",
                "desc": "把c的assume_type的数值当作assume_value使用（基因组斗士）  \nassume_type为以下类型  \nASSUME_CODE         卡号  \nASSUME_TYPE         类型  \nASSUME_LEVEL        等级  \nASSUME_RANK         阶级  \nASSUME_ATTRIBUTE    属性  \nASSUME_RACE         种族  \nASSUME_ATTACK       攻击力  \nASSUME_DEFENSE      守备力  \n"
            }
        ]
    },
    "SetCost": {
        "function": [
            {
                "name": "Effect.SetCost(Effect e, function cost_func)",
                "return": "void",
                "desc": "设置效果 e 的Cost属性  \n"
            }
        ]
    },
    "GetOriginalRightScale": {
        "function": [
            {
                "name": "Card.GetOriginalRightScale(Card c)",
                "return": "int",
                "desc": "返回c的原本的右灵摆刻度  \n"
            }
        ]
    },
    "GetLeftScale": {
        "function": [
            {
                "name": "Card.GetLeftScale(Card c)",
                "return": "int",
                "desc": "返回c的左灵摆刻度  \n"
            }
        ]
    },
    "IsDefenseAbove": {
        "function": [
            {
                "name": "Card.IsDefenseAbove(Card c, int def)",
                "return": "bool",
                "desc": "检查c是否是守备力def以上  \n"
            }
        ]
    },
    "RaiseEvent": {
        "function": [
            {
                "name": "Duel.RaiseEvent(Group|Card eg, int code, Effect re, int r, int rp, int ep, int ev)",
                "return": "void",
                "desc": "以eg,ep,ev,re,r,rp触发一个时点 code  \n"
            }
        ]
    },
    "AddFusionProcMixRep": {
        "function": [
            {
                "name": "aux.AddFusionProcMixRep(Card c, bool sub, bool insf, (function f1)|(int code1), int minc, int maxc, ...)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用满足f1 的怪兽 minc-maxc 只，和 额外参数里 各1只的怪兽为融合素材,  \n额外参数的类型 可以是 function 或者 卡密(int code)  \n"
            }
        ]
    },
    "IsControler": {
        "function": [
            {
                "name": "Card.IsControler(Card c, int controler)",
                "return": "bool",
                "desc": "检查c的当前控制着是否是controler  \n"
            }
        ]
    },
    "EnableCounterPermit": {
        "function": [
            {
                "name": "Card.EnableCounterPermit(Card c, int countertype[, int location, function filter])",
                "return": "void",
                "desc": "允许c[在位置location]放置[满足条件 filter 的]需要“可以放置”才能放置的指示物countertype  \nlocation的默认值与c的种类有关，灵摆怪兽需要指定能否在怪兽区域或灵摆区域放置指示物  \n"
            }
        ]
    },
    "IsLevelAbove": {
        "function": [
            {
                "name": "Card.IsLevelAbove(Card c, int level)",
                "return": "bool",
                "desc": "检查c是否是等级level以上  \n"
            }
        ]
    },
    "GetLeaveFieldDest": {
        "function": [
            {
                "name": "Card.GetLeaveFieldDest(Card c)",
                "return": "int",
                "desc": "返回c离场时因改变去向的效果（如大宇宙）的目的地  \n"
            }
        ]
    },
    "IsLinkAbove": {
        "function": [
            {
                "name": "Card.IsLinkAbove(Card c, int link)",
                "return": "bool",
                "desc": "检查c是否连接标记数量是link以上  \n"
            }
        ]
    },
    "GetRealFieldID": {
        "function": [
            {
                "name": "Card.GetRealFieldID(Card c)",
                "return": "int",
                "desc": "返回c转移到当前位置的真实的时间标识  \n卡片从里侧翻开不会改变此数值  \n"
            }
        ]
    },
    "SetAbsoluteRange": {
        "function": [
            {
                "name": "Effect.SetAbsoluteRange(Effect e, int playerid, int s_range, int o_range)",
                "return": "void",
                "desc": "设置效果 e 的target range属性并设置 EFFECT_FLAG_ABSOLUTE_TARGET 标志  \n\t如果 playerid != 0 ，s_range和o_range反转  \n"
            }
        ]
    },
    "IsSetCard": {
        "function": [
            {
                "name": "Card.IsSetCard(Card c, int setname)",
                "return": "bool",
                "desc": "检查c是否是卡名含有setname的卡  \n"
            }
        ]
    },
    "AdjustInstantly": {
        "function": [
            {
                "name": "Duel.AdjustInstantly([Card c])",
                "return": "void",
                "desc": "手动刷新场上[受到卡片c影响]的卡的无效状态  \n"
            }
        ]
    },
    "IsFacedown": {
        "function": [
            {
                "name": "Card.IsFacedown(Card c)",
                "return": "bool",
                "desc": "检查c是否是里侧表示  \n"
            }
        ]
    },
    "BeginPuzzle": {
        "function": [
            {
                "name": "aux.BeginPuzzle()",
                "return": "void",
                "desc": "开始残局  \n##此函数注册3个全局效果：  \n##回合结束时玩家的基本分变成0  \n##跳过玩家抽卡阶段与准备阶段  \n"
            }
        ]
    },
    "GetBattledCount": {
        "function": [
            {
                "name": "Duel.GetBattledCount(int player)",
                "return": "int",
                "desc": "返回玩家player这回合战斗过的次数   \n"
            }
        ]
    },
    "ChangePosition": {
        "function": [
            {
                "name": "Duel.ChangePosition(Card|Group targets, int au[, int ad=au, int du=au, int dd=au, bool noflip=false, bool setavailable=false])",
                "return": "int",
                "desc": "根据对应位置的参数改变targets里 对应形式 的表示形式。返回实际操作的数量。  \n若只有2个参数，则不管什么表示形式，都变成 第二个参数 代表的形式  \n表侧攻击表示 = au  \n里侧攻击表示 = ad  \n表侧守备表示 = du  \n里侧守备表示 = dd  \n如果noflip=true则不触发反转效果（但会触发反转时的诱发效果）  \n如果setavailable=true则对象之后变成里侧也发动反转效果  \n比如: Duel.ChangePosition(g,POS_FACEUP_DEFENSE,POS_FACEUP_DEFENSE,POS_FACEUP_ATTACK,POS_FACEUP_DEFENSE)  \n就表示 把卡片组g 中 原本(表侧攻击表示的卡 和 里侧攻击表示的卡 和 里侧守备表示的卡) 变成 表侧守备表示，  \n\t原本 表侧守备表示的卡 变成 表侧攻击表示  \n"
            }
        ]
    },
    "CheckEquipTarget": {
        "function": [
            {
                "name": "Card.CheckEquipTarget(Card c1, Card c2)",
                "return": "bool",
                "desc": "检查c2是否是c1的正确的装备对象  \n##由EFFECT_EQUIP_LIMIT效果或同盟状态确定  \n"
            }
        ]
    },
    "FilterEqualFunction": {
        "function": [
            {
                "name": "aux.FilterEqualFunction(function f, any value, ...)",
                "return": "function",
                "desc": "用于过滤满足单一过滤条件 f ,且值为 value 的卡,,返回的是一个 有 bool 返回值类型的 函数， 第3个参数开始为额外参数  \nfunction Auxiliary.FilterEqualFunction(f,value,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))==value  \n\t\t\tend  \nend  \n"
            }
        ]
    },
    "IsRelateToCard": {
        "function": [
            {
                "name": "Card.IsRelateToCard(Card c1, Card c2)",
                "return": "bool",
                "desc": "检查c1是否和c2有联系  \n"
            }
        ]
    },
    "CheckTribute": {
        "function": [
            {
                "name": "Duel.CheckTribute(Card c, int min[, int max=min, Group mg|nil, int toplayer=c:GetControler(), int zone=0x1f])",
                "return": "Group",
                "desc": "判断场上[或mg中]是否存在用于通常召唤c[到toplayer场上的区域 zone]的min[到max]个祭品  \n"
            }
        ]
    },
    "ReleaseRitualMaterial": {
        "function": [
            {
                "name": "Duel.ReleaseRitualMaterial(Group g)",
                "return": "void",
                "desc": "解放仪式用的素材g，如果是墓地的仪式魔人等卡则除外  \n"
            }
        ]
    },
    "GetTunerLimit": {
        "function": [
            {
                "name": "Card.GetTunerLimit(Card c)",
                "return": "void|Effect[,function,int,int,int]",
                "desc": "如果卡片 c 受到同调素材限制效果 EFFECT_TUNER_MATERIAL_LIMIT 影响，则返回 Effect e,function filter_target,int location,int min,int max ;否则返回nil  \ne 是有这个影响的效果  \nfilter_target 是过滤条件  \nlocation 是位置  \nmin,max 是数量  \n"
            }
        ]
    },
    "GetCardTargetCount": {
        "function": [
            {
                "name": "Card.GetCardTargetCount(Card c)",
                "return": "int",
                "desc": "返回c当前的永续对象的数量  \n"
            }
        ]
    },
    "GetOperationCount": {
        "function": [
            {
                "name": "Duel.GetOperationCount(int chainc)",
                "return": "int",
                "desc": "返回连锁chainc包含的操作分类的数量  \n"
            }
        ]
    },
    "IsLinkCode": {
        "function": [
            {
                "name": "Card.IsLinkCode(Card c, int code[,...])",
                "return": "bool",
                "desc": "检查c作为link素材时能否当作卡号为code的卡，额外参数是其他code  \n"
            }
        ]
    },
    "IsAttackable": {
        "function": [
            {
                "name": "Card.IsAttackable(Card c)",
                "return": "bool",
                "desc": "检查c是否可以攻击  \n"
            }
        ]
    },
    "GetHandler": {
        "function": [
            {
                "name": "Effect.GetHandler(Effect e)",
                "return": "Card",
                "desc": "返回效果 e 在哪一张卡上生效(通常是用Card.RegisterEffect注册该效果的卡)  \n"
            }
        ]
    },
    "SetTargetCard": {
        "function": [
            {
                "name": "Duel.SetTargetCard(Card|Group targets)",
                "return": "void",
                "desc": "把当前正在处理的连锁的对象设置成targets  \n注，这里的对象指的的广义的对象，包括不取对象的效果可能要处理的对象  \n"
            }
        ]
    },
    "Clone": {
        "function": [
            {
                "name": "Effect.Clone(Effect e)",
                "return": "Effect",
                "desc": "新建一个效果e的副本  \n"
            },
            {
                "name": "Group.Clone(Group g)",
                "return": "Group",
                "desc": "新建卡片组g的副本  \n"
            }
        ]
    },
    "IsAbleToRemove": {
        "function": [
            {
                "name": "Card.IsAbleToRemove(Card c[, int player, int pos=POS_FACEUP, int reason=REASON_EFFECT])",
                "return": "bool",
                "desc": "检查c是否可以被[玩家 player 以 pos 的表示形式,reason 原因]除外  \n"
            }
        ]
    },
    "SetOperationInfo": {
        "function": [
            {
                "name": "Duel.SetOperationInfo(int chainc, int category, Card|Group targets, int count, int target_player, int target_param)",
                "return": "void",
                "desc": "设置连锁 chainc 的操作信息此操作信息包含了效果处理中确定要处理的效果分类 chainc=0 表示当前连锁  \n比如潜行狙击手需要设置CATEGORY_DICE，但是不能设置CATEGORY_DESTROY，因为不确定  \n对于破坏效果，targets需要设置成发动时可能成为连锁的影响对象的卡，  \n并设置count为发动时确定的要处理的卡的数量  \n比如黑洞发动时，targets需要设定为场上的所有怪兽，count设置成场上的怪的数量  \n对于需要移动卡片位置的CATEGORY_SPECIAL_SUMMON,CATEGORY_TOHAND,CATEGORY_TODECK等分类，  \n如果要处理的卡是确定的（比如取对象），则设置targets为这些卡，count为数量，  \n如果要处理的卡是不确定的（效果处理时才能确定，一般是不取对象的效果），  \n\t则设置targets为nil，count为预计要处理的卡的数量，  \n\ttarget_player为预计要处理的卡的持有者（不确定就为0）  \n\ttarget_param为预计要处理的卡的位置  \n例如增援：SetOperationInfo(0,CATEGORY_TOHAND,nil,1,tp,LOCATION_DECK)  \n操作信息用于很多效果的发动的检测，例如星尘龙，王家长眠之谷等  \n--特别注意：如果 category 是 CATEGORY_DRAW ，那 target_param 代表要抽的数量。抽卡的效果通常要用到 Duel.SetTargetPlayer 和 Duel.SetTargetParam  \n例如 强欲之壶：   \n\tDuel.SetTargetPlayer(tp)  \n\tD uel.SetTargetParam(2)  \n\tDuel.SetOperationInfo(0,CATEGORY_DRAW,nil,0,tp,2)  \n"
            }
        ]
    },
    "GetLink": {
        "function": [
            {
                "name": "Card.GetLink(Card c)",
                "return": "int",
                "desc": "返回c的连接标记数量  \n"
            }
        ]
    },
    "AddMonsterAttribute": {
        "function": [
            {
                "name": "Card.AddMonsterAttribute(Card c, int type[, int attribute, int race, int level, int atk, int def])",
                "return": "void",
                "desc": "为魔陷卡c添加怪兽数值,type 为怪兽类型，不能是没有等级的怪兽  \n注：在数据库中有记录的数值视为原本数值  \n不再需要 Card.AddMonsterAttributeComplete(Card c)  \n"
            }
        ]
    },
    "Filter": {
        "function": [
            {
                "name": "Group.Filter(Group g, function f, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "过滤函数，从卡片组g中筛选满足筛选条件f并且不等于ex的卡  \n从第4个参数开始为额外参数  \n"
            }
        ]
    },
    "GetLinkMaterials": {
        "function": [
            {
                "name": "aux.GetLinkMaterials(int tp, function filter, Card lc)",
                "return": "Group",
                "desc": "获取玩家 tp 的 LOCATION_MZONE 里满足条件 f 的能作为卡片 lc 的连接素材的卡片组  \n"
            }
        ]
    },
    "Recover": {
        "function": [
            {
                "name": "Duel.Recover(int player, int value, int reason[, bool is_step=false])",
                "return": "int",
                "desc": "以reason原因使玩家player回复value的LP，返回实际的回复值  \n如果受到回复变成伤害等效果的影响时，返回值为0.  \nis_step为true则是伤害/恢复LP过程的分解，需要调用Duel.RDComplete()触发时点  \n"
            }
        ]
    },
    "bfgcost": {
        "function": [
            {
                "name": "aux.bfgcost(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp, int chk)",
                "return": "bool",
                "desc": "把这张卡除外 的过滤条件的简单写法，，用在效果注册的 cost 里  \nfunction Auxiliary.bfgcost(e,tp,eg,ep,ev,re,r,rp,chk)  \n\tif chk==0 then return e:GetHandler():IsAbleToRemoveAsCost() end  \n\tDuel.Remove(e:GetHandler(),POS_FACEUP,REASON_COST)  \nend  \n"
            }
        ]
    },
    "GetEquipCount": {
        "function": [
            {
                "name": "Card.GetEquipCount(Card c)",
                "return": "int",
                "desc": "返回c当前装备着的卡片数量  \n"
            }
        ]
    },
    "SelectTribute": {
        "function": [
            {
                "name": "Duel.SelectTribute(int player, Card c, int min, int max[, Group mg|nil, int toplayer=player])",
                "return": "Group",
                "desc": "让玩家player从场上[或mg中]选择用于通常召唤c的min-max个祭品，召唤到 toplayer 场上  \n"
            }
        ]
    },
    "GlobalEffect": {
        "function": [
            {
                "name": "Effect.GlobalEffect()",
                "return": "Effect",
                "desc": "新建一个全局效果  \n"
            }
        ]
    },
    "SetProperty": {
        "function": [
            {
                "name": "Effect.SetProperty(Effect e, int prop1[, int prop2])",
                "return": "void",
                "desc": "设置效果 e 的Property属性  \n"
            }
        ]
    },
    "GetValue": {
        "function": [
            {
                "name": "Effect.GetValue(Effect e)",
                "return": "function|int",
                "desc": "返回效果 e 的value属性  \n"
            }
        ]
    },
    "GetOriginalRank": {
        "function": [
            {
                "name": "Card.GetOriginalRank(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的阶级  \n"
            }
        ]
    },
    "GetOriginalLeftScale": {
        "function": [
            {
                "name": "Card.GetOriginalLeftScale(Card c)",
                "return": "int",
                "desc": "返回c的原本的左灵摆刻度  \n"
            }
        ]
    },
    "NecroValleyFilter": {
        "function": [
            {
                "name": "aux.NecroValleyFilter(function f)",
                "return": "function",
                "desc": "根据过滤条件f返回一个新的过滤条件：满足f并且没有受王家长眠之谷的影响的卡  \nfunction Auxiliary.NecroValleyFilter(f)  \n\treturn\tfunction(target,...)  \n\t\t\t\treturn f(target,...) and not (target:IsHasEffect(EFFECT_NECRO_VALLEY) and Duel.IsChainDisablable(0))  \n\t\t\tend  \nend  \n"
            }
        ]
    },
    "AnnounceLevel": {
        "function": [
            {
                "name": "Duel.AnnounceLevel(int player[, int min=1, int max=12, ...])",
                "return": "int",
                "desc": "让玩家宣言一个[min-max]等级并返回  \n第四个参数开始，表示要排除的等级  \n"
            }
        ]
    },
    "TossCoin": {
        "function": [
            {
                "name": "Duel.TossCoin(int player, int count)",
                "return": "int[,...]",
                "desc": "让玩家player投count(<=5)次硬币，返回值为count个结果，0或者1, 正面是 1，反面是 0  \n"
            }
        ]
    },
    "__sub": {
        "function": [
            {
                "name": "Group.__sub(Group|Card target1, Group|Card target2)",
                "return": "Group",
                "desc": "新建一个卡片组，将 target1 中的 全部卡添加到这个卡片组，然后再从这个卡片组把 target2 的卡全部删除，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n"
            }
        ]
    },
    "IsSynchroSummonable": {
        "function": [
            {
                "name": "Card.IsSynchroSummonable(Card c ,Card tuner|nil[, Group mg, int minc=0, int maxc=0])",
                "return": "bool",
                "desc": "检查是否可以以tuner作为调整，用场上[或mg][minc ~ maxc 张卡]为同调素材对c进行同调召唤手续  \n如果tuner是nil，此函数与Card.IsSpecialSummonable作用相同  \nc 如果不是同调会返回 false  \n"
            }
        ]
    },
    "SetTargetRange": {
        "function": [
            {
                "name": "Effect.SetTargetRange(Effect e, int s_range, int o_range)",
                "return": "void",
                "desc": "设置效果 e 的Target Range属性  \n\ts_range指影响的我方区域  \n\to_range值影响的对方区域  \n\t如果property属性中指定了EFFECT_FLAG_ABSOLUTE_RANGE标志，  \n\t\t那么s_range指玩家1受到影响的区域，o_range指玩家2受到影响的区域  \n\t如果这是一个召唤(覆盖)/限制召唤(覆盖)/特殊召唤手续  \n\t(EFFECT_SUMMON_PROC/EFFECT_LIMIT_SUMMON_PROC/EFFECT_SPSUMMON_PROC等)的效果，  \n\t\t并且property指定了EFFECT_FLAG_SPSUM_PARAM标志，  \n\t\t那么s_range表示特殊召唤到的哪个玩家的场地，  \n\to_range表示可选择的表示形式  \n"
            }
        ]
    },
    "IsLinkType": {
        "function": [
            {
                "name": "Card.IsLinkType(Card c, int type)",
                "return": "bool",
                "desc": "检查c用作连接素材时是否属于类型type（与IsType的区别在于对于魔陷区的怪兽卡，用其原本类型作判断）  \n"
            }
        ]
    },
    "IsStatus": {
        "function": [
            {
                "name": "Card.IsStatus(Card c, int status)",
                "return": "bool",
                "desc": "检查c是否包含某个状态码  \n"
            }
        ]
    },
    "MoveToField": {
        "function": [
            {
                "name": "Duel.MoveToField(Card c, int move_player, int target_player, int dest, int pos, bool enable[, int zone=0xff])",
                "return": "bool",
                "desc": "让玩家move_player把c移动的target_player的场上，返回值表示是否成功  \ndest只能是LOCATION_MZONE或者LOCATION_SZONE，pos表示可选表示形式， enable 表示是否立刻适用c的效果， zone 表示必须要放到的格子  \n"
            }
        ]
    },
    "nzatk": {
        "function": [
            {
                "name": "aux.nzatk(Card c)",
                "return": "bool",
                "desc": "攻击力不为0的表侧表示的怪兽的过滤函数的简单写法  \nfunction Auxiliary.nzatk(c)  \n\treturn c:IsFaceup() and c:GetAttack()>0  \nend  \n"
            }
        ]
    },
    "IsSSetable": {
        "function": [
            {
                "name": "Card.IsSSetable(Card c[, bool ignore_field=false])",
                "return": "bool",
                "desc": "检查c是否可以set到魔法陷阱区，ignore_field=true则无视魔陷区格子是否能使用的限制  \n"
            }
        ]
    },
    "ResetEffect": {
        "function": [
            {
                "name": "Card.ResetEffect(Card c, int reset_code, int reset_type)",
                "return": "void",
                "desc": "以重置类型为reset_type、重置种类为reset_code手动重置c受到的效果的影响  \nreset_type只能是以下类型，对应的重置种类为  \nRESET_EVENT       发生事件重置        reset_code为事件  \nRESET_PHASE       阶段结束重置        reset_code为阶段  \nRESET_CODE        重置指定code的效果  reset_code为效果的种类code，只能重置EFFECT_TYPE_SINGLE的永续型效果  \nRESET_COPY        重置复制的效果      reset_code为copy_id  \nRESET_CARD        重置卡片的效果      reset_code为效果owner的卡号  \n"
            }
        ]
    },
    "evospcon": {
        "function": [
            {
                "name": "aux.evospcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "进化龙通用效果(用「进化虫」怪兽的效果特殊召唤)的过滤条件的简单写法，用在效果注册里 SetCondition  \nfunction Auxiliary.evospcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal st=e:GetHandler():GetSummonType()  \n\treturn st>=(SUMMON_TYPE_SPECIAL+150) and st<(SUMMON_TYPE_SPECIAL+180)  \nend  \n"
            }
        ]
    },
    "DiscardHand": {
        "function": [
            {
                "name": "Duel.DiscardHand(int player, function f, int min, int max, int reason, Card|Group ex|nil, ...)",
                "return": "int",
                "desc": "过滤函数让玩家player选择并以reason原因丢弃满足筛选条件f并不等于ex的min-max张手卡  \n第7个参数开始为额外参数  \n"
            }
        ]
    },
    "SetType": {
        "function": [
            {
                "name": "Effect.SetType(Effect e, int type)",
                "return": "void",
                "desc": "为效果e设置Type属性  \nEFFECT_TYPE_SINGLE\t\t\t=0x0001\t\t--自己状态变化时触发  \nEFFECT_TYPE_FIELD\t\t\t=0x0002\t\t--场上所有卡状态变化时触发  \nEFFECT_TYPE_EQUIP\t\t\t=0x0004\t\t--装备效果  \nEFFECT_TYPE_ACTIONS\t\t\t=0x0008\t\t--触发型，以下類型會自動添加此屬性（对峙的G）  \nEFFECT_TYPE_ACTIVATE\t\t=0x0010\t\t--魔陷发动  \nEFFECT_TYPE_FLIP\t\t\t=0x0020\t\t--翻转效果  \nEFFECT_TYPE_IGNITION\t\t=0x0040\t\t--起动效果  \nEFFECT_TYPE_TRIGGER_O\t\t=0x0080\t\t--诱发选发效果  \nEFFECT_TYPE_QUICK_O\t\t\t=0x0100\t\t--诱发即时效果  \nEFFECT_TYPE_TRIGGER_F\t\t=0x0200\t\t--诱发必发效果  \nEFFECT_TYPE_QUICK_F\t\t\t=0x0400\t\t--诱发即时必发效果（熊猫龙等）  \nEFFECT_TYPE_CONTINUOUS\t\t=0x0800\t\t--由事件觸發的輔助用效果/永續效果  \nEFFECT_TYPE_XMATERIAL\t\t=0x1000\t\t--作为超量素材时超量怪兽获得的效果（十二兽）  \nEFFECT_TYPE_GRANT\t\t\t=0x2000\t\t--使其他卡片获得效果（天气模样）  \nEFFECT_TYPE_TARGET          =0x4000     --影响持续取的对象的效果（基本只用于魔陷）  \n"
            }
        ]
    },
    "Equal": {
        "function": [
            {
                "name": "Group.Equal(Group g1, Group g2)",
                "return": "bool",
                "desc": "判断g1和g2是否相同  \n"
            }
        ]
    },
    "IsFusionCode": {
        "function": [
            {
                "name": "Card.IsFusionCode(Card c, int code[, ...])",
                "return": "bool",
                "desc": "检查c作为融合素材时能否当作卡号为code的卡，额外参数是其他code  \n"
            }
        ]
    },
    "RemoveOverlayCard": {
        "function": [
            {
                "name": "Card.RemoveOverlayCard(Card c, int player, int min, int max, int reason)",
                "return": "int",
                "desc": "以reason为原因，让玩家player移除c叠放的min-max张卡，返回值表示是否成功  \n"
            },
            {
                "name": "Duel.RemoveOverlayCard(int player, int s, int o, int min, int max, int reason)",
                "return": "int",
                "desc": "让player以reason原因移除以player来看的指定位置的min-max张叠放卡，返回值表示取除的数量  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n"
            }
        ]
    },
    "SelectReleaseGroup": {
        "function": [
            {
                "name": "Duel.SelectReleaseGroup(int sel_player, function f|nil, int min, int max, Card|Group ex|nil, ...)",
                "return": "Group",
                "desc": "过滤函数，让玩家sel_player从场上选择min-max张不等于ex的满足条件f的可解放的卡（非上级召唤用）  \n第6个参数开始为额外参数  \n"
            }
        ]
    },
    "FromCards": {
        "function": [
            {
                "name": "Group.FromCards(...)",
                "return": "Group",
                "desc": "不定参数，把传入的所有卡组合成一个卡片组g并返回，所有参数只能是 Card 类型。没有参数时，相当于Group.CreateGroup()  \n"
            }
        ]
    },
    "GetDecktopGroup": {
        "function": [
            {
                "name": "Duel.GetDecktopGroup(int player, int count)",
                "return": "Group",
                "desc": "返回玩家player的卡组最上方的count张卡  \n"
            }
        ]
    },
    "CheckActivateEffect": {
        "function": [
            {
                "name": "Card.CheckActivateEffect(Card c, bool neglect_con, bool neglect_cost, bool copy_info)",
                "return": "Effect[,Group,int,int,Effect,int,int]",
                "desc": "返回c的可以发动时机正确的“卡的发动”的效果，neglect_con=true则无视发动条件，neglect_cost=true则无视发动cost  \ncopy_info=false或者自由时点的效果则只返回这个效果 e  \n否则还返回这个效果的触发时点的信息 e,eg,ep,ev,re,r,rp  \n"
            }
        ]
    },
    "__bxor": {
        "function": [
            {
                "name": "Group.__bxor(Group|Card target1, Group|Card target2)",
                "return": "Group",
                "desc": "新建一个卡片组，将 target1 和 target2 中不同的卡（就是只存在于 target1 或者 target2 里的卡）全部添加到 这个卡片组里，最后返回这个卡片组，target1,target2 本身不会有任何变化  \n"
            }
        ]
    },
    "GetTextDefense": {
        "function": [
            {
                "name": "Card.GetTextDefense(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的守备力，返回值是负数表示是\"?\"  \n"
            }
        ]
    },
    "SelectDisableField": {
        "function": [
            {
                "name": "Duel.SelectDisableField(int player, int count, int s, int o, int filter)",
                "return": "int",
                "desc": "让玩家player选择指定位置(s 和 o)中filter以外的count个格子，并返回选择位置的标记  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n注意这个函数并不会实际无效所选格子  \n常用于选择区域不能使用  \n##位置标记的定义如下  \n##flag = 0;  \n##seq为在玩家p，位置l中选择的格子序号  \n##for(int32 i = 0; i < count; ++i) {  \n##\tflag |= 1 << (seq[i] + (p[i] == player ? 0 : 16) + (l[i] == LOCATION_MZONE ? 0 : 8));  \n##}  \n"
            }
        ]
    },
    "IsPlayerCanDiscardDeck": {
        "function": [
            {
                "name": "Duel.IsPlayerCanDiscardDeck(int player, int count)",
                "return": "bool",
                "desc": "检查玩家player是否可以把卡组顶端count张卡送去墓地  \n"
            }
        ]
    },
    "EnableGlobalFlag": {
        "function": [
            {
                "name": "Duel.EnableGlobalFlag(int global_flag)",
                "return": "void",
                "desc": "设置全局标记global_flag  \n"
            }
        ]
    },
    "GetOwnerTargetCount": {
        "function": [
            {
                "name": "Card.GetOwnerTargetCount(Card c)",
                "return": "int",
                "desc": "返回取c作为永续对象的卡的数量  \n"
            }
        ]
    },
    "GetLP": {
        "function": [
            {
                "name": "Duel.GetLP(int player)",
                "return": "int",
                "desc": "返回玩家player的当前LP  \n"
            }
        ]
    },
    "ChainAttack": {
        "function": [
            {
                "name": "Duel.ChainAttack([Card c])",
                "return": "void",
                "desc": "使攻击卡[或卡片c]可以再进行1次攻击（比如 大开辟，破灭的女王）  \n"
            }
        ]
    },
    "IsPlayerCanSSet": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSSet(int player[, Card c])",
                "return": "bool",
                "desc": "检查玩家player是否可以把卡片[ c ]盖放到魔陷区  \n"
            }
        ]
    },
    "dscon": {
        "function": [
            {
                "name": "aux.dscon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 不是伤害阶段 或者 不是已经进行过伤害计算 的简单写法 SetCondition  \nfunction Auxiliary.bpcon(e,tp,eg,ep,ev,re,r,rp)  \n\treturn Duel.GetCurrentPhase()~=PHASE_DAMAGE or not Duel.IsDamageCalculated()  \nend  \n"
            }
        ]
    },
    "SSet": {
        "function": [
            {
                "name": "Duel.SSet(int player, Card|Group targets[, int target_player=player, bool confirm=true])",
                "return": "void|int",
                "desc": "让玩家player把targets盖放到target_player的魔法陷阱区， confirm 表示是否需要确认  \n若targets为Group，则返回成功操作的数量  \n"
            }
        ]
    },
    "DualNormalCondition": {
        "function": [
            {
                "name": "aux.DualNormalCondition(Effect e)",
                "return": "bool",
                "desc": "检查二重怪兽e:GetHandler()是否为被视为通常怪兽的状态（用于效果的Condition属性）  \n"
            }
        ]
    },
    "IsCounterAdded": {
        "function": [
            {
                "name": "aux.IsCounterAdded(Card c, int counter)",
                "return": "bool",
                "desc": "检测 c 是否添加了指示物 counter (?)  \n"
            }
        ]
    },
    "GetActivateSequence": {
        "function": [
            {
                "name": "Effect.GetActivateSequence(Effect e)",
                "return": "int",
                "desc": "返回效果e的发动区域序号  \n"
            }
        ]
    },
    "chainreg": {
        "function": [
            {
                "name": "aux.chainreg(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "死亡魔导龙(81059524)用了此函数，用于 SetOperation ，其实就是相当于  \nfunction Auxiliary.chainreg(e,tp,eg,ep,ev,re,r,rp)  \n\tif e:GetHandler():GetFlagEffect(1)==0 then  \n\t\te:GetHandler():RegisterFlagEffect(1,RESET_EVENT+RESETS_STANDARD-RESET_TURN_SET+RESET_CHAIN,0,1)  \n\tend  \nend  \n"
            }
        ]
    },
    "IsAbleToDeckAsCost": {
        "function": [
            {
                "name": "Card.IsAbleToDeckAsCost(Card c)",
                "return": "bool",
                "desc": "检查c是否可以作为cost送去卡组  \n"
            }
        ]
    },
    "GetColumnGroupCount": {
        "function": [
            {
                "name": "Card.GetColumnGroupCount(Card c)",
                "return": "int",
                "desc": "用法同 Card.GetColumnGroup ，只是返回的是卡片的数量  \n"
            }
        ]
    },
    "IsNotTuner": {
        "function": [
            {
                "name": "Card.IsNotTuner(Card c)",
                "return": "bool",
                "desc": "检查c是否可以当成非调整来使用  \n"
            }
        ]
    },
    "Next": {
        "function": [
            {
                "name": "aux.Next(Group g)",
                "return": "Card",
                "desc": "卡片组 g 的迭代器，指针会先指向第一张卡，然后每次调用这函数指向下一张卡，通常用在需要对g中的卡片进行操作的时候  \n例如：  \n\tlocal g=Group.CreateGroup()  \n\tfor tc in aux.Next(g) do  \n\tend  \n等价于：  \n\tlocal g=Group.CreateGroup()  \n\tlocal tc=g:GetFirst()  \n\twhile tc do  \n\t\ttc=g:GetNext()  \n\tend  \n"
            }
        ]
    },
    "GetProperty": {
        "function": [
            {
                "name": "Effect.GetProperty(Effect e)",
                "return": "int,int",
                "desc": "返回效果 e 的Property属性  \n"
            }
        ]
    },
    "GetReasonPlayer": {
        "function": [
            {
                "name": "Card.GetReasonPlayer(Card c)",
                "return": "int",
                "desc": "返回导致c的位置变化的玩家  \n"
            }
        ]
    },
    "drkcheck": {
        "function": [
            {
                "name": "aux.drkcheck(Group g)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否有相同阶级的卡的简单写法，返回值如果为 true 表示没有相同阶级卡  \nfunction Auxiliary.drkcheck(g)  \n\treturn g:GetClassCount(Card.GetRank)==#g  \nend  \n"
            }
        ]
    },
    "ReplaceEffect": {
        "function": [
            {
                "name": "Card.ReplaceEffect(Card c, int code, int reset_flag[, int reset_count=1])",
                "return": "int",
                "desc": "把c的效果替换为卡号是code的卡的效果，并且添加额外的reset条件  \n返回值是表示替换效果的代号id  \n"
            }
        ]
    },
    "RemoveCounter": {
        "function": [
            {
                "name": "Card.RemoveCounter(Card c, int player, int countertype, int count, int reason)",
                "return": "void",
                "desc": "让玩家player以原因reason移除c上的count个countertype类型的指示物， countertype=0 则清除c的所有指示物  \n"
            },
            {
                "name": "Duel.RemoveCounter(int player, int s, int o, int countertype, int count, int reason)",
                "return": "bool",
                "desc": "让玩家player以reason为原因移除场上存在的countertype类型的count个指示物，返回值表示是否成功  \ns表示对player来说的己方的可移除指示物的位置，o表示对player来说的对方的可移除指示物的位置  \n"
            }
        ]
    },
    "GetAttackableTarget": {
        "function": [
            {
                "name": "Card.GetAttackableTarget(Card c)",
                "return": "Group,bool",
                "desc": "返回c可攻击的卡片组以及能否直接攻击  \n"
            }
        ]
    },
    "GetOperatedGroup": {
        "function": [
            {
                "name": "Duel.GetOperatedGroup()",
                "return": "Group",
                "desc": "此函数返回之前一次卡片操作实际操作的卡片组。包括  \nDuel.Destroy, Duel.Remove, Duel.SendtoGrave,   \nDuel.SendtoHand, Duel.SendtoDeck, Duel.SendtoExtraP, Duel.Release,   \nDuel.ChangePosition, Duel.SpecialSummon, Duel.DiscardDeck  \n"
            }
        ]
    },
    "AddFusionProcCodeFun": {
        "function": [
            {
                "name": "aux.AddFusionProcCodeFun(Card c, int code, function f, int cc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用卡号为 code 的1只怪兽，和 cc 个满足条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,table.unpack(fun)),fun 是包含 cc 个 满足条件 f 的卡的表  \n"
            }
        ]
    },
    "IsCanChangePosition": {
        "function": [
            {
                "name": "Card.IsCanChangePosition(Card c)",
                "return": "bool",
                "desc": "检查c是否可以用效果改变表示形式  \n"
            }
        ]
    },
    "SetTarget": {
        "function": [
            {
                "name": "Effect.SetTarget(Effect e, function targ_func)",
                "return": "void",
                "desc": "设置效果 e 的Target属性  \n"
            }
        ]
    },
    "DiscardDeck": {
        "function": [
            {
                "name": "Duel.DiscardDeck(int player, int count, int reason)",
                "return": "int",
                "desc": "以原因reason把玩家player的卡组最上端count张卡送去墓地，返回实际转移的数量  \n"
            }
        ]
    },
    "CheckRemoveOverlayCard": {
        "function": [
            {
                "name": "Card.CheckRemoveOverlayCard(Card c, int player, int count, int reason)",
                "return": "bool",
                "desc": "检查玩家player能否以reason为原因，至少移除c叠放的count张卡  \n"
            },
            {
                "name": "Duel.CheckRemoveOverlayCard(int player, int s, int o, int count, int reason)",
                "return": "bool",
                "desc": "检查player能否以原因reason移除以player来看的指定位置至少count张卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n"
            }
        ]
    },
    "__len": {
        "function": [
            {
                "name": "Group.__len(Group g)",
                "return": "int",
                "desc": "和 Group.GetCount 一样  \n"
            }
        ]
    },
    "GetLinkAttribute": {
        "function": [
            {
                "name": "Card.GetLinkAttribute(Card c[, int player=PLAYER_NONE])",
                "return": "int",
                "desc": "返回c[由player连接召唤时]用作连接素材时的属性  \n"
            }
        ]
    },
    "AddSynchroProcedure2": {
        "function": [
            {
                "name": "aux.AddSynchroProcedure2(Card c, function f1, function f2)",
                "return": "void",
                "desc": "等价于aux.AddSynchroProcedure(c,f1,f2,1,1)  \n"
            }
        ]
    },
    "dlkcheck": {
        "function": [
            {
                "name": "aux.dlkcheck(Group g)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否有相同连接值的卡的简单写法，返回值如果为 true 表示没有相同连接值卡  \nfunction Auxiliary.dlkcheck(g)  \n\treturn g:GetClassCount(Card.GetLink)==#g  \nend  \n"
            }
        ]
    },
    "GetOverlayGroup": {
        "function": [
            {
                "name": "Card.GetOverlayGroup(Card c)",
                "return": "Group",
                "desc": "返回c当前叠放着的卡片组  \n"
            },
            {
                "name": "Duel.GetOverlayGroup(int player, int s, int o)",
                "return": "Group",
                "desc": "返回以player来看的指定位置的所有叠放的卡  \ns代表以player来看的自己的位置，o代表以player来看的对方的位置  \n"
            }
        ]
    },
    "GrabSelectedCard": {
        "function": [
            {
                "name": "Duel.GrabSelectedCard()",
                "return": "Group",
                "desc": "获取必须选择的卡并返回，同时将必须选择的卡清除（？）  \n"
            }
        ]
    },
    "AddRitualProcEqual2": {
        "function": [
            {
                "name": "aux.AddRitualProcEqual2(Card c, function filter, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件，素材的仪式等级之和必须等于仪式怪兽的等级(此等级可能会因为其他卡效果改变)  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n等价于：aux.AddRitualProcUltimate(c,filter,Card.GetLevel,\"Equal\",summon_location,grave_filter,mat_filter)  \n"
            }
        ]
    },
    "CreateToken": {
        "function": [
            {
                "name": "Duel.CreateToken(int player, int code)",
                "return": "bool|Card",
                "desc": "根据code新建一个衍生物并返回这个卡，该衍生物的拥有者为player  \n如果 player 不是 0或者1，则返回false  \n"
            }
        ]
    },
    "CheckSubGroup": {
        "function": [
            {
                "name": "Group.CheckSubGroup(Group g, function f, int min=1, int max=#g, ...)",
                "return": "bool",
                "desc": "检测卡片组 g 中是否存在满足 过滤条件 f，并且数量在 min-max 的子集  \nf 的函数原型为  \nfunction f(Group sg,...) end  \n"
            }
        ]
    },
    "CheckCountLimit": {
        "function": [
            {
                "name": "Effect.CheckCountLimit(Effect e, int p)",
                "return": "bool",
                "desc": "检测玩家 p 是否还有可以发动的效果 e 的次数  \n"
            }
        ]
    },
    "GetCount": {
        "function": [
            {
                "name": "Group.GetCount(Group g)",
                "return": "int",
                "desc": "返回卡片组g中卡的数量  \n"
            }
        ]
    },
    "GetCondition": {
        "function": [
            {
                "name": "Effect.GetCondition(Effect e)",
                "return": "function",
                "desc": "返回效果 e 的condition属性  \n"
            }
        ]
    },
    "indoval": {
        "function": [
            {
                "name": "aux.indoval(Effect e, Effect re, int rp)",
                "return": "bool",
                "desc": "不会被对方的卡破坏的过滤函数的简单写法，用在效果注册里 SetValue  \nfunction Auxiliary.indoval(e,re,rp)  \n\treturn rp==1-e:GetHandlerPlayer()  \nend  \n"
            }
        ]
    },
    "GetMaterial": {
        "function": [
            {
                "name": "Card.GetMaterial(Card c)",
                "return": "Group",
                "desc": "返回c出场使用的素材  \n"
            }
        ]
    },
    "GetCustomActivityCount": {
        "function": [
            {
                "name": "Duel.GetCustomActivityCount(int counter_id, int player, int activity_type)",
                "return": "int",
                "desc": "代号为counter_id的计数器的计数，返回player进行以下操作的次数（目前最多为1）  \nactivity_type为以下类型  \nACTIVITY_SUMMON         =1\t--召唤（不包括通常召唤的set）  \nACTIVITY_NORMALSUMMON   =2\t--通常召唤（包括通常召唤的set）  \nACTIVITY_SPSUMMON       =3\t--特殊召唤  \nACTIVITY_FLIPSUMMON     =4\t--反转召唤  \nACTIVITY_ATTACK         =5\t--攻击  \nACTIVITY_CHAIN          =7\t--发动效果  \n"
            }
        ]
    },
    "GetFieldGroupCount": {
        "function": [
            {
                "name": "Duel.GetFieldGroupCount(int player, int s, int o)",
                "return": "int",
                "desc": "同 Duel.GetFieldGroup ，只是返回的是卡的数量  \n"
            }
        ]
    },
    "IsLink": {
        "function": [
            {
                "name": "Card.IsLink(Card c, int link1[, int link2,...])",
                "return": "bool",
                "desc": "检查c的连接标记数量是否是 link1[, 或者为 link2...]  \n"
            }
        ]
    },
    "AddFusionProcCodeFunRep": {
        "function": [
            {
                "name": "aux.AddFusionProcCodeFunRep(Card c, int code, function f, int minc, int maxc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用卡号为 code 的1只怪兽 ，和满足过滤条件 f 的 minc-maxc 只怪兽为融合素材  \n等价于 aux.AddFusionProcMixRep(c,sub,insf,f,minc,maxc,code1)  \n"
            }
        ]
    },
    "GetFlagEffect": {
        "function": [
            {
                "name": "Card.GetFlagEffect(Card c, int code)",
                "return": "int",
                "desc": "返回c的种类是code的标识效果的数量  \n"
            },
            {
                "name": "Duel.GetFlagEffect(int player, int code)",
                "return": "int",
                "desc": "返回玩家 player 的 code 标识效果的数量  \n"
            }
        ]
    },
    "IsDefensePos": {
        "function": [
            {
                "name": "Card.IsDefensePos(Card c)",
                "return": "bool",
                "desc": "检查c是否是守备表示  \n"
            }
        ]
    },
    "ReverseInDeck": {
        "function": [
            {
                "name": "Card.ReverseInDeck(Card c)",
                "return": "void",
                "desc": "设置c在卡组中正面表示（POS_FACEUP_DEFENSE）  \n"
            }
        ]
    },
    "IsRelateToChain": {
        "function": [
            {
                "name": "Card.IsRelateToChain(Card c, int chainc)",
                "return": "bool",
                "desc": "检查c是否和连锁chainc有联系  \n注：每次发动进入连锁的效果时，发动效果的卡，以及发动效果时指定的对象  \n（用Duel.SetTargetCard或者Duel.SelectTarget指定的，包括取对象和不取对象）  \n会自动与那个效果建立联系，一旦离场，联系会重置  \n"
            }
        ]
    },
    "GetEffectCount": {
        "function": [
            {
                "name": "Card.GetEffectCount(Card c, int code)",
                "return": "int",
                "desc": "返回c受到影响的种类是code的效果的数量  \n"
            }
        ]
    },
    "IsPlayerCanSendtoDeck": {
        "function": [
            {
                "name": "Duel.IsPlayerCanSendtoDeck(int player[, Card c])",
                "return": "bool",
                "desc": "检查玩家是否能把卡片[c]送去卡组  \n"
            }
        ]
    },
    "PreSummon": {
        "function": [
            {
                "name": "Debug.PreSummon(Card c, int sum_type[, int sum_location=0])",
                "return": "void",
                "desc": "设置卡片c的召唤信息：以 sum_type 方法(通常召唤、特殊召唤等)[从 sum_location]出场  \n"
            }
        ]
    },
    "SpecialSummonComplete": {
        "function": [
            {
                "name": "Duel.SpecialSummonComplete()",
                "return": "int",
                "desc": "此函数在确定复数个Duel.SpecialSummonStep调用完毕之后调用，用于触发事件  \n"
            }
        ]
    },
    "GetOperationInfo": {
        "function": [
            {
                "name": "Duel.GetOperationInfo(int chainc, int category)",
                "return": "bool[,Card|Group,int,int,int]",
                "desc": "返回连锁chainc的category分类的操作信息，存在的话，则返回值为5个， chainc=0 则是表示当前连锁  \n第一个返回值是false的话表示不存在该分类  \n后4个返回值对应Duel.SetOperationInfo的后4个参数：Card|Group targets, int count, int target_player, int target_param  \n"
            }
        ]
    },
    "IsHasCardTarget": {
        "function": [
            {
                "name": "Card.IsHasCardTarget(Card c1, Card c2)",
                "return": "bool",
                "desc": "检查c2是否取c1为永续对象  \n"
            }
        ]
    },
    "MajesticCopy": {
        "function": [
            {
                "name": "Duel.MajesticCopy(Card c1, Card c2)",
                "return": "void",
                "desc": "救世星龙专用。把c2记述的效果复制给c1  \n强制发动的效果可以选择是否发动  \n##只说明常用的函数  \n"
            }
        ]
    },
    "GetAttackedGroupCount": {
        "function": [
            {
                "name": "Card.GetAttackedGroupCount(Card c)",
                "return": "int",
                "desc": "返回c本回合攻击过的卡片数量  \n"
            }
        ]
    },
    "IsCanBeLinkMaterial": {
        "function": [
            {
                "name": "Card.IsCanBeLinkMaterial(Card c, Card sc|nil)",
                "return": "bool",
                "desc": "检查c是否可以成为[连接怪兽sc的]连接素材,没有指定sc的场合，必须填nil  \n"
            }
        ]
    },
    "GetOwnerPlayer": {
        "function": [
            {
                "name": "Effect.GetOwnerPlayer(Effect e)",
                "return": "int",
                "desc": "返回效果 e 的OwnerPlayer属性，一般是Owner的控制者  \n"
            }
        ]
    },
    "Readjust": {
        "function": [
            {
                "name": "Duel.Readjust()",
                "return": "void",
                "desc": "刷新场上的卡的信息  \n非特定情况或者不清楚原理请勿使用此函数以免形成死循环  \n"
            }
        ]
    },
    "Tuner": {
        "function": [
            {
                "name": "aux.Tuner(function f, ...)",
                "return": "function",
                "desc": "用于过滤满足单一过滤条件 f 的调整，,返回的是一个 有 bool 返回值类型的 函数，只要求是 调整怪兽的话，就写 aux.Tuner(nil)  \n第2个参数开始为额外参数  \n"
            }
        ]
    },
    "IsLinkMarker": {
        "function": [
            {
                "name": "Card.IsLinkMarker(Card c, int dir)",
                "return": "bool",
                "desc": "检查c是否是连接标记为 dir 的卡  \ndir的值有：  \nLINK_MARKER_BOTTOM_LEFT\t\t=0x001 -- ↙  \nLINK_MARKER_BOTTOM\t\t\t=0x002 -- ↓  \nLINK_MARKER_BOTTOM_RIGHT\t=0x004 -- ↘  \nLINK_MARKER_LEFT\t\t\t=0x008 -- ←  \nLINK_MARKER_RIGHT\t\t\t=0x020 -- →  \nLINK_MARKER_TOP_LEFT\t\t=0x040 -- ↖  \nLINK_MARKER_TOP\t\t\t\t=0x080 -- ↑  \nLINK_MARKER_TOP_RIGHT\t\t=0x100 -- ↗  \n"
            }
        ]
    },
    "RegisterFlagEffect": {
        "function": [
            {
                "name": "Card.RegisterFlagEffect(Card c, int code, int reset_flag, int property, int reset_count[, int label, int desc])",
                "return": "Effect",
                "desc": "为c注册一个标识用效果  \n注：注册给卡的标识用效果不会用于系统，  \n即使code与内置效果code重合也不会影响，  \n并且类型总是EFFECT_TYPE_SINGLE，reset方法，property和一般的效果相同，  \n并且不会无效化，不受卡的免疫效果影响  \n"
            },
            {
                "name": "Duel.RegisterFlagEffect(int player, int code, int reset_flag, int property, int reset_count=1[, int label=0])",
                "return": "Effect",
                "desc": "为玩家player注册全局环境下的标识效果，并返回这个效果  \n此效果总是影响玩家的(EFFECT_FLAG_PLAYER_TARGET)并且不会被无效化  \n其余部分与Card.RegisterFlagEffect相同  \n"
            }
        ]
    },
    "GetBattleTarget": {
        "function": [
            {
                "name": "Card.GetBattleTarget(Card c)",
                "return": "Card",
                "desc": "返回与c进行战斗的卡，没有则返回nil  \n"
            }
        ]
    },
    "CheckPhaseActivity": {
        "function": [
            {
                "name": "Duel.CheckPhaseActivity()",
                "return": "bool",
                "desc": "检查玩家在当前阶段是否有操作（是否处于阶段开始时，如七皇之剑）  \n"
            }
        ]
    },
    "GetMutualLinkedGroupCount": {
        "function": [
            {
                "name": "Card.GetMutualLinkedGroupCount(Card c)",
                "return": "int",
                "desc": "返回和c互相连接状态的卡片组的数量  \n"
            }
        ]
    },
    "GetAttackTarget": {
        "function": [
            {
                "name": "Duel.GetAttackTarget()",
                "return": "Card|nil",
                "desc": "返回此次战斗被攻击的卡，如果返回nil表示是直接攻击  \n"
            }
        ]
    },
    "ShuffleDeck": {
        "function": [
            {
                "name": "Duel.ShuffleDeck(int player)",
                "return": "void",
                "desc": "手动洗切玩家player的卡组  \n注：会重置洗卡检测的状态  \n"
            }
        ]
    },
    "bdcon": {
        "function": [
            {
                "name": "aux.bdcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 e:GetHandler() 是否和本次战斗有关，通常用于 EVENT_BATTLE_DESTROYING 的 condition  \nfunction Auxiliary.bdcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsRelateToBattle()  \nend  \n"
            }
        ]
    },
    "ShuffleSetCard": {
        "function": [
            {
                "name": "Duel.ShuffleSetCard(Group g)",
                "return": "void",
                "desc": "洗切覆盖的卡片组 g （实例：魔术礼帽），若g中有表侧表示的卡，则此函数无效  \n此函数现在可以洗切魔陷区的覆盖卡  \n"
            }
        ]
    },
    "GetFieldGroup": {
        "function": [
            {
                "name": "Duel.GetFieldGroup(int player, int s, int o)",
                "return": "Group",
                "desc": "返回以player来看的指定位置的卡，s代表以player来看的自己的位置，o代表以player来看的对方的位置  \n"
            }
        ]
    },
    "CheckReleaseGroupEx": {
        "function": [
            {
                "name": "Duel.CheckReleaseGroupEx(int player, function f|nil, int count, Card|Group ex|nil, ...)",
                "return": "bool",
                "desc": "检查玩家player场上·手卡是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第5个参数开始为额外参数  \n"
            }
        ]
    },
    "IsCanBeSpecialSummoned": {
        "function": [
            {
                "name": "Card.IsCanBeSpecialSummoned(Card c, Effect e, int sumtype, int sumplayer, bool nocheck, bool nolimit[, int sumpos=POS_FACEUP, int toplayer=sumplayer, int zone=0xff])",
                "return": "bool",
                "desc": "检查c是否可以被玩家sumplayer用效果e[以sumtype方式和sumpos表示形式]特殊召唤[到玩家 toplayer 的区域zone]  \n如果nocheck是true则不检查c的召唤条件，如果nolimit是true则不检查c的苏生限制  \n"
            }
        ]
    },
    "CheckUnionEquip": {
        "function": [
            {
                "name": "aux.CheckUnionEquip(Card uc, Card tc)",
                "return": "bool",
                "desc": "检查同盟怪兽uc能否作为同盟装备在怪兽tc上  \n"
            }
        ]
    },
    "GetColumnZone": {
        "function": [
            {
                "name": "Card.GetColumnZone(Card c, int location[, int left, int right, int player])",
                "return": "int",
                "desc": "返回[以 player 来看的] location 范围内与 c 同一纵列[包含左边 left 列和右边 right 列]的区域，  \nlocation 的值是 LOCATION_MZONE,LOCATION_SZONE,LOCATIOIN_ONFIELD   \n"
            }
        ]
    },
    "IsRank": {
        "function": [
            {
                "name": "Card.IsRank(Card c, int rank1[, int rank2,...])",
                "return": "bool",
                "desc": "检查c是否是阶级 rank1[, 或者为 rank2...]  \n"
            }
        ]
    },
    "AddCounter": {
        "function": [
            {
                "name": "Card.AddCounter(Card c, int countertype, int count[, int singly=false])",
                "return": "bool",
                "desc": "为c放置count个countertype类型的指示物，singly为true表示逐个添加至count 个为止  \n"
            }
        ]
    },
    "SetCategory": {
        "function": [
            {
                "name": "Effect.SetCategory(Effect e, int cate)",
                "return": "void",
                "desc": "设置效果 e 的Category属性  \n"
            }
        ]
    },
    "GetReasonCard": {
        "function": [
            {
                "name": "Card.GetReasonCard(Card c)",
                "return": "Card",
                "desc": "返回导致c的位置变化的卡  \n此函数仅在某卡被战斗破坏时，因为上级召唤被解放，或者成为特殊召唤使用的素材时有效  \n"
            }
        ]
    },
    "AddFusionProcCodeRep": {
        "function": [
            {
                "name": "aux.AddFusionProcCodeRep(Card c, int code, int cc, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用 cc 个卡号为 code 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,table.unpack(tcode)) ,tcode 是包含 cc 个 code 的表  \n"
            }
        ]
    },
    "IsReleasable": {
        "function": [
            {
                "name": "Card.IsReleasable(Card c)",
                "return": "bool",
                "desc": "检查c是否可以被解放（非上级召唤用）  \n如果 c 满足以下条件，都会返回 false  \n召唤(广义的)之际、 在墓地或者除外、 在手卡并且是魔法·陷阱、 玩家受到不能把卡解放的效果影响、 不能做上级召唤以外的祭品  \n"
            }
        ]
    },
    "MZoneSequence": {
        "function": [
            {
                "name": "aux.MZoneSequence(int seq)",
                "return": "int",
                "desc": "返回是第几列怪兽区，从左到右 分别是 0~4 ,若在 额外怪兽区，则返回 左 1 或者 右 3   \n"
            }
        ]
    },
    "IsOriginalCodeRule": {
        "function": [
            {
                "name": "Card.IsOriginalCodeRule(Card c, int code1[, int code2,...])",
                "return": "bool",
                "desc": "检查c的卡号是否规则上（就是CDB里显示的卡密）是 code1[, 或者为 code2...]  \n"
            }
        ]
    },
    "GetFusionType": {
        "function": [
            {
                "name": "Card.GetFusionType(Card c)",
                "return": "int",
                "desc": "返回c用作融合素材时的类型（与GetType的区别在于对于魔陷区的怪兽卡，返回其原本类型）  \n"
            }
        ]
    },
    "GetAttackedGroup": {
        "function": [
            {
                "name": "Card.GetAttackedGroup(Card c)",
                "return": "Group",
                "desc": "返回c本回合攻击过的卡片组  \n"
            }
        ]
    },
    "GetMustMaterialGroup": {
        "function": [
            {
                "name": "aux.GetMustMaterialGroup(int player , int code)",
                "return": "Group",
                "desc": "如果 player 受到效果种类 code 影响，则返回受到影响的卡  \n目前代码中涉及的code有 EFFECT_MUST_BE_SMATERIAL, EFFECT_MUST_BE_XMATERIAL, EFFECT_MUST_BE_FMATERIAL, EFFECT_MUST_BE_LMATERIAL ,都是 必须成为素材的效果  \n"
            }
        ]
    },
    "dogfcon": {
        "function": [
            {
                "name": "aux.dogfcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测 e:GetHandler() 是否是从自己场上被对方破坏送去墓地 SetCondition  \nfunction Auxiliary.dogcon(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal c=e:GetHandler()  \n\treturn c:IsPreviousLocation(LOCATION_ONFIELD) and c:GetPreviousControler()==tp  \n\t\tand c:IsReason(REASON_DESTROY) and rp==1-tp  \nend  \n"
            }
        ]
    },
    "IsSpecialSummonable": {
        "function": [
            {
                "name": "Card.IsSpecialSummonable(Card c[, int sum_type])",
                "return": "bool",
                "desc": "检查是否可以对c[用 sum_type 方式]进行特殊召唤手续  \n"
            }
        ]
    },
    "FilterBoolFunction": {
        "function": [
            {
                "name": "aux.FilterBoolFunction(function f, ...)",
                "return": "function",
                "desc": "用于过滤满足单一过滤条件 f 的卡,,返回的是一个 有 bool 返回值类型的 函数，第2个参数开始为额外参数  \nfunction Auxiliary.FilterBoolFunction(f,...)  \n\tlocal ext_params={...}  \n\treturn\tfunction(target)  \n\t\t\t\treturn f(target,table.unpack(ext_params))  \n\t\t\tend  \nend  \n"
            }
        ]
    },
    "AddFusionProcCode4": {
        "function": [
            {
                "name": "aux.AddFusionProcCode4(Card c, int code1, int code2, int code3, int code4, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用卡号为code1,code2,code3,code4的4只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2,code4)  \n"
            }
        ]
    },
    "EnableSpiritReturn": {
        "function": [
            {
                "name": "aux.EnableSpiritReturn(Card c, int event1,...)",
                "return": "void",
                "desc": "为c添加灵魂怪兽结束阶段回到手卡的效果（发生事件event1,...的回合，结束阶段回到手卡）  \n"
            }
        ]
    },
    "AddFusionProcCode3": {
        "function": [
            {
                "name": "aux.AddFusionProcCode3(Card c, int code1, int code2, int code3, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用卡号为code1,code2,code3的3只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2,code3)  \n"
            }
        ]
    },
    "AddFusionProcCode2": {
        "function": [
            {
                "name": "aux.AddFusionProcCode2(Card c, int code1, int code2, bool sub, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用卡号为code1和code2的2只怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,sub,insf,code1,code2)  \n"
            }
        ]
    },
    "GetTurnCount": {
        "function": [
            {
                "name": "Duel.GetTurnCount([int player])",
                "return": "int",
                "desc": "返回[player所经过的]当前的回合数  \n"
            }
        ]
    },
    "ChangeAttacker": {
        "function": [
            {
                "name": "Duel.ChangeAttacker(Card c[, bool ignore_count=false])",
                "return": "void",
                "desc": "将攻击怪兽变为c  \n若 ignore_count=true 则原来的攻击怪兽不视为攻击过  \n"
            }
        ]
    },
    "Win": {
        "function": [
            {
                "name": "Duel.Win(int player, int win_reason)",
                "return": "void",
                "desc": "当前效果处理完令player以win_reason决斗胜利  \n"
            }
        ]
    },
    "GetChainInfo": {
        "function": [
            {
                "name": "Duel.GetChainInfo(int chainc, ...)",
                "return": "...",
                "desc": "返回连锁chainc的信息，如果chainc=0，则返回当前正在处理的连锁的信息  \n此函数根据传入的参数个数按顺序返回相应数量的返回值参数可以是:  \nCHAININFO_CHAIN_COUNT               连锁序号  \nCHAININFO_TRIGGERING_EFFECT         连锁的效果  \nCHAININFO_TRIGGERING_PLAYER         连锁的玩家  \nCHAININFO_TRIGGERING_CONTROLER      连锁发生位置所属玩家  \nCHAININFO_TRIGGERING_LOCATION       连锁发生位置  \nCHAININFO_TRIGGERING_SEQUENCE       连锁发生的位置的序号  \nCHAININFO_TARGET_CARDS              连锁的对象卡片组  \nCHAININFO_TARGET_PLAYER             连锁的对象玩家  \nCHAININFO_TARGET_PARAM              连锁的对象参数  \nCHAININFO_DISABLE_REASON            连锁被无效的原因效果  \nCHAININFO_DISABLE_PLAYER            连锁被无效的原因玩家  \nCHAININFO_CHAIN_ID                  连锁的唯一标识  \nCHAININFO_TYPE                      连锁卡片的类型（怪兽·魔法·陷阱）  \nCHAININFO_EXTTYPE                   连锁卡片的具体类型（例如同调怪兽·永续魔法·反击陷阱）  \n举例：  \nDuel.GetChainInfo(0,CHAININFO_TRIGGERING_LOCATION,CHAININFO_TARGET_CARDS)  \n将会返回当前连锁发生的位置和对象卡  \n"
            }
        ]
    },
    "CheckSummonedCount": {
        "function": [
            {
                "name": "Duel.CheckSummonedCount([Card c])",
                "return": "bool",
                "desc": "检查回合玩家本回合是否还能通常召唤[卡片c]  \n"
            }
        ]
    },
    "GetLabelObject": {
        "function": [
            {
                "name": "Effect.GetLabelObject(Effect e)",
                "return": "Card|Group|Effect",
                "desc": "返回效果 e 的LabelObject属性  \n"
            }
        ]
    },
    "GetReasonEffect": {
        "function": [
            {
                "name": "Card.GetReasonEffect(Card c)",
                "return": "Effect",
                "desc": "返回导致c的位置变化的效果  \n"
            }
        ]
    },
    "GetPreviousControler": {
        "function": [
            {
                "name": "Card.GetPreviousControler(Card c)",
                "return": "int",
                "desc": "返回c的位置变化之前的控制者  \n"
            }
        ]
    },
    "Message": {
        "function": [
            {
                "name": "Debug.Message(any msg)",
                "return": "void",
                "desc": "显示消息  \n"
            }
        ]
    },
    "AddRitualProcUltimate": {
        "function": [
            {
                "name": "aux.AddRitualProcUltimate(Card c, function filter, function level_function, string greater_or_equal, int summon_location=LOCATION_HAND, function grave_filter, function mat_filter)",
                "return": "void",
                "desc": "为c添加仪式召唤效果  \nfilter 为仪式怪兽满足的条件， level_function 表示仪式召唤要满足的等级(返回值为int类型的函数)  \ngreater_or_equal 的值只有 \"Greater\" 和 \"Equal\"  \nsummon_location 表示从哪里仪式召唤(默认是手卡)  \ngrave_filter 表示 作为解放代替除外墓地  的仪式素材需要满足的条件  \nmat_filter 表示仪式素材要满足的条件  \n"
            }
        ]
    },
    "IsLocation": {
        "function": [
            {
                "name": "Card.IsLocation(Card c, int location)",
                "return": "bool",
                "desc": "检查c当前位置是否是location  \n注：location=LOCATION_MZONE时，怪兽召唤(广义的)之际或被无效会返回 false  \nlocation=LOCATION_SZONE时，魔陷发动无效会返回false  \n"
            }
        ]
    },
    "AddFusionProcFunRep": {
        "function": [
            {
                "name": "aux.AddFusionProcFunRep(Card c, function f, int cc, bool insf)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用 cc 个 满足相同条件 f 的怪兽为融合素材  \n等价于 aux.AddFusionProcMix(c,false,insf,table.unpack(fun)),fun 是包含 cc 个 满足条件 f 的卡的表  \n"
            }
        ]
    },
    "HintSelection": {
        "function": [
            {
                "name": "Duel.HintSelection(Group g)",
                "return": "void",
                "desc": "手动为卡片组g显示被选为对象的动画效果，并记录这些卡被选为对象(广义的)  \n"
            }
        ]
    },
    "GetTurnPlayer": {
        "function": [
            {
                "name": "Duel.GetTurnPlayer()",
                "return": "int",
                "desc": "返回当前的回合玩家  \n"
            }
        ]
    },
    "CheckSynchroMaterial": {
        "function": [
            {
                "name": "Duel.CheckSynchroMaterial(Card c, function f1|nil, function f2|nil, int min, int max[, Card smat|nil, Group mg|nil])",
                "return": "bool",
                "desc": "检查场上[或mg中]是否存在一组[必须包括smat在内的（如果有mg~=nil则忽略此参数）]满足条件的卡作为同调召唤c的素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \nf1,f2 之中，至少有一种为调整的条件  \n"
            }
        ]
    },
    "Stringid": {
        "function": [
            {
                "name": "aux.Stringid(int code, int id)",
                "return": "int",
                "desc": "用于索引卡号为code的卡片第id个（从0开始）效果提示  \n"
            }
        ]
    },
    "Destroy": {
        "function": [
            {
                "name": "Duel.Destroy(Card|Group targets, int reason[ ,int dest = LOCATION_GRAVE])",
                "return": "int",
                "desc": "以reason原因破坏targets去dest，返回值是实际被破坏的数量  \n如果reason包含REASON_RULE，则破坏事件将不会检查卡片是否免疫效果，  \n不会触发代破效果并且无视“不能破坏”  \n"
            }
        ]
    },
    "damcon1": {
        "function": [
            {
                "name": "aux.damcon1(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "玩家 tp 受到伤害 这个条件的简单写法，，用在效果注册里 SetCondition  \nfunction Auxiliary.damcon1(e,tp,eg,ep,ev,re,r,rp)  \n\tlocal e1=Duel.IsPlayerAffectedByEffect(tp,EFFECT_REVERSE_DAMAGE)  \n\tlocal e2=Duel.IsPlayerAffectedByEffect(tp,EFFECT_REVERSE_RECOVER)  \n\tlocal rd=e1 and not e2  \n\tlocal rr=not e1 and e2  \n\tlocal ex,cg,ct,cp,cv=Duel.GetOperationInfo(ev,CATEGORY_DAMAGE)  \n\tif ex and (cp==tp or cp==PLAYER_ALL) and not rd and not Duel.IsPlayerAffectedByEffect(tp,EFFECT_NO_EFFECT_DAMAGE) then  \n\t\treturn true  \n\tend  \n\tex,cg,ct,cp,cv=Duel.GetOperationInfo(ev,CATEGORY_RECOVER)  \n\treturn ex and (cp==tp or cp==PLAYER_ALL) and rr and not Duel.IsPlayerAffectedByEffect(tp,EFFECT_NO_EFFECT_DAMAGE)  \nend  \n"
            }
        ]
    },
    "gfcheck": {
        "function": [
            {
                "name": "aux.gfcheck(Group g, function f, any a1, any a2)",
                "return": "bool",
                "desc": "--check for group with 2 cards, each card match f with a1/a2 as argument  \nfunction Auxiliary.gfcheck(g,f,a1,a2)  \n\tif #g~=2 then return false end  \n\tlocal c1=g:GetFirst()  \n\tlocal c2=g:GetNext()  \n\treturn f(c1,a1) and f(c2,a2) or f(c2,a1) and f(c1,a2)  \nend  \n"
            }
        ]
    },
    "Release": {
        "function": [
            {
                "name": "Duel.Release(Card|Group targets, int reason)",
                "return": "int",
                "desc": "以reason原因解放targets ，返回值是实际解放的数量  \n如果reason含有REASON_COST，则不会检查卡片是否不受效果影响  \n"
            }
        ]
    },
    "EnableDualState": {
        "function": [
            {
                "name": "Card.EnableDualState(Card c)",
                "return": "void",
                "desc": "把c设置成再召唤状态  \n"
            }
        ]
    },
    "linklimit": {
        "function": [
            {
                "name": "aux.linklimit(Effect e, Effect se, int sp, int st)",
                "return": "bool",
                "desc": "不能用 连接召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.linklimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_LINK==SUMMON_TYPE_LINK  \nend  \n"
            }
        ]
    },
    "SetDescription": {
        "function": [
            {
                "name": "Effect.SetDescription(Effect e, int desc)",
                "return": "void",
                "desc": "设置效果 e 的效果描述  \n"
            }
        ]
    },
    "SetOperation": {
        "function": [
            {
                "name": "Effect.SetOperation(Effect e, nil|function op_func)",
                "return": "void",
                "desc": "设置效果 e 的Operation属性  \n"
            }
        ]
    },
    "IsLinkRace": {
        "function": [
            {
                "name": "Card.IsLinkRace(Card c, int race[, int player=PLAYER_NONE])",
                "return": "bool",
                "desc": "检查c[由player连接召唤时]用作连接素材时是否属于种族race  \n"
            }
        ]
    },
    "CheckReleaseGroup": {
        "function": [
            {
                "name": "Duel.CheckReleaseGroup(int player, function f|nil, int count, Card|Group ex|nil, ...)",
                "return": "bool",
                "desc": "检查玩家player场上是否存在至少count张满足过滤条件f并且不等于ex的可解放的卡（非上级召唤用）  \n第5个参数开始为额外参数  \n"
            }
        ]
    },
    "IsMaterialListCode": {
        "function": [
            {
                "name": "aux.IsMaterialListCode(Card c, int code])",
                "return": "bool",
                "desc": "检测 c 是否是有卡名 code 为素材的卡  \nc.material  \n"
            }
        ]
    },
    "IsHasCategory": {
        "function": [
            {
                "name": "Effect.IsHasCategory(Effect e, int cate)",
                "return": "bool",
                "desc": "检查效果e是否含有效果分类cate  \n"
            }
        ]
    },
    "fuslimit": {
        "function": [
            {
                "name": "Auxiliary.fuslimit(Effect e, Effect se, int sp, int st)",
                "return": "bool",
                "desc": "不能用 融合召唤 以外的方式召唤(广义的) 的过滤函数的简单写法，用在效果注册里 SetValue  \nse 指召唤这张卡的效果， sp 是召唤的玩家， st 是召唤的类型  \nfunction Auxiliary.fuslimit(e,se,sp,st)  \n\treturn st&SUMMON_TYPE_FUSION==SUMMON_TYPE_FUSION  \nend  \n"
            }
        ]
    },
    "SetCounterLimit": {
        "function": [
            {
                "name": "Card.SetCounterLimit(Card c, int countertype, int count)",
                "return": "void",
                "desc": "设定c放置countertype类型指示物的上限  \n"
            }
        ]
    },
    "GetSynchroLevel": {
        "function": [
            {
                "name": "Card.GetSynchroLevel(Card c, Card sc)",
                "return": "int",
                "desc": "返回c的对于同调怪兽sc的同调用等级  \n此函数除了某些特定卡如调节支援士，返回值与Card.GetLevel(c)相同  \n"
            }
        ]
    },
    "ClearOperationInfo": {
        "function": [
            {
                "name": "Duel.ClearOperationInfo(int chainc)",
                "return": "void",
                "desc": "清除连锁chainc的所有操作分类  \n"
            }
        ]
    },
    "SelectTunerMaterial": {
        "function": [
            {
                "name": "Duel.SelectTunerMaterial(int player, Card c, Card tuner, function f1|nil, function f2|nil, int min, int max[, Group mg|nil])",
                "return": "Group",
                "desc": "让玩家从场上[或mg中]选择用于同调c需要的满足条件的以tuner作为调整的min-max张卡的一组素材  \nf1是 1 只需要满足的过滤条件，f2是 min-max 只需要满足的过滤条件  \n"
            }
        ]
    },
    "bpcon": {
        "function": [
            {
                "name": "aux.bpcon(Effect e, int tp, Group eg, int ep, int ev, Effect re, int r, int rp)",
                "return": "bool",
                "desc": "检测能否进入战斗阶段 或者 是否已经在战斗阶段内 的简单写法 SetCondition  \nfunction Auxiliary.bpcon(e,tp,eg,ep,ev,re,r,rp)  \n\treturn Duel.IsAbleToEnterBP() or (Duel.GetCurrentPhase()>=PHASE_BATTLE_START and Duel.GetCurrentPhase()<=PHASE_BATTLE)  \nend  \n"
            }
        ]
    },
    "IsSummonableCard": {
        "function": [
            {
                "name": "Card.IsSummonableCard(Card c)",
                "return": "bool",
                "desc": "检查c是否是可通常召唤的卡  \n"
            }
        ]
    },
    "EnableReviveLimitPendulumSummonable": {
        "function": [
            {
                "name": "aux.EnableReviveLimitPendulumSummonable(Card c[, int location=0xff])",
                "return": "void",
                "desc": "如果 怪兽 c 从 location 灵摆召唤，也能解除苏生限制(?) (超天新龙 异色眼革命龙 (16306932))  \n"
            }
        ]
    },
    "GetOriginalType": {
        "function": [
            {
                "name": "Card.GetOriginalType(Card c)",
                "return": "int",
                "desc": "返回c的卡片记载的类型  \n"
            }
        ]
    },
    "AddXyzProcedureLevelFree": {
        "function": [
            {
                "name": "aux.AddXyzProcedureLevelFree(Card c, function f|nil, function gf|nil, int minc, int maxc[, function alterf|nil, int desc|nil, function op|nil])",
                "return": "void",
                "desc": "为c添加超量召唤手续  \n用满足条件 f 的卡片组里，满足 gf 的 minc[-maxc] 只怪兽进行叠放，f 为必要条件，gf 为额外条件  \n或者在单个怪兽（通常是超量怪兽）上叠放  \nalterf为这个怪兽满足的条件，desc为描述，op为叠放时需要的操作（比如 闪光No.0 希望之异热同心）  \n"
            }
        ]
    },
    "AddFusionProcMix": {
        "function": [
            {
                "name": "aux.AddFusionProcMix(Card c, bool sub, bool insf, ...)",
                "return": "void",
                "desc": "为c 添加融合召唤手续  \n用额外参数里的卡各1张为融合素材,额外参数的类型 可以是 function 或者 卡密(int code),  \nsub表示能否使用融合代替素材，insf 为false表示必须用素材融合召唤。若这只怪兽融合召唤只能使用上述的卡进行，sub 和 insf 都要填 false  \n#以下融合函数这2个参数相同  \n"
            }
        ]
    },
    "IsAbleToExtra": {
        "function": [
            {
                "name": "Card.IsAbleToExtra(Card c)",
                "return": "bool",
                "desc": "检查c是否可以送去额外卡组  \n对于非融合、同调等额外怪兽或者非灵摆怪兽此函数均返回false  \n"
            }
        ]
    },
    "SelectPosition": {
        "function": [
            {
                "name": "Duel.SelectPosition(int player, Card c, int pos)",
                "return": "int",
                "desc": "让玩家player选择c的表示形式（返回值是一个int 类型的，但是我不知道是什么）  \n"
            }
        ]
    },
    "IsReleasableByEffect": {
        "function": [
            {
                "name": "Card.IsReleasableByEffect(Card c)",
                "return": "bool",
                "desc": "检查c是否可以被效果解放  \n"
            }
        ]
    },
    "mzctcheck": {
        "function": [
            {
                "name": "aux.mzctcheck(Group g, int tp)",
                "return": "bool",
                "desc": "检测玩家 tp 场上是否有卡片组 g 离开后可用的主要怪兽区格子 的简单写法  \nfunction Auxiliary.mzctcheck(g,tp)  \n\treturn Duel.GetMZoneCount(tp,g)>0  \nend  \n"
            }
        ]
    },
    "GetActivateLocation": {
        "function": [
            {
                "name": "Effect.GetActivateLocation(Effect e)",
                "return": "int",
                "desc": "返回效果e的发动区域  \n"
            }
        ]
    },
    "GetDrawCount": {
        "function": [
            {
                "name": "Duel.GetDrawCount(int player)",
                "return": "int",
                "desc": "返回玩家player每回合的规则抽卡数量  \n"
            }
        ]
    },
    "MIN_ID": {
        "name": "MIN_ID",
        "type": 2,
        "value": "1000",
        "desc": "4 digit, by DataManager::GetDesc()"
    },
    "MAX_ID": {
        "name": "MAX_ID",
        "type": 2,
        "value": "268435455",
        "desc": "9 digit, by DataManager::GetDesc()"
    },
    "MAX_COUNTER": {
        "name": "MAX_COUNTER",
        "type": 2,
        "value": "65535",
        "desc": "max number for adding/removing counters, by card::add_counter(), field::remove_counter()"
    },
    "LOCATION_DECK": {
        "name": "LOCATION_DECK",
        "type": 2,
        "value": "0x01",
        "desc": "卡组"
    },
    "LOCATION_HAND": {
        "name": "LOCATION_HAND",
        "type": 2,
        "value": "0x02",
        "desc": "手牌"
    },
    "LOCATION_MZONE": {
        "name": "LOCATION_MZONE",
        "type": 2,
        "value": "0x04",
        "desc": "怪兽区"
    },
    "LOCATION_SZONE": {
        "name": "LOCATION_SZONE",
        "type": 2,
        "value": "0x08",
        "desc": "魔陷区(0~4)+场地区(5)"
    },
    "LOCATION_GRAVE": {
        "name": "LOCATION_GRAVE",
        "type": 2,
        "value": "0x10",
        "desc": "墓地"
    },
    "LOCATION_REMOVED": {
        "name": "LOCATION_REMOVED",
        "type": 2,
        "value": "0x20",
        "desc": "除外区"
    },
    "LOCATION_EXTRA": {
        "name": "LOCATION_EXTRA",
        "type": 2,
        "value": "0x40",
        "desc": "额外"
    },
    "LOCATION_OVERLAY": {
        "name": "LOCATION_OVERLAY",
        "type": 2,
        "value": "0x80",
        "desc": "超量素材"
    },
    "LOCATION_ONFIELD": {
        "name": "LOCATION_ONFIELD",
        "type": 2,
        "value": "0x0c",
        "desc": "场上（LOCATION_MZONE+LOCATION_SZONE）"
    },
    "LOCATION_DECKBOT": {
        "name": "LOCATION_DECKBOT",
        "type": 2,
        "value": "0x10001",
        "desc": "弹回卡组底部"
    },
    "LOCATION_DECKSHF": {
        "name": "LOCATION_DECKSHF",
        "type": 2,
        "value": "0x20001",
        "desc": "弹回卡组并洗牌"
    },
    "LOCATION_FZONE": {
        "name": "LOCATION_FZONE",
        "type": 2,
        "value": "0x100",
        "desc": "场地区"
    },
    "LOCATION_PZONE": {
        "name": "LOCATION_PZONE",
        "type": 2,
        "value": "0x200",
        "desc": "灵摆区"
    },
    "POS_FACEUP_ATTACK": {
        "name": "POS_FACEUP_ATTACK",
        "type": 2,
        "value": "0x1",
        "desc": "表侧攻击"
    },
    "POS_FACEDOWN_ATTACK": {
        "name": "POS_FACEDOWN_ATTACK",
        "type": 2,
        "value": "0x2",
        "desc": "(reserved)"
    },
    "POS_FACEUP_DEFENSE": {
        "name": "POS_FACEUP_DEFENSE",
        "type": 2,
        "value": "0x4",
        "desc": "表侧守备"
    },
    "POS_FACEDOWN_DEFENSE": {
        "name": "POS_FACEDOWN_DEFENSE",
        "type": 2,
        "value": "0x8",
        "desc": "里侧守备"
    },
    "POS_FACEUP": {
        "name": "POS_FACEUP",
        "type": 2,
        "value": "0x5",
        "desc": "正面表示"
    },
    "POS_FACEDOWN": {
        "name": "POS_FACEDOWN",
        "type": 2,
        "value": "0xa",
        "desc": "背面表示"
    },
    "POS_ATTACK": {
        "name": "POS_ATTACK",
        "type": 2,
        "value": "0x3",
        "desc": "攻击表示"
    },
    "POS_DEFENSE": {
        "name": "POS_DEFENSE",
        "type": 2,
        "value": "0xc",
        "desc": "守备表示"
    },
    "NO_FLIP_EFFECT": {
        "name": "NO_FLIP_EFFECT",
        "type": 2,
        "value": "0x10000",
        "desc": "不发动反转效果"
    },
    "TYPE_MONSTER": {
        "name": "TYPE_MONSTER",
        "type": 2,
        "value": "0x1",
        "desc": "怪兽卡"
    },
    "TYPE_SPELL": {
        "name": "TYPE_SPELL",
        "type": 2,
        "value": "0x2",
        "desc": "魔法卡"
    },
    "TYPE_TRAP": {
        "name": "TYPE_TRAP",
        "type": 2,
        "value": "0x4",
        "desc": "陷阱卡"
    },
    "TYPE_NORMAL": {
        "name": "TYPE_NORMAL",
        "type": 2,
        "value": "0x10",
        "desc": "通常怪兽"
    },
    "TYPE_EFFECT": {
        "name": "TYPE_EFFECT",
        "type": 2,
        "value": "0x20",
        "desc": "效果"
    },
    "TYPE_FUSION": {
        "name": "TYPE_FUSION",
        "type": 2,
        "value": "0x40",
        "desc": "融合"
    },
    "TYPE_RITUAL": {
        "name": "TYPE_RITUAL",
        "type": 2,
        "value": "0x80",
        "desc": "仪式"
    },
    "TYPE_TRAPMONSTER": {
        "name": "TYPE_TRAPMONSTER",
        "type": 2,
        "value": "0x100",
        "desc": "陷阱怪兽"
    },
    "TYPE_SPIRIT": {
        "name": "TYPE_SPIRIT",
        "type": 2,
        "value": "0x200",
        "desc": "灵魂"
    },
    "TYPE_UNION": {
        "name": "TYPE_UNION",
        "type": 2,
        "value": "0x400",
        "desc": "同盟"
    },
    "TYPE_DUAL": {
        "name": "TYPE_DUAL",
        "type": 2,
        "value": "0x800",
        "desc": "二重"
    },
    "TYPE_TUNER": {
        "name": "TYPE_TUNER",
        "type": 2,
        "value": "0x1000",
        "desc": "调整"
    },
    "TYPE_SYNCHRO": {
        "name": "TYPE_SYNCHRO",
        "type": 2,
        "value": "0x2000",
        "desc": "同调"
    },
    "TYPE_TOKEN": {
        "name": "TYPE_TOKEN",
        "type": 2,
        "value": "0x4000",
        "desc": "衍生物"
    },
    "TYPE_QUICKPLAY": {
        "name": "TYPE_QUICKPLAY",
        "type": 2,
        "value": "0x10000",
        "desc": "速攻"
    },
    "TYPE_CONTINUOUS": {
        "name": "TYPE_CONTINUOUS",
        "type": 2,
        "value": "0x20000",
        "desc": "永续"
    },
    "TYPE_EQUIP": {
        "name": "TYPE_EQUIP",
        "type": 2,
        "value": "0x40000",
        "desc": "装备"
    },
    "TYPE_FIELD": {
        "name": "TYPE_FIELD",
        "type": 2,
        "value": "0x80000",
        "desc": "场地"
    },
    "TYPE_COUNTER": {
        "name": "TYPE_COUNTER",
        "type": 2,
        "value": "0x100000",
        "desc": "反击"
    },
    "TYPE_FLIP": {
        "name": "TYPE_FLIP",
        "type": 2,
        "value": "0x200000",
        "desc": "翻转"
    },
    "TYPE_TOON": {
        "name": "TYPE_TOON",
        "type": 2,
        "value": "0x400000",
        "desc": "卡通"
    },
    "TYPE_XYZ": {
        "name": "TYPE_XYZ",
        "type": 2,
        "value": "0x800000",
        "desc": "超量"
    },
    "TYPE_PENDULUM": {
        "name": "TYPE_PENDULUM",
        "type": 2,
        "value": "0x1000000",
        "desc": "灵摆"
    },
    "TYPE_SPSUMMON": {
        "name": "TYPE_SPSUMMON",
        "type": 2,
        "value": "0x2000000",
        "desc": "特殊召唤"
    },
    "TYPE_LINK": {
        "name": "TYPE_LINK",
        "type": 2,
        "value": "0x4000000",
        "desc": "连接"
    },
    "ATTRIBUTE_EARTH": {
        "name": "ATTRIBUTE_EARTH",
        "type": 2,
        "value": "0x01",
        "desc": "地"
    },
    "ATTRIBUTE_WATER": {
        "name": "ATTRIBUTE_WATER",
        "type": 2,
        "value": "0x02",
        "desc": "水"
    },
    "ATTRIBUTE_FIRE": {
        "name": "ATTRIBUTE_FIRE",
        "type": 2,
        "value": "0x04",
        "desc": "炎"
    },
    "ATTRIBUTE_WIND": {
        "name": "ATTRIBUTE_WIND",
        "type": 2,
        "value": "0x08",
        "desc": "风"
    },
    "ATTRIBUTE_LIGHT": {
        "name": "ATTRIBUTE_LIGHT",
        "type": 2,
        "value": "0x10",
        "desc": "光"
    },
    "ATTRIBUTE_DARK": {
        "name": "ATTRIBUTE_DARK",
        "type": 2,
        "value": "0x20",
        "desc": "暗"
    },
    "ATTRIBUTE_DIVINE": {
        "name": "ATTRIBUTE_DIVINE",
        "type": 2,
        "value": "0x40",
        "desc": "神"
    },
    "RACE_ALL": {
        "name": "RACE_ALL",
        "type": 2,
        "value": "0x1ffffff",
        "desc": "全种族"
    },
    "RACE_WARRIOR": {
        "name": "RACE_WARRIOR",
        "type": 2,
        "value": "0x1",
        "desc": "战士"
    },
    "RACE_SPELLCASTER": {
        "name": "RACE_SPELLCASTER",
        "type": 2,
        "value": "0x2",
        "desc": "魔法师"
    },
    "RACE_FAIRY": {
        "name": "RACE_FAIRY",
        "type": 2,
        "value": "0x4",
        "desc": "天使"
    },
    "RACE_FIEND": {
        "name": "RACE_FIEND",
        "type": 2,
        "value": "0x8",
        "desc": "恶魔"
    },
    "RACE_ZOMBIE": {
        "name": "RACE_ZOMBIE",
        "type": 2,
        "value": "0x10",
        "desc": "不死"
    },
    "RACE_MACHINE": {
        "name": "RACE_MACHINE",
        "type": 2,
        "value": "0x20",
        "desc": "机械"
    },
    "RACE_AQUA": {
        "name": "RACE_AQUA",
        "type": 2,
        "value": "0x40",
        "desc": "水"
    },
    "RACE_PYRO": {
        "name": "RACE_PYRO",
        "type": 2,
        "value": "0x80",
        "desc": "炎"
    },
    "RACE_ROCK": {
        "name": "RACE_ROCK",
        "type": 2,
        "value": "0x100",
        "desc": "岩石"
    },
    "RACE_WINDBEAST": {
        "name": "RACE_WINDBEAST",
        "type": 2,
        "value": "0x200",
        "desc": "鸟兽"
    },
    "RACE_PLANT": {
        "name": "RACE_PLANT",
        "type": 2,
        "value": "0x400",
        "desc": "植物"
    },
    "RACE_INSECT": {
        "name": "RACE_INSECT",
        "type": 2,
        "value": "0x800",
        "desc": "昆虫"
    },
    "RACE_THUNDER": {
        "name": "RACE_THUNDER",
        "type": 2,
        "value": "0x1000",
        "desc": "雷"
    },
    "RACE_DRAGON": {
        "name": "RACE_DRAGON",
        "type": 2,
        "value": "0x2000",
        "desc": "龙"
    },
    "RACE_BEAST": {
        "name": "RACE_BEAST",
        "type": 2,
        "value": "0x4000",
        "desc": "兽"
    },
    "RACE_BEASTWARRIOR": {
        "name": "RACE_BEASTWARRIOR",
        "type": 2,
        "value": "0x8000",
        "desc": "兽战士"
    },
    "RACE_DINOSAUR": {
        "name": "RACE_DINOSAUR",
        "type": 2,
        "value": "0x10000",
        "desc": "恐龙"
    },
    "RACE_FISH": {
        "name": "RACE_FISH",
        "type": 2,
        "value": "0x20000",
        "desc": "鱼"
    },
    "RACE_SEASERPENT": {
        "name": "RACE_SEASERPENT",
        "type": 2,
        "value": "0x40000",
        "desc": "海龙"
    },
    "RACE_REPTILE": {
        "name": "RACE_REPTILE",
        "type": 2,
        "value": "0x80000",
        "desc": "爬虫类"
    },
    "RACE_PSYCHO": {
        "name": "RACE_PSYCHO",
        "type": 2,
        "value": "0x100000",
        "desc": "念动力"
    },
    "RACE_DIVINE": {
        "name": "RACE_DIVINE",
        "type": 2,
        "value": "0x200000",
        "desc": "幻神兽"
    },
    "RACE_CREATORGOD": {
        "name": "RACE_CREATORGOD",
        "type": 2,
        "value": "0x400000",
        "desc": "创造神"
    },
    "RACE_WYRM": {
        "name": "RACE_WYRM",
        "type": 2,
        "value": "0x800000",
        "desc": "幻龙"
    },
    "RACE_CYBERSE": {
        "name": "RACE_CYBERSE",
        "type": 2,
        "value": "0x1000000",
        "desc": "电子界"
    },
    "REASON_DESTROY": {
        "name": "REASON_DESTROY",
        "type": 2,
        "value": "0x1",
        "desc": "破坏"
    },
    "REASON_RELEASE": {
        "name": "REASON_RELEASE",
        "type": 2,
        "value": "0x2",
        "desc": "解放"
    },
    "REASON_TEMPORARY": {
        "name": "REASON_TEMPORARY",
        "type": 2,
        "value": "0x4",
        "desc": "暂时"
    },
    "REASON_MATERIAL": {
        "name": "REASON_MATERIAL",
        "type": 2,
        "value": "0x8",
        "desc": "作为融合/同调/超量素材或用於儀式/升級召喚"
    },
    "REASON_SUMMON": {
        "name": "REASON_SUMMON",
        "type": 2,
        "value": "0x10",
        "desc": "召唤"
    },
    "REASON_BATTLE": {
        "name": "REASON_BATTLE",
        "type": 2,
        "value": "0x20",
        "desc": "战斗破坏"
    },
    "REASON_EFFECT": {
        "name": "REASON_EFFECT",
        "type": 2,
        "value": "0x40",
        "desc": "效果"
    },
    "REASON_COST": {
        "name": "REASON_COST",
        "type": 2,
        "value": "0x80",
        "desc": "用於代價或無法支付代價而破壞"
    },
    "REASON_ADJUST": {
        "name": "REASON_ADJUST",
        "type": 2,
        "value": "0x100",
        "desc": "调整（御前试合）"
    },
    "REASON_LOST_TARGET": {
        "name": "REASON_LOST_TARGET",
        "type": 2,
        "value": "0x200",
        "desc": "失去装备对象（被破坏）/失去叠放对象（不是被破坏）"
    },
    "REASON_RULE": {
        "name": "REASON_RULE",
        "type": 2,
        "value": "0x400",
        "desc": "规则"
    },
    "REASON_SPSUMMON": {
        "name": "REASON_SPSUMMON",
        "type": 2,
        "value": "0x800",
        "desc": "特殊召唤"
    },
    "REASON_DISSUMMON": {
        "name": "REASON_DISSUMMON",
        "type": 2,
        "value": "0x1000",
        "desc": "召唤失败"
    },
    "REASON_FLIP": {
        "name": "REASON_FLIP",
        "type": 2,
        "value": "0x2000",
        "desc": "翻转"
    },
    "REASON_DISCARD": {
        "name": "REASON_DISCARD",
        "type": 2,
        "value": "0x4000",
        "desc": "丢弃"
    },
    "REASON_RDAMAGE": {
        "name": "REASON_RDAMAGE",
        "type": 2,
        "value": "0x8000",
        "desc": "回復轉換後的傷害"
    },
    "REASON_RRECOVER": {
        "name": "REASON_RRECOVER",
        "type": 2,
        "value": "0x10000",
        "desc": "傷害轉換後的回復"
    },
    "REASON_RETURN": {
        "name": "REASON_RETURN",
        "type": 2,
        "value": "0x20000",
        "desc": "回到墓地"
    },
    "REASON_FUSION": {
        "name": "REASON_FUSION",
        "type": 2,
        "value": "0x40000",
        "desc": "用於融合召喚"
    },
    "REASON_SYNCHRO": {
        "name": "REASON_SYNCHRO",
        "type": 2,
        "value": "0x80000",
        "desc": "用於同调召喚"
    },
    "REASON_RITUAL": {
        "name": "REASON_RITUAL",
        "type": 2,
        "value": "0x100000",
        "desc": "用於仪式召喚"
    },
    "REASON_XYZ": {
        "name": "REASON_XYZ",
        "type": 2,
        "value": "0x200000",
        "desc": "用於超量召喚"
    },
    "REASON_REPLACE": {
        "name": "REASON_REPLACE",
        "type": 2,
        "value": "0x1000000",
        "desc": "代替"
    },
    "REASON_DRAW": {
        "name": "REASON_DRAW",
        "type": 2,
        "value": "0x2000000",
        "desc": "抽卡"
    },
    "REASON_REDIRECT": {
        "name": "REASON_REDIRECT",
        "type": 2,
        "value": "0x4000000",
        "desc": "改变去向（大宇宙，带菌等）"
    },
    "REASON_REVEAL": {
        "name": "REASON_REVEAL",
        "type": 2,
        "value": "0x8000000",
        "desc": "翻开卡组（森罗）"
    },
    "REASON_LINK": {
        "name": "REASON_LINK",
        "type": 2,
        "value": "0x10000000",
        "desc": "用于连接召唤"
    },
    "LOCATION_REASON_TOFIELD": {
        "name": "LOCATION_REASON_TOFIELD",
        "type": 2,
        "value": "0x1",
        "desc": "Duel.GetLocationCount()預設值,凱薩競技場"
    },
    "LOCATION_REASON_CONTROL": {
        "name": "LOCATION_REASON_CONTROL",
        "type": 2,
        "value": "0x2",
        "desc": "Card.IsControlerCanBeChanged()使用"
    },
    "SUMMON_TYPE_NORMAL": {
        "name": "SUMMON_TYPE_NORMAL",
        "type": 2,
        "value": "0x10000000",
        "desc": "通常召唤(EFFECT_SUMMON_PROC,EFFECT_SET_PROC 可用Value修改數值)"
    },
    "SUMMON_TYPE_ADVANCE": {
        "name": "SUMMON_TYPE_ADVANCE",
        "type": 2,
        "value": "0x11000000",
        "desc": "上级召唤"
    },
    "SUMMON_TYPE_DUAL": {
        "name": "SUMMON_TYPE_DUAL",
        "type": 2,
        "value": "0x12000000",
        "desc": "再度召唤（二重）"
    },
    "SUMMON_TYPE_FLIP": {
        "name": "SUMMON_TYPE_FLIP",
        "type": 2,
        "value": "0x20000000",
        "desc": "翻转召唤"
    },
    "SUMMON_TYPE_SPECIAL": {
        "name": "SUMMON_TYPE_SPECIAL",
        "type": 2,
        "value": "0x40000000",
        "desc": "特殊召唤(EFFECT_SPSUMMON_PROC,EFFECT_SPSUMMON_PROC_G 可用Value修改數值)"
    },
    "SUMMON_TYPE_FUSION": {
        "name": "SUMMON_TYPE_FUSION",
        "type": 2,
        "value": "0x43000000",
        "desc": "融合召唤"
    },
    "SUMMON_TYPE_RITUAL": {
        "name": "SUMMON_TYPE_RITUAL",
        "type": 2,
        "value": "0x45000000",
        "desc": "仪式召唤"
    },
    "SUMMON_TYPE_SYNCHRO": {
        "name": "SUMMON_TYPE_SYNCHRO",
        "type": 2,
        "value": "0x46000000",
        "desc": "同调召唤"
    },
    "SUMMON_TYPE_XYZ": {
        "name": "SUMMON_TYPE_XYZ",
        "type": 2,
        "value": "0x49000000",
        "desc": "超量召唤"
    },
    "SUMMON_TYPE_PENDULUM": {
        "name": "SUMMON_TYPE_PENDULUM",
        "type": 2,
        "value": "0x4a000000",
        "desc": "灵摆召唤"
    },
    "SUMMON_TYPE_LINK": {
        "name": "SUMMON_TYPE_LINK",
        "type": 2,
        "value": "0x4c000000",
        "desc": "连接召唤"
    },
    "STATUS_DISABLED": {
        "name": "STATUS_DISABLED",
        "type": 2,
        "value": "0x0001",
        "desc": "效果被无效"
    },
    "STATUS_TO_ENABLE": {
        "name": "STATUS_TO_ENABLE",
        "type": 2,
        "value": "0x0002",
        "desc": "将变成有效"
    },
    "STATUS_TO_DISABLE": {
        "name": "STATUS_TO_DISABLE",
        "type": 2,
        "value": "0x0004",
        "desc": "将变成无效"
    },
    "STATUS_PROC_COMPLETE": {
        "name": "STATUS_PROC_COMPLETE",
        "type": 2,
        "value": "0x0008",
        "desc": "完成正规召唤（解除苏生限制）"
    },
    "STATUS_SET_TURN": {
        "name": "STATUS_SET_TURN",
        "type": 2,
        "value": "0x0010",
        "desc": "在本回合覆盖"
    },
    "STATUS_NO_LEVEL": {
        "name": "STATUS_NO_LEVEL",
        "type": 2,
        "value": "0x0020",
        "desc": "无等级"
    },
    "STATUS_BATTLE_RESULT": {
        "name": "STATUS_BATTLE_RESULT",
        "type": 2,
        "value": "0x0040",
        "desc": "傷害計算結果預計要破壞的怪獸"
    },
    "STATUS_SPSUMMON_STEP": {
        "name": "STATUS_SPSUMMON_STEP",
        "type": 2,
        "value": "0x0080",
        "desc": "效果特召處理中"
    },
    "STATUS_FORM_CHANGED": {
        "name": "STATUS_FORM_CHANGED",
        "type": 2,
        "value": "0x0100",
        "desc": "改变过表示形式"
    },
    "STATUS_SUMMONING": {
        "name": "STATUS_SUMMONING",
        "type": 2,
        "value": "0x0200",
        "desc": "召唤中"
    },
    "STATUS_EFFECT_ENABLED": {
        "name": "STATUS_EFFECT_ENABLED",
        "type": 2,
        "value": "0x0400",
        "desc": "卡片準備就緒(不在移動、召喚、魔法陷阱發動中)"
    },
    "STATUS_SUMMON_TURN": {
        "name": "STATUS_SUMMON_TURN",
        "type": 2,
        "value": "0x0800",
        "desc": "在本回合召喚/SET"
    },
    "STATUS_DESTROY_CONFIRMED": {
        "name": "STATUS_DESTROY_CONFIRMED",
        "type": 2,
        "value": "0x1000",
        "desc": "破坏确定"
    },
    "STATUS_LEAVE_CONFIRMED": {
        "name": "STATUS_LEAVE_CONFIRMED",
        "type": 2,
        "value": "0x2000",
        "desc": "連鎖處理完後送去墓地的魔法陷阱"
    },
    "STATUS_BATTLE_DESTROYED": {
        "name": "STATUS_BATTLE_DESTROYED",
        "type": 2,
        "value": "0x4000",
        "desc": "战斗破坏确定後尚未移動"
    },
    "STATUS_COPYING_EFFECT": {
        "name": "STATUS_COPYING_EFFECT",
        "type": 2,
        "value": "0x8000",
        "desc": "复制效果"
    },
    "STATUS_CHAINING": {
        "name": "STATUS_CHAINING",
        "type": 2,
        "value": "0x10000",
        "desc": "正在連鎖串中"
    },
    "STATUS_SUMMON_DISABLED": {
        "name": "STATUS_SUMMON_DISABLED",
        "type": 2,
        "value": "0x20000",
        "desc": "召唤无效後尚未移動"
    },
    "STATUS_ACTIVATE_DISABLED": {
        "name": "STATUS_ACTIVATE_DISABLED",
        "type": 2,
        "value": "0x40000",
        "desc": "发动无效後尚未移動"
    },
    "STATUS_EFFECT_REPLACED": {
        "name": "STATUS_EFFECT_REPLACED",
        "type": 2,
        "value": "0x80000",
        "desc": "效果被替代(红莲霸权)"
    },
    "STATUS_FUTURE_FUSION": {
        "name": "STATUS_FUTURE_FUSION",
        "type": 2,
        "value": "0x100000",
        "desc": "未来融合特殊召唤(不触发融合素材效果)"
    },
    "STATUS_ATTACK_CANCELED": {
        "name": "STATUS_ATTACK_CANCELED",
        "type": 2,
        "value": "0x200000",
        "desc": "若其為攻擊者，則攻擊中止"
    },
    "STATUS_INITIALIZING": {
        "name": "STATUS_INITIALIZING",
        "type": 2,
        "value": "0x400000",
        "desc": "初始化.."
    },
    "STATUS_ACTIVATED": {
        "name": "STATUS_ACTIVATED",
        "type": 2,
        "value": "0x800000",
        "desc": "N/A"
    },
    "STATUS_JUST_POS": {
        "name": "STATUS_JUST_POS",
        "type": 2,
        "value": "0x1000000",
        "desc": "已改變表示形式(用於STATUS_CONTINUOUS_POS判定)"
    },
    "STATUS_CONTINUOUS_POS": {
        "name": "STATUS_CONTINUOUS_POS",
        "type": 2,
        "value": "0x2000000",
        "desc": "改變後再次設定成其他表示形式"
    },
    "STATUS_FORBIDDEN": {
        "name": "STATUS_FORBIDDEN",
        "type": 2,
        "value": "0x4000000",
        "desc": "不能play"
    },
    "STATUS_ACT_FROM_HAND": {
        "name": "STATUS_ACT_FROM_HAND",
        "type": 2,
        "value": "0x8000000",
        "desc": "從手牌发动"
    },
    "STATUS_OPPO_BATTLE": {
        "name": "STATUS_OPPO_BATTLE",
        "type": 2,
        "value": "0x10000000",
        "desc": "和對手的怪兽戰鬥"
    },
    "STATUS_FLIP_SUMMON_TURN": {
        "name": "STATUS_FLIP_SUMMON_TURN",
        "type": 2,
        "value": "0x20000000",
        "desc": "在本回合反转召唤"
    },
    "STATUS_SPSUMMON_TURN": {
        "name": "STATUS_SPSUMMON_TURN",
        "type": 2,
        "value": "0x40000000",
        "desc": "在本回合特殊召唤"
    },
    "ASSUME_CODE": {
        "name": "ASSUME_CODE",
        "type": 2,
        "value": "1"
    },
    "ASSUME_TYPE": {
        "name": "ASSUME_TYPE",
        "type": 2,
        "value": "2"
    },
    "ASSUME_LEVEL": {
        "name": "ASSUME_LEVEL",
        "type": 2,
        "value": "3"
    },
    "ASSUME_RANK": {
        "name": "ASSUME_RANK",
        "type": 2,
        "value": "4"
    },
    "ASSUME_ATTRIBUTE": {
        "name": "ASSUME_ATTRIBUTE",
        "type": 2,
        "value": "5"
    },
    "ASSUME_RACE": {
        "name": "ASSUME_RACE",
        "type": 2,
        "value": "6"
    },
    "ASSUME_ATTACK": {
        "name": "ASSUME_ATTACK",
        "type": 2,
        "value": "7"
    },
    "ASSUME_DEFENSE": {
        "name": "ASSUME_DEFENSE",
        "type": 2,
        "value": "8"
    },
    "LINK_MARKER_BOTTOM_LEFT": {
        "name": "LINK_MARKER_BOTTOM_LEFT",
        "type": 2,
        "value": "0x001",
        "desc": "↙"
    },
    "LINK_MARKER_BOTTOM": {
        "name": "LINK_MARKER_BOTTOM",
        "type": 2,
        "value": "0x002",
        "desc": "↓"
    },
    "LINK_MARKER_BOTTOM_RIGHT": {
        "name": "LINK_MARKER_BOTTOM_RIGHT",
        "type": 2,
        "value": "0x004",
        "desc": "↘"
    },
    "LINK_MARKER_LEFT": {
        "name": "LINK_MARKER_LEFT",
        "type": 2,
        "value": "0x008",
        "desc": "←"
    },
    "LINK_MARKER_RIGHT": {
        "name": "LINK_MARKER_RIGHT",
        "type": 2,
        "value": "0x020",
        "desc": "→"
    },
    "LINK_MARKER_TOP_LEFT": {
        "name": "LINK_MARKER_TOP_LEFT",
        "type": 2,
        "value": "0x040",
        "desc": "↖"
    },
    "LINK_MARKER_TOP": {
        "name": "LINK_MARKER_TOP",
        "type": 2,
        "value": "0x080",
        "desc": "↑"
    },
    "LINK_MARKER_TOP_RIGHT": {
        "name": "LINK_MARKER_TOP_RIGHT",
        "type": 2,
        "value": "0x100",
        "desc": "↗"
    },
    "COUNTER_WITHOUT_PERMIT": {
        "name": "COUNTER_WITHOUT_PERMIT",
        "type": 2,
        "value": "0x1000",
        "desc": "可以放置在非特定對象的指示物"
    },
    "COUNTER_NEED_ENABLE": {
        "name": "COUNTER_NEED_ENABLE",
        "type": 2,
        "value": "0x2000",
        "desc": "在卡片本身放置上述指示物的標記(卡片守衛)"
    },
    "PHASE_DRAW": {
        "name": "PHASE_DRAW",
        "type": 2,
        "value": "0x01",
        "desc": "抽卡阶段"
    },
    "PHASE_STANDBY": {
        "name": "PHASE_STANDBY",
        "type": 2,
        "value": "0x02",
        "desc": "准备阶段"
    },
    "PHASE_MAIN1": {
        "name": "PHASE_MAIN1",
        "type": 2,
        "value": "0x04",
        "desc": "主要阶段1"
    },
    "PHASE_BATTLE_START": {
        "name": "PHASE_BATTLE_START",
        "type": 2,
        "value": "0x08",
        "desc": "战斗阶段开始"
    },
    "PHASE_BATTLE_STEP": {
        "name": "PHASE_BATTLE_STEP",
        "type": 2,
        "value": "0x10",
        "desc": "战斗步驟"
    },
    "PHASE_DAMAGE": {
        "name": "PHASE_DAMAGE",
        "type": 2,
        "value": "0x20",
        "desc": "伤害步驟"
    },
    "PHASE_DAMAGE_CAL": {
        "name": "PHASE_DAMAGE_CAL",
        "type": 2,
        "value": "0x40",
        "desc": "伤害计算时"
    },
    "PHASE_BATTLE": {
        "name": "PHASE_BATTLE",
        "type": 2,
        "value": "0x80",
        "desc": "战斗阶段結束"
    },
    "PHASE_MAIN2": {
        "name": "PHASE_MAIN2",
        "type": 2,
        "value": "0x100",
        "desc": "主要阶段2"
    },
    "PHASE_END": {
        "name": "PHASE_END",
        "type": 2,
        "value": "0x200",
        "desc": "结束阶段"
    },
    "PLAYER_NONE": {
        "name": "PLAYER_NONE",
        "type": 2,
        "value": "2",
        "desc": "2个玩家都不是"
    },
    "PLAYER_ALL": {
        "name": "PLAYER_ALL",
        "type": 2,
        "value": "3",
        "desc": "2个玩家都是"
    },
    "CHAININFO_CHAIN_COUNT": {
        "name": "CHAININFO_CHAIN_COUNT",
        "type": 2,
        "value": "0x01",
        "desc": "连锁数"
    },
    "CHAININFO_TRIGGERING_EFFECT": {
        "name": "CHAININFO_TRIGGERING_EFFECT",
        "type": 2,
        "value": "0x02",
        "desc": "连锁的效果"
    },
    "CHAININFO_TRIGGERING_PLAYER": {
        "name": "CHAININFO_TRIGGERING_PLAYER",
        "type": 2,
        "value": "0x04",
        "desc": "连锁的玩家"
    },
    "CHAININFO_TRIGGERING_CONTROLER": {
        "name": "CHAININFO_TRIGGERING_CONTROLER",
        "type": 2,
        "value": "0x08",
        "desc": "连锁的卡的控制者"
    },
    "CHAININFO_TRIGGERING_LOCATION": {
        "name": "CHAININFO_TRIGGERING_LOCATION",
        "type": 2,
        "value": "0x10",
        "desc": "连锁的位置"
    },
    "CHAININFO_TRIGGERING_SEQUENCE": {
        "name": "CHAININFO_TRIGGERING_SEQUENCE",
        "type": 2,
        "value": "0x20",
        "desc": "连锁的位置的编号（指怪兽和魔陷区的格子）"
    },
    "CHAININFO_TARGET_CARDS": {
        "name": "CHAININFO_TARGET_CARDS",
        "type": 2,
        "value": "0x40",
        "desc": "连锁的效果的对象（以下3个需要在target函数里设置）"
    },
    "CHAININFO_TARGET_PLAYER": {
        "name": "CHAININFO_TARGET_PLAYER",
        "type": 2,
        "value": "0x80",
        "desc": "连锁的效果的对象（玩家）"
    },
    "CHAININFO_TARGET_PARAM": {
        "name": "CHAININFO_TARGET_PARAM",
        "type": 2,
        "value": "0x100",
        "desc": "连锁的效果的参数值"
    },
    "CHAININFO_DISABLE_REASON": {
        "name": "CHAININFO_DISABLE_REASON",
        "type": 2,
        "value": "0x200",
        "desc": "无效的原因"
    },
    "CHAININFO_DISABLE_PLAYER": {
        "name": "CHAININFO_DISABLE_PLAYER",
        "type": 2,
        "value": "0x400",
        "desc": "无效的玩家"
    },
    "CHAININFO_CHAIN_ID": {
        "name": "CHAININFO_CHAIN_ID",
        "type": 2,
        "value": "0x800",
        "desc": "连锁ID"
    },
    "CHAININFO_TYPE": {
        "name": "CHAININFO_TYPE",
        "type": 2,
        "value": "0x1000",
        "desc": "连锁类型"
    },
    "CHAININFO_EXTTYPE": {
        "name": "CHAININFO_EXTTYPE",
        "type": 2,
        "value": "0x2000",
        "desc": "连锁额外类型"
    },
    "CHAININFO_TRIGGERING_POSITION": {
        "name": "CHAININFO_TRIGGERING_POSITION",
        "type": 2,
        "value": "0x4000",
        "desc": "连锁发生时的表示形式"
    },
    "CHAININFO_TRIGGERING_CODE": {
        "name": "CHAININFO_TRIGGERING_CODE",
        "type": 2,
        "value": "0x8000",
        "desc": "连锁发生时的密码"
    },
    "CHAININFO_TRIGGERING_CODE2": {
        "name": "CHAININFO_TRIGGERING_CODE2",
        "type": 2,
        "value": "0x10000",
        "desc": "连锁发生时的其他密码"
    },
    "CHAININFO_TRIGGERING_LEVEL": {
        "name": "CHAININFO_TRIGGERING_LEVEL",
        "type": 2,
        "value": "0x40000",
        "desc": "连锁发生时的等级"
    },
    "CHAININFO_TRIGGERING_RANK": {
        "name": "CHAININFO_TRIGGERING_RANK",
        "type": 2,
        "value": "0x80000",
        "desc": "连锁发生时的阶级"
    },
    "CHAININFO_TRIGGERING_ATTRIBUTE": {
        "name": "CHAININFO_TRIGGERING_ATTRIBUTE",
        "type": 2,
        "value": "0x100000",
        "desc": "连锁发生时的属性"
    },
    "CHAININFO_TRIGGERING_RACE": {
        "name": "CHAININFO_TRIGGERING_RACE",
        "type": 2,
        "value": "0x200000",
        "desc": "连锁发生时的种族"
    },
    "CHAININFO_TRIGGERING_ATTACK": {
        "name": "CHAININFO_TRIGGERING_ATTACK",
        "type": 2,
        "value": "0x400000",
        "desc": "连锁发生时的攻击力"
    },
    "CHAININFO_TRIGGERING_DEFENSE": {
        "name": "CHAININFO_TRIGGERING_DEFENSE",
        "type": 2,
        "value": "0x800000",
        "desc": "连锁发生时的守备力"
    },
    "RESET_SELF_TURN": {
        "name": "RESET_SELF_TURN",
        "type": 2,
        "value": "0x10000000",
        "desc": "自己回合的階段重置"
    },
    "RESET_OPPO_TURN": {
        "name": "RESET_OPPO_TURN",
        "type": 2,
        "value": "0x20000000",
        "desc": "对方回合的階段重置"
    },
    "RESET_PHASE": {
        "name": "RESET_PHASE",
        "type": 2,
        "value": "0x40000000",
        "desc": "阶段结束重置(一般和上面那些阶段配合使用)"
    },
    "RESET_CHAIN": {
        "name": "RESET_CHAIN",
        "type": 2,
        "value": "0x80000000",
        "desc": "连锁结束重置"
    },
    "RESET_EVENT": {
        "name": "RESET_EVENT",
        "type": 2,
        "value": "0x1000",
        "desc": "指定的條件下重置(一般和下面这些事件配合使用)"
    },
    "RESET_CARD": {
        "name": "RESET_CARD",
        "type": 2,
        "value": "0x2000",
        "desc": "重置Owner為指定卡片的效果"
    },
    "RESET_CODE": {
        "name": "RESET_CODE",
        "type": 2,
        "value": "0x4000",
        "desc": "重置指定Code的single效果(不含EFFECT_FLAG_SINGLE_RANGE)"
    },
    "RESET_COPY": {
        "name": "RESET_COPY",
        "type": 2,
        "value": "0x8000",
        "desc": "重置以复制取得的效果"
    },
    "RESET_DISABLE": {
        "name": "RESET_DISABLE",
        "type": 2,
        "value": "0x00010000",
        "desc": "效果无效重置(只適用於owner"
    },
    "RESET_TURN_SET": {
        "name": "RESET_TURN_SET",
        "type": 2,
        "value": "0x00020000",
        "desc": "变里侧重置"
    },
    "RESET_TOGRAVE": {
        "name": "RESET_TOGRAVE",
        "type": 2,
        "value": "0x00040000",
        "desc": "去墓地重置(以下皆為事件觸發前重置)"
    },
    "RESET_REMOVE": {
        "name": "RESET_REMOVE",
        "type": 2,
        "value": "0x00080000",
        "desc": "除外重置"
    },
    "RESET_TEMP_REMOVE": {
        "name": "RESET_TEMP_REMOVE",
        "type": 2,
        "value": "0x00100000",
        "desc": "暂时除外重置"
    },
    "RESET_TOHAND": {
        "name": "RESET_TOHAND",
        "type": 2,
        "value": "0x00200000",
        "desc": "回手牌或加入手牌重置"
    },
    "RESET_TODECK": {
        "name": "RESET_TODECK",
        "type": 2,
        "value": "0x00400000",
        "desc": "回卡组重置"
    },
    "RESET_LEAVE": {
        "name": "RESET_LEAVE",
        "type": 2,
        "value": "0x00800000",
        "desc": "从场上移到其他位置/超量叠放重置"
    },
    "RESET_TOFIELD": {
        "name": "RESET_TOFIELD",
        "type": 2,
        "value": "0x01000000",
        "desc": "到场上重置(move_to_field())"
    },
    "RESET_CONTROL": {
        "name": "RESET_CONTROL",
        "type": 2,
        "value": "0x02000000",
        "desc": "控制者变更重置"
    },
    "RESET_OVERLAY": {
        "name": "RESET_OVERLAY",
        "type": 2,
        "value": "0x04000000",
        "desc": "超量叠放重置"
    },
    "RESET_MSCHANGE": {
        "name": "RESET_MSCHANGE",
        "type": 2,
        "value": "0x08000000",
        "desc": "从怪兽区到魔法区，或者从魔法区到怪兽区(move_to_field()、寶玉獸)"
    },
    "RESETS_STANDARD": {
        "name": "RESETS_STANDARD",
        "type": 2,
        "value": "0x1fe0000",
        "desc": "RESET_TOFIELD+RESET_LEAVE+RESET_TODECK+RESET_TOHAND+RESET_TEMP_REMOVE+RESET_REMOVE+RESET_TOGRAVE+RESET_TURN_SET"
    },
    "RESETS_REDIRECT": {
        "name": "RESETS_REDIRECT",
        "type": 2,
        "value": "0xc7e0000",
        "desc": "RESETS_STANDARD+RESET_OVERLAY+RESET_MSCHANGE-RESET_TOFIELD-RESET_LEAVE (EFFECT_LEAVE_FIELD_REDIRECT)"
    },
    "EFFECT_TYPE_SINGLE": {
        "name": "EFFECT_TYPE_SINGLE",
        "type": 2,
        "value": "0x0001",
        "desc": "自己状态变化时触发"
    },
    "EFFECT_TYPE_FIELD": {
        "name": "EFFECT_TYPE_FIELD",
        "type": 2,
        "value": "0x0002",
        "desc": "场上所有卡状态变化时触发"
    },
    "EFFECT_TYPE_EQUIP": {
        "name": "EFFECT_TYPE_EQUIP",
        "type": 2,
        "value": "0x0004",
        "desc": "装备效果"
    },
    "EFFECT_TYPE_ACTIONS": {
        "name": "EFFECT_TYPE_ACTIONS",
        "type": 2,
        "value": "0x0008",
        "desc": "触发型，以下類型會自動添加此屬性（对峙的G）"
    },
    "EFFECT_TYPE_ACTIVATE": {
        "name": "EFFECT_TYPE_ACTIVATE",
        "type": 2,
        "value": "0x0010",
        "desc": "魔陷发动"
    },
    "EFFECT_TYPE_FLIP": {
        "name": "EFFECT_TYPE_FLIP",
        "type": 2,
        "value": "0x0020",
        "desc": "翻转效果"
    },
    "EFFECT_TYPE_IGNITION": {
        "name": "EFFECT_TYPE_IGNITION",
        "type": 2,
        "value": "0x0040",
        "desc": "起动效果"
    },
    "EFFECT_TYPE_TRIGGER_O": {
        "name": "EFFECT_TYPE_TRIGGER_O",
        "type": 2,
        "value": "0x0080",
        "desc": "诱发选发效果"
    },
    "EFFECT_TYPE_QUICK_O": {
        "name": "EFFECT_TYPE_QUICK_O",
        "type": 2,
        "value": "0x0100",
        "desc": "诱发即时效果"
    },
    "EFFECT_TYPE_TRIGGER_F": {
        "name": "EFFECT_TYPE_TRIGGER_F",
        "type": 2,
        "value": "0x0200",
        "desc": "诱发必发效果"
    },
    "EFFECT_TYPE_QUICK_F": {
        "name": "EFFECT_TYPE_QUICK_F",
        "type": 2,
        "value": "0x0400",
        "desc": "诱发即时必发效果（熊猫龙等）"
    },
    "EFFECT_TYPE_CONTINUOUS": {
        "name": "EFFECT_TYPE_CONTINUOUS",
        "type": 2,
        "value": "0x0800",
        "desc": "由事件觸發的輔助用效果/永續效果"
    },
    "EFFECT_TYPE_XMATERIAL": {
        "name": "EFFECT_TYPE_XMATERIAL",
        "type": 2,
        "value": "0x1000",
        "desc": "作为超量素材时超量怪兽获得的效果（十二兽）"
    },
    "EFFECT_TYPE_GRANT": {
        "name": "EFFECT_TYPE_GRANT",
        "type": 2,
        "value": "0x2000",
        "desc": "使其他卡片获得效果（天气模样）"
    },
    "EFFECT_TYPE_TARGET": {
        "name": "EFFECT_TYPE_TARGET",
        "type": 2,
        "value": "0x4000",
        "desc": "影响持续取的对象的效果（基本只用于魔陷）"
    },
    "EFFECT_FLAG_INITIAL": {
        "name": "EFFECT_FLAG_INITIAL",
        "type": 2,
        "value": "0x0001",
        "desc": "可以发动的"
    },
    "EFFECT_FLAG_FUNC_VALUE": {
        "name": "EFFECT_FLAG_FUNC_VALUE",
        "type": 2,
        "value": "0x0002",
        "desc": "此效果的Value属性是函数"
    },
    "EFFECT_FLAG_COUNT_LIMIT": {
        "name": "EFFECT_FLAG_COUNT_LIMIT",
        "type": 2,
        "value": "0x0004",
        "desc": "发动次数限制"
    },
    "EFFECT_FLAG_FIELD_ONLY": {
        "name": "EFFECT_FLAG_FIELD_ONLY",
        "type": 2,
        "value": "0x0008",
        "desc": "此效果是注册给全局环境的"
    },
    "EFFECT_FLAG_CARD_TARGET": {
        "name": "EFFECT_FLAG_CARD_TARGET",
        "type": 2,
        "value": "0x0010",
        "desc": "取对象效果"
    },
    "EFFECT_FLAG_IGNORE_RANGE": {
        "name": "EFFECT_FLAG_IGNORE_RANGE",
        "type": 2,
        "value": "0x0020",
        "desc": "影响所有区域的卡（大宇宙）"
    },
    "EFFECT_FLAG_ABSOLUTE_TARGET": {
        "name": "EFFECT_FLAG_ABSOLUTE_TARGET",
        "type": 2,
        "value": "0x0040",
        "desc": "Target Range不会因为控制权的改变而改变"
    },
    "EFFECT_FLAG_IGNORE_IMMUNE": {
        "name": "EFFECT_FLAG_IGNORE_IMMUNE",
        "type": 2,
        "value": "0x0080",
        "desc": "无视效果免疫"
    },
    "EFFECT_FLAG_SET_AVAILABLE": {
        "name": "EFFECT_FLAG_SET_AVAILABLE",
        "type": 2,
        "value": "0x0100",
        "desc": "影响场上里侧的卡/裡側狀態可發動"
    },
    "EFFECT_FLAG_CANNOT_NEGATE": {
        "name": "EFFECT_FLAG_CANNOT_NEGATE",
        "type": 2,
        "value": "0x0200",
        "desc": "含有'此效果不會被無效'的敘述"
    },
    "EFFECT_FLAG_CANNOT_DISABLE": {
        "name": "EFFECT_FLAG_CANNOT_DISABLE",
        "type": 2,
        "value": "0x0400",
        "desc": "效果不会被无效"
    },
    "EFFECT_FLAG_PLAYER_TARGET": {
        "name": "EFFECT_FLAG_PLAYER_TARGET",
        "type": 2,
        "value": "0x0800",
        "desc": "以玩家为对象"
    },
    "EFFECT_FLAG_BOTH_SIDE": {
        "name": "EFFECT_FLAG_BOTH_SIDE",
        "type": 2,
        "value": "0x1000",
        "desc": "双方都能使用（部分场地，弹压）"
    },
    "EFFECT_FLAG_COPY_INHERIT": {
        "name": "EFFECT_FLAG_COPY_INHERIT",
        "type": 2,
        "value": "0x2000",
        "desc": "若由复制的效果產生則继承其Reset属性"
    },
    "EFFECT_FLAG_DAMAGE_STEP": {
        "name": "EFFECT_FLAG_DAMAGE_STEP",
        "type": 2,
        "value": "0x4000",
        "desc": "可以在伤害步骤发动"
    },
    "EFFECT_FLAG_DAMAGE_CAL": {
        "name": "EFFECT_FLAG_DAMAGE_CAL",
        "type": 2,
        "value": "0x8000",
        "desc": "可以在伤害计算时发动"
    },
    "EFFECT_FLAG_DELAY": {
        "name": "EFFECT_FLAG_DELAY",
        "type": 2,
        "value": "0x10000",
        "desc": "場合型誘發效果、用於永續效果的EFFECT_TYPE_CONTINUOUS、神之化身/恐惧之源的攻击力变化最后计算"
    },
    "EFFECT_FLAG_SINGLE_RANGE": {
        "name": "EFFECT_FLAG_SINGLE_RANGE",
        "type": 2,
        "value": "0x20000",
        "desc": "只对自己有效"
    },
    "EFFECT_FLAG_UNCOPYABLE": {
        "name": "EFFECT_FLAG_UNCOPYABLE",
        "type": 2,
        "value": "0x40000",
        "desc": "不能复制（效果外文本）"
    },
    "EFFECT_FLAG_OATH": {
        "name": "EFFECT_FLAG_OATH",
        "type": 2,
        "value": "0x80000",
        "desc": "誓约效果"
    },
    "EFFECT_FLAG_SPSUM_PARAM": {
        "name": "EFFECT_FLAG_SPSUM_PARAM",
        "type": 2,
        "value": "0x100000",
        "desc": "指定召喚/规则特殊召唤的位置和表示形式(熔岩魔神)"
    },
    "EFFECT_FLAG_REPEAT": {
        "name": "EFFECT_FLAG_REPEAT",
        "type": 2,
        "value": "0x200000",
        "desc": "神之化身的攻击力重复计算"
    },
    "EFFECT_FLAG_NO_TURN_RESET": {
        "name": "EFFECT_FLAG_NO_TURN_RESET",
        "type": 2,
        "value": "0x400000",
        "desc": "发条等“这张卡在场上只能发动一次”的效果"
    },
    "EFFECT_FLAG_EVENT_PLAYER": {
        "name": "EFFECT_FLAG_EVENT_PLAYER",
        "type": 2,
        "value": "0x800000",
        "desc": "视为对方玩家的效果（动作？）"
    },
    "EFFECT_FLAG_OWNER_RELATE": {
        "name": "EFFECT_FLAG_OWNER_RELATE",
        "type": 2,
        "value": "0x1000000",
        "desc": "与效果owner关联的效果"
    },
    "EFFECT_FLAG_CANNOT_INACTIVATE": {
        "name": "EFFECT_FLAG_CANNOT_INACTIVATE",
        "type": 2,
        "value": "0x2000000",
        "desc": "發動不會被無效"
    },
    "EFFECT_FLAG_CLIENT_HINT": {
        "name": "EFFECT_FLAG_CLIENT_HINT",
        "type": 2,
        "value": "0x4000000",
        "desc": "客户端提示"
    },
    "EFFECT_FLAG_CONTINUOUS_TARGET": {
        "name": "EFFECT_FLAG_CONTINUOUS_TARGET",
        "type": 2,
        "value": "0x8000000",
        "desc": "建立持續對象的永續魔法、永續陷阱"
    },
    "EFFECT_FLAG_LIMIT_ZONE": {
        "name": "EFFECT_FLAG_LIMIT_ZONE",
        "type": 2,
        "value": "0x10000000",
        "desc": "限制魔法·陷阱卡发动时可以放置的区域"
    },
    "EFFECT_FLAG_COF": {
        "name": "EFFECT_FLAG_COF",
        "type": 2,
        "value": "0x20000000",
        "desc": "N/A"
    },
    "EFFECT_FLAG_CVAL_CHECK": {
        "name": "EFFECT_FLAG_CVAL_CHECK",
        "type": 2,
        "value": "0x40000000",
        "desc": "N/A"
    },
    "EFFECT_FLAG_IMMEDIATELY_APPLY": {
        "name": "EFFECT_FLAG_IMMEDIATELY_APPLY",
        "type": 2,
        "value": "0x80000000",
        "desc": "卡在发动时效果就立即适用"
    },
    "EFFECT_FLAG2_NAGA": {
        "name": "EFFECT_FLAG2_NAGA",
        "type": 2,
        "value": "0x0001",
        "desc": "N/A"
    },
    "EFFECT_FLAG2_COF": {
        "name": "EFFECT_FLAG2_COF",
        "type": 2,
        "value": "0x0002",
        "desc": "通常魔法卡在MP1以外发动（邪恶的仪式的特殊处理）"
    },
    "EFFECT_IMMUNE_EFFECT": {
        "name": "EFFECT_IMMUNE_EFFECT",
        "type": 2,
        "value": "1",
        "desc": "效果免疫"
    },
    "EFFECT_DISABLE": {
        "name": "EFFECT_DISABLE",
        "type": 2,
        "value": "2",
        "desc": "效果无效（技能抽取）"
    },
    "EFFECT_CANNOT_DISABLE": {
        "name": "EFFECT_CANNOT_DISABLE",
        "type": 2,
        "value": "3",
        "desc": "效果不能被无效"
    },
    "EFFECT_SET_CONTROL": {
        "name": "EFFECT_SET_CONTROL",
        "type": 2,
        "value": "4",
        "desc": "设置控制权"
    },
    "EFFECT_CANNOT_CHANGE_CONTROL": {
        "name": "EFFECT_CANNOT_CHANGE_CONTROL",
        "type": 2,
        "value": "5",
        "desc": "不能改变控制权"
    },
    "EFFECT_CANNOT_ACTIVATE": {
        "name": "EFFECT_CANNOT_ACTIVATE",
        "type": 2,
        "value": "6",
        "desc": "玩家不能发动效果"
    },
    "EFFECT_CANNOT_TRIGGER": {
        "name": "EFFECT_CANNOT_TRIGGER",
        "type": 2,
        "value": "7",
        "desc": "卡不能发动效果"
    },
    "EFFECT_DISABLE_EFFECT": {
        "name": "EFFECT_DISABLE_EFFECT",
        "type": 2,
        "value": "8",
        "desc": "效果无效（聖杯）"
    },
    "EFFECT_DISABLE_CHAIN": {
        "name": "EFFECT_DISABLE_CHAIN",
        "type": 2,
        "value": "9",
        "desc": "在連鎖串中無效(processor.cpp)"
    },
    "EFFECT_DISABLE_TRAPMONSTER": {
        "name": "EFFECT_DISABLE_TRAPMONSTER",
        "type": 2,
        "value": "10",
        "desc": "陷阱怪兽无效"
    },
    "EFFECT_CANNOT_INACTIVATE": {
        "name": "EFFECT_CANNOT_INACTIVATE",
        "type": 2,
        "value": "12",
        "desc": "发动不能被无效"
    },
    "EFFECT_CANNOT_DISEFFECT": {
        "name": "EFFECT_CANNOT_DISEFFECT",
        "type": 2,
        "value": "13",
        "desc": "效果處理時不能被无效"
    },
    "EFFECT_CANNOT_CHANGE_POSITION": {
        "name": "EFFECT_CANNOT_CHANGE_POSITION",
        "type": 2,
        "value": "14",
        "desc": "不能改变表示形式"
    },
    "EFFECT_TRAP_ACT_IN_HAND": {
        "name": "EFFECT_TRAP_ACT_IN_HAND",
        "type": 2,
        "value": "15",
        "desc": "陷阱可以从手牌发动"
    },
    "EFFECT_TRAP_ACT_IN_SET_TURN": {
        "name": "EFFECT_TRAP_ACT_IN_SET_TURN",
        "type": 2,
        "value": "16",
        "desc": "陷阱可以在盖放的回合发动"
    },
    "EFFECT_REMAIN_FIELD": {
        "name": "EFFECT_REMAIN_FIELD",
        "type": 2,
        "value": "17",
        "desc": "X回合内留在场上（光之护封剑等）"
    },
    "EFFECT_MONSTER_SSET": {
        "name": "EFFECT_MONSTER_SSET",
        "type": 2,
        "value": "18",
        "desc": "怪兽可以在魔陷区放置"
    },
    "EFFECT_CANNOT_SUMMON": {
        "name": "EFFECT_CANNOT_SUMMON",
        "type": 2,
        "value": "20",
        "desc": "不能召唤怪兽"
    },
    "EFFECT_CANNOT_FLIP_SUMMON": {
        "name": "EFFECT_CANNOT_FLIP_SUMMON",
        "type": 2,
        "value": "21",
        "desc": "不能翻转召唤怪兽"
    },
    "EFFECT_CANNOT_SPECIAL_SUMMON": {
        "name": "EFFECT_CANNOT_SPECIAL_SUMMON",
        "type": 2,
        "value": "22",
        "desc": "不能特殊召唤怪兽"
    },
    "EFFECT_CANNOT_MSET": {
        "name": "EFFECT_CANNOT_MSET",
        "type": 2,
        "value": "23",
        "desc": "不能覆盖怪兽"
    },
    "EFFECT_CANNOT_SSET": {
        "name": "EFFECT_CANNOT_SSET",
        "type": 2,
        "value": "24",
        "desc": "不能覆盖魔陷"
    },
    "EFFECT_CANNOT_DRAW": {
        "name": "EFFECT_CANNOT_DRAW",
        "type": 2,
        "value": "25",
        "desc": "不能抽卡"
    },
    "EFFECT_CANNOT_DISABLE_SUMMON": {
        "name": "EFFECT_CANNOT_DISABLE_SUMMON",
        "type": 2,
        "value": "26",
        "desc": "召唤不会无效"
    },
    "EFFECT_CANNOT_DISABLE_SPSUMMON": {
        "name": "EFFECT_CANNOT_DISABLE_SPSUMMON",
        "type": 2,
        "value": "27",
        "desc": "特殊召唤不会无效"
    },
    "EFFECT_SET_SUMMON_COUNT_LIMIT": {
        "name": "EFFECT_SET_SUMMON_COUNT_LIMIT",
        "type": 2,
        "value": "28",
        "desc": "限制每回合放置怪兽次数"
    },
    "EFFECT_EXTRA_SUMMON_COUNT": {
        "name": "EFFECT_EXTRA_SUMMON_COUNT",
        "type": 2,
        "value": "29",
        "desc": "增加召唤（通常召唤）次数"
    },
    "EFFECT_SPSUMMON_CONDITION": {
        "name": "EFFECT_SPSUMMON_CONDITION",
        "type": 2,
        "value": "30",
        "desc": "特殊召唤条件"
    },
    "EFFECT_REVIVE_LIMIT": {
        "name": "EFFECT_REVIVE_LIMIT",
        "type": 2,
        "value": "31",
        "desc": "有苏生限制的怪獸(Card.EnableReviveLimit())"
    },
    "EFFECT_SUMMON_PROC": {
        "name": "EFFECT_SUMMON_PROC",
        "type": 2,
        "value": "32",
        "desc": "召唤规则效果"
    },
    "EFFECT_LIMIT_SUMMON_PROC": {
        "name": "EFFECT_LIMIT_SUMMON_PROC",
        "type": 2,
        "value": "33",
        "desc": "召唤规则限制"
    },
    "EFFECT_SPSUMMON_PROC": {
        "name": "EFFECT_SPSUMMON_PROC",
        "type": 2,
        "value": "34",
        "desc": "特殊召唤规则"
    },
    "EFFECT_EXTRA_SET_COUNT": {
        "name": "EFFECT_EXTRA_SET_COUNT",
        "type": 2,
        "value": "35",
        "desc": "增加盖放（通常召唤）次数"
    },
    "EFFECT_SET_PROC": {
        "name": "EFFECT_SET_PROC",
        "type": 2,
        "value": "36",
        "desc": "放置（通常召唤）规则"
    },
    "EFFECT_LIMIT_SET_PROC": {
        "name": "EFFECT_LIMIT_SET_PROC",
        "type": 2,
        "value": "37",
        "desc": "放置（通常召唤）规则限制"
    },
    "EFFECT_DEVINE_LIGHT": {
        "name": "EFFECT_DEVINE_LIGHT",
        "type": 2,
        "value": "38",
        "desc": "神圣光辉（魔术礼帽）"
    },
    "EFFECT_CANNOT_DISABLE_FLIP_SUMMON": {
        "name": "EFFECT_CANNOT_DISABLE_FLIP_SUMMON",
        "type": 2,
        "value": "39",
        "desc": "翻转召唤不会无效"
    },
    "EFFECT_INDESTRUCTABLE": {
        "name": "EFFECT_INDESTRUCTABLE",
        "type": 2,
        "value": "40",
        "desc": "不会被破坏"
    },
    "EFFECT_INDESTRUCTABLE_EFFECT": {
        "name": "EFFECT_INDESTRUCTABLE_EFFECT",
        "type": 2,
        "value": "41",
        "desc": "不会被效果破坏"
    },
    "EFFECT_INDESTRUCTABLE_BATTLE": {
        "name": "EFFECT_INDESTRUCTABLE_BATTLE",
        "type": 2,
        "value": "42",
        "desc": "不会被战斗破坏"
    },
    "EFFECT_UNRELEASABLE_SUM": {
        "name": "EFFECT_UNRELEASABLE_SUM",
        "type": 2,
        "value": "43",
        "desc": "不能做上级召唤的祭品"
    },
    "EFFECT_UNRELEASABLE_NONSUM": {
        "name": "EFFECT_UNRELEASABLE_NONSUM",
        "type": 2,
        "value": "44",
        "desc": "不能做上级召唤以外的祭品"
    },
    "EFFECT_DESTROY_SUBSTITUTE": {
        "name": "EFFECT_DESTROY_SUBSTITUTE",
        "type": 2,
        "value": "45",
        "desc": "必選的代替破壞(此卡被破壞時用其他卡代替)"
    },
    "EFFECT_CANNOT_RELEASE": {
        "name": "EFFECT_CANNOT_RELEASE",
        "type": 2,
        "value": "46",
        "desc": "不能进行解放行为"
    },
    "EFFECT_INDESTRUCTABLE_COUNT": {
        "name": "EFFECT_INDESTRUCTABLE_COUNT",
        "type": 2,
        "value": "47",
        "desc": "一回合几次不会被破坏"
    },
    "EFFECT_UNRELEASABLE_EFFECT": {
        "name": "EFFECT_UNRELEASABLE_EFFECT",
        "type": 2,
        "value": "48",
        "desc": "不能被解放"
    },
    "EFFECT_DESTROY_REPLACE": {
        "name": "EFFECT_DESTROY_REPLACE",
        "type": 2,
        "value": "50",
        "desc": "可選的代替破壞(將破壞改成其他動作)"
    },
    "EFFECT_RELEASE_REPLACE": {
        "name": "EFFECT_RELEASE_REPLACE",
        "type": 2,
        "value": "51",
        "desc": "代替解放"
    },
    "EFFECT_SEND_REPLACE": {
        "name": "EFFECT_SEND_REPLACE",
        "type": 2,
        "value": "52",
        "desc": "可以不送去XX而送去OO（甜点城堡等）"
    },
    "EFFECT_CANNOT_DISCARD_HAND": {
        "name": "EFFECT_CANNOT_DISCARD_HAND",
        "type": 2,
        "value": "55",
        "desc": "不能丢弃手牌"
    },
    "EFFECT_CANNOT_DISCARD_DECK": {
        "name": "EFFECT_CANNOT_DISCARD_DECK",
        "type": 2,
        "value": "56",
        "desc": "不能把卡组的卡送去墓地"
    },
    "EFFECT_CANNOT_USE_AS_COST": {
        "name": "EFFECT_CANNOT_USE_AS_COST",
        "type": 2,
        "value": "57",
        "desc": "不能作为COST使用"
    },
    "EFFECT_CANNOT_PLACE_COUNTER": {
        "name": "EFFECT_CANNOT_PLACE_COUNTER",
        "type": 2,
        "value": "58",
        "desc": "不能放置counter"
    },
    "EFFECT_CANNOT_TO_GRAVE_AS_COST": {
        "name": "EFFECT_CANNOT_TO_GRAVE_AS_COST",
        "type": 2,
        "value": "59",
        "desc": "不能作为COST送去墓地"
    },
    "EFFECT_LEAVE_FIELD_REDIRECT": {
        "name": "EFFECT_LEAVE_FIELD_REDIRECT",
        "type": 2,
        "value": "60",
        "desc": "离场时重新指定去向"
    },
    "EFFECT_TO_HAND_REDIRECT": {
        "name": "EFFECT_TO_HAND_REDIRECT",
        "type": 2,
        "value": "61",
        "desc": "回手牌时重新指定去向"
    },
    "EFFECT_TO_DECK_REDIRECT": {
        "name": "EFFECT_TO_DECK_REDIRECT",
        "type": 2,
        "value": "62",
        "desc": "回卡组时重新指定去向"
    },
    "EFFECT_TO_GRAVE_REDIRECT": {
        "name": "EFFECT_TO_GRAVE_REDIRECT",
        "type": 2,
        "value": "63",
        "desc": "去墓地时重新指定去向"
    },
    "EFFECT_REMOVE_REDIRECT": {
        "name": "EFFECT_REMOVE_REDIRECT",
        "type": 2,
        "value": "64",
        "desc": "除外时重新指定去向"
    },
    "EFFECT_CANNOT_TO_HAND": {
        "name": "EFFECT_CANNOT_TO_HAND",
        "type": 2,
        "value": "65",
        "desc": "不能加入手牌"
    },
    "EFFECT_CANNOT_TO_DECK": {
        "name": "EFFECT_CANNOT_TO_DECK",
        "type": 2,
        "value": "66",
        "desc": "不能回卡组"
    },
    "EFFECT_CANNOT_REMOVE": {
        "name": "EFFECT_CANNOT_REMOVE",
        "type": 2,
        "value": "67",
        "desc": "不能除外"
    },
    "EFFECT_CANNOT_TO_GRAVE": {
        "name": "EFFECT_CANNOT_TO_GRAVE",
        "type": 2,
        "value": "68",
        "desc": "不能去墓地"
    },
    "EFFECT_CANNOT_TURN_SET": {
        "name": "EFFECT_CANNOT_TURN_SET",
        "type": 2,
        "value": "69",
        "desc": "不能变里侧"
    },
    "EFFECT_CANNOT_BE_BATTLE_TARGET": {
        "name": "EFFECT_CANNOT_BE_BATTLE_TARGET",
        "type": 2,
        "value": "70",
        "desc": "不能成为攻击对象"
    },
    "EFFECT_CANNOT_BE_EFFECT_TARGET": {
        "name": "EFFECT_CANNOT_BE_EFFECT_TARGET",
        "type": 2,
        "value": "71",
        "desc": "不能成为效果对象"
    },
    "EFFECT_IGNORE_BATTLE_TARGET": {
        "name": "EFFECT_IGNORE_BATTLE_TARGET",
        "type": 2,
        "value": "72",
        "desc": "不能成为攻击对象-鶸型（传说的渔人）"
    },
    "EFFECT_CANNOT_DIRECT_ATTACK": {
        "name": "EFFECT_CANNOT_DIRECT_ATTACK",
        "type": 2,
        "value": "73",
        "desc": "不能直接攻击"
    },
    "EFFECT_DIRECT_ATTACK": {
        "name": "EFFECT_DIRECT_ATTACK",
        "type": 2,
        "value": "74",
        "desc": "可以直接攻击"
    },
    "EFFECT_DUAL_STATUS": {
        "name": "EFFECT_DUAL_STATUS",
        "type": 2,
        "value": "75",
        "desc": "二重状态"
    },
    "EFFECT_EQUIP_LIMIT": {
        "name": "EFFECT_EQUIP_LIMIT",
        "type": 2,
        "value": "76",
        "desc": "装备对象限制"
    },
    "EFFECT_DUAL_SUMMONABLE": {
        "name": "EFFECT_DUAL_SUMMONABLE",
        "type": 2,
        "value": "77",
        "desc": "可以再度召唤"
    },
    "EFFECT_REVERSE_DAMAGE": {
        "name": "EFFECT_REVERSE_DAMAGE",
        "type": 2,
        "value": "80",
        "desc": "伤害变回复"
    },
    "EFFECT_REVERSE_RECOVER": {
        "name": "EFFECT_REVERSE_RECOVER",
        "type": 2,
        "value": "81",
        "desc": "回复变伤害"
    },
    "EFFECT_CHANGE_DAMAGE": {
        "name": "EFFECT_CHANGE_DAMAGE",
        "type": 2,
        "value": "82",
        "desc": "改变伤害数值"
    },
    "EFFECT_REFLECT_DAMAGE": {
        "name": "EFFECT_REFLECT_DAMAGE",
        "type": 2,
        "value": "83",
        "desc": "反射伤害"
    },
    "EFFECT_CANNOT_ATTACK": {
        "name": "EFFECT_CANNOT_ATTACK",
        "type": 2,
        "value": "85",
        "desc": "不能攻击"
    },
    "EFFECT_CANNOT_ATTACK_ANNOUNCE": {
        "name": "EFFECT_CANNOT_ATTACK_ANNOUNCE",
        "type": 2,
        "value": "86",
        "desc": "不能攻击宣言"
    },
    "EFFECT_CANNOT_CHANGE_POS_E": {
        "name": "EFFECT_CANNOT_CHANGE_POS_E",
        "type": 2,
        "value": "87",
        "desc": "不会被卡的效果变成守备表示（攻击性云魔物）"
    },
    "EFFECT_ACTIVATE_COST": {
        "name": "EFFECT_ACTIVATE_COST",
        "type": 2,
        "value": "90",
        "desc": "发动代价（魔力之枷）"
    },
    "EFFECT_SUMMON_COST": {
        "name": "EFFECT_SUMMON_COST",
        "type": 2,
        "value": "91",
        "desc": "召唤代价"
    },
    "EFFECT_SPSUMMON_COST": {
        "name": "EFFECT_SPSUMMON_COST",
        "type": 2,
        "value": "92",
        "desc": "特殊召唤代价（暴君龙）"
    },
    "EFFECT_FLIPSUMMON_COST": {
        "name": "EFFECT_FLIPSUMMON_COST",
        "type": 2,
        "value": "93",
        "desc": "翻转召唤代价"
    },
    "EFFECT_MSET_COST": {
        "name": "EFFECT_MSET_COST",
        "type": 2,
        "value": "94",
        "desc": "怪兽放置代价"
    },
    "EFFECT_SSET_COST": {
        "name": "EFFECT_SSET_COST",
        "type": 2,
        "value": "95",
        "desc": "魔陷放置代价"
    },
    "EFFECT_ATTACK_COST": {
        "name": "EFFECT_ATTACK_COST",
        "type": 2,
        "value": "96",
        "desc": "攻击代价（霞之谷猎鹰）"
    },
    "EFFECT_UPDATE_ATTACK": {
        "name": "EFFECT_UPDATE_ATTACK",
        "type": 2,
        "value": "100",
        "desc": "改变攻击力（攻击力增加/减少）"
    },
    "EFFECT_SET_ATTACK": {
        "name": "EFFECT_SET_ATTACK",
        "type": 2,
        "value": "101",
        "desc": "设置攻击力(永續型效果、攻擊力變成X特殊召喚)"
    },
    "EFFECT_SET_ATTACK_FINAL": {
        "name": "EFFECT_SET_ATTACK_FINAL",
        "type": 2,
        "value": "102",
        "desc": "设置最终攻击力(所有入連鎖的改變攻擊力)"
    },
    "EFFECT_SET_BASE_ATTACK": {
        "name": "EFFECT_SET_BASE_ATTACK",
        "type": 2,
        "value": "103",
        "desc": "设置原本攻击力"
    },
    "EFFECT_UPDATE_DEFENSE": {
        "name": "EFFECT_UPDATE_DEFENSE",
        "type": 2,
        "value": "104",
        "desc": "改变防御力"
    },
    "EFFECT_SET_DEFENSE": {
        "name": "EFFECT_SET_DEFENSE",
        "type": 2,
        "value": "105",
        "desc": "设置防御力"
    },
    "EFFECT_SET_DEFENSE_FINAL": {
        "name": "EFFECT_SET_DEFENSE_FINAL",
        "type": 2,
        "value": "106",
        "desc": "设置最终防御力"
    },
    "EFFECT_SET_BASE_DEFENSE": {
        "name": "EFFECT_SET_BASE_DEFENSE",
        "type": 2,
        "value": "107",
        "desc": "设置原本防御力"
    },
    "EFFECT_REVERSE_UPDATE": {
        "name": "EFFECT_REVERSE_UPDATE",
        "type": 2,
        "value": "108",
        "desc": "倒置改变攻击力、防御力（天邪鬼）"
    },
    "EFFECT_SWAP_AD": {
        "name": "EFFECT_SWAP_AD",
        "type": 2,
        "value": "109",
        "desc": "交换攻防(超級漏洞人)"
    },
    "EFFECT_SWAP_BASE_AD": {
        "name": "EFFECT_SWAP_BASE_AD",
        "type": 2,
        "value": "110",
        "desc": "交换原本攻防"
    },
    "EFFECT_SWAP_ATTACK_FINAL": {
        "name": "EFFECT_SWAP_ATTACK_FINAL",
        "type": 2,
        "value": "111",
        "desc": "N/A"
    },
    "EFFECT_SWAP_DEFENSE_FINAL": {
        "name": "EFFECT_SWAP_DEFENSE_FINAL",
        "type": 2,
        "value": "112",
        "desc": "N/A"
    },
    "EFFECT_ADD_CODE": {
        "name": "EFFECT_ADD_CODE",
        "type": 2,
        "value": "113",
        "desc": "增加卡名"
    },
    "EFFECT_CHANGE_CODE": {
        "name": "EFFECT_CHANGE_CODE",
        "type": 2,
        "value": "114",
        "desc": "改变卡名"
    },
    "EFFECT_ADD_TYPE": {
        "name": "EFFECT_ADD_TYPE",
        "type": 2,
        "value": "115",
        "desc": "增加卡片种类（types）"
    },
    "EFFECT_REMOVE_TYPE": {
        "name": "EFFECT_REMOVE_TYPE",
        "type": 2,
        "value": "116",
        "desc": "删除卡片种类"
    },
    "EFFECT_CHANGE_TYPE": {
        "name": "EFFECT_CHANGE_TYPE",
        "type": 2,
        "value": "117",
        "desc": "改变卡片种类"
    },
    "EFFECT_ADD_RACE": {
        "name": "EFFECT_ADD_RACE",
        "type": 2,
        "value": "120",
        "desc": "增加种族"
    },
    "EFFECT_REMOVE_RACE": {
        "name": "EFFECT_REMOVE_RACE",
        "type": 2,
        "value": "121",
        "desc": "删除种族"
    },
    "EFFECT_CHANGE_RACE": {
        "name": "EFFECT_CHANGE_RACE",
        "type": 2,
        "value": "122",
        "desc": "改变种族"
    },
    "EFFECT_ADD_ATTRIBUTE": {
        "name": "EFFECT_ADD_ATTRIBUTE",
        "type": 2,
        "value": "125",
        "desc": "增加属性"
    },
    "EFFECT_REMOVE_ATTRIBUTE": {
        "name": "EFFECT_REMOVE_ATTRIBUTE",
        "type": 2,
        "value": "126",
        "desc": "删除属性"
    },
    "EFFECT_CHANGE_ATTRIBUTE": {
        "name": "EFFECT_CHANGE_ATTRIBUTE",
        "type": 2,
        "value": "127",
        "desc": "改变属性"
    },
    "EFFECT_UPDATE_LEVEL": {
        "name": "EFFECT_UPDATE_LEVEL",
        "type": 2,
        "value": "130",
        "desc": "改变等级"
    },
    "EFFECT_CHANGE_LEVEL": {
        "name": "EFFECT_CHANGE_LEVEL",
        "type": 2,
        "value": "131",
        "desc": "设置等级"
    },
    "EFFECT_UPDATE_RANK": {
        "name": "EFFECT_UPDATE_RANK",
        "type": 2,
        "value": "132",
        "desc": "改变阶级"
    },
    "EFFECT_CHANGE_RANK": {
        "name": "EFFECT_CHANGE_RANK",
        "type": 2,
        "value": "133",
        "desc": "设置阶级"
    },
    "EFFECT_UPDATE_LSCALE": {
        "name": "EFFECT_UPDATE_LSCALE",
        "type": 2,
        "value": "134",
        "desc": "改变左刻度"
    },
    "EFFECT_CHANGE_LSCALE": {
        "name": "EFFECT_CHANGE_LSCALE",
        "type": 2,
        "value": "135",
        "desc": "设置左刻度"
    },
    "EFFECT_UPDATE_RSCALE": {
        "name": "EFFECT_UPDATE_RSCALE",
        "type": 2,
        "value": "136",
        "desc": "改变右刻度"
    },
    "EFFECT_CHANGE_RSCALE": {
        "name": "EFFECT_CHANGE_RSCALE",
        "type": 2,
        "value": "137",
        "desc": "设置右刻度"
    },
    "EFFECT_SET_POSITION": {
        "name": "EFFECT_SET_POSITION",
        "type": 2,
        "value": "140",
        "desc": "設定表示形式"
    },
    "EFFECT_SELF_DESTROY": {
        "name": "EFFECT_SELF_DESTROY",
        "type": 2,
        "value": "141",
        "desc": "不入連鎖的破壞（罪系列等）"
    },
    "EFFECT_SELF_TOGRAVE": {
        "name": "EFFECT_SELF_TOGRAVE",
        "type": 2,
        "value": "142",
        "desc": "不入連鎖的送墓"
    },
    "EFFECT_DOUBLE_TRIBUTE": {
        "name": "EFFECT_DOUBLE_TRIBUTE",
        "type": 2,
        "value": "150",
        "desc": "可以作为2个祭品"
    },
    "EFFECT_DECREASE_TRIBUTE": {
        "name": "EFFECT_DECREASE_TRIBUTE",
        "type": 2,
        "value": "151",
        "desc": "减少祭品"
    },
    "EFFECT_DECREASE_TRIBUTE_SET": {
        "name": "EFFECT_DECREASE_TRIBUTE_SET",
        "type": 2,
        "value": "152",
        "desc": "减少放置怪兽的祭品"
    },
    "EFFECT_EXTRA_RELEASE": {
        "name": "EFFECT_EXTRA_RELEASE",
        "type": 2,
        "value": "153",
        "desc": "必須使用的代替解放（灵魂交错）"
    },
    "EFFECT_TRIBUTE_LIMIT": {
        "name": "EFFECT_TRIBUTE_LIMIT",
        "type": 2,
        "value": "154",
        "desc": "祭品限制"
    },
    "EFFECT_EXTRA_RELEASE_SUM": {
        "name": "EFFECT_EXTRA_RELEASE_SUM",
        "type": 2,
        "value": "155",
        "desc": "代替召唤解放（帝王的烈旋）"
    },
    "EFFECT_TRIPLE_TRIBUTE": {
        "name": "EFFECT_TRIPLE_TRIBUTE",
        "type": 2,
        "value": "156",
        "desc": "N/A"
    },
    "EFFECT_ADD_EXTRA_TRIBUTE": {
        "name": "EFFECT_ADD_EXTRA_TRIBUTE",
        "type": 2,
        "value": "157",
        "desc": "增加可使用的祭品（真龙）"
    },
    "EFFECT_EXTRA_RELEASE_NONSUM": {
        "name": "EFFECT_EXTRA_RELEASE_NONSUM",
        "type": 2,
        "value": "158",
        "desc": "代替效果COST的解放（闇黒世界）"
    },
    "EFFECT_PUBLIC": {
        "name": "EFFECT_PUBLIC",
        "type": 2,
        "value": "160",
        "desc": "公开手牌"
    },
    "EFFECT_COUNTER_PERMIT": {
        "name": "EFFECT_COUNTER_PERMIT",
        "type": 2,
        "value": "0x10000",
        "desc": "允许放置指示物类型"
    },
    "EFFECT_COUNTER_LIMIT": {
        "name": "EFFECT_COUNTER_LIMIT",
        "type": 2,
        "value": "0x20000",
        "desc": "允许放置指示物数量"
    },
    "EFFECT_RCOUNTER_REPLACE": {
        "name": "EFFECT_RCOUNTER_REPLACE",
        "type": 2,
        "value": "0x30000",
        "desc": "代替取除指示物"
    },
    "EFFECT_LPCOST_CHANGE": {
        "name": "EFFECT_LPCOST_CHANGE",
        "type": 2,
        "value": "170",
        "desc": "改变生命值代价數值"
    },
    "EFFECT_LPCOST_REPLACE": {
        "name": "EFFECT_LPCOST_REPLACE",
        "type": 2,
        "value": "171",
        "desc": "以其他動作代替生命值代价"
    },
    "EFFECT_SKIP_DP": {
        "name": "EFFECT_SKIP_DP",
        "type": 2,
        "value": "180",
        "desc": "跳过抽卡阶段"
    },
    "EFFECT_SKIP_SP": {
        "name": "EFFECT_SKIP_SP",
        "type": 2,
        "value": "181",
        "desc": "跳过准备阶段"
    },
    "EFFECT_SKIP_M1": {
        "name": "EFFECT_SKIP_M1",
        "type": 2,
        "value": "182",
        "desc": "跳过主要阶段1"
    },
    "EFFECT_SKIP_BP": {
        "name": "EFFECT_SKIP_BP",
        "type": 2,
        "value": "183",
        "desc": "跳过战斗阶段"
    },
    "EFFECT_SKIP_M2": {
        "name": "EFFECT_SKIP_M2",
        "type": 2,
        "value": "184",
        "desc": "跳过主要阶段2"
    },
    "EFFECT_CANNOT_BP": {
        "name": "EFFECT_CANNOT_BP",
        "type": 2,
        "value": "185",
        "desc": "不能进入战斗阶段"
    },
    "EFFECT_CANNOT_M2": {
        "name": "EFFECT_CANNOT_M2",
        "type": 2,
        "value": "186",
        "desc": "不能进入主要阶段2"
    },
    "EFFECT_CANNOT_EP": {
        "name": "EFFECT_CANNOT_EP",
        "type": 2,
        "value": "187",
        "desc": "不能进入结束阶段"
    },
    "EFFECT_SKIP_TURN": {
        "name": "EFFECT_SKIP_TURN",
        "type": 2,
        "value": "188",
        "desc": "跳过整个回合"
    },
    "EFFECT_DEFENSE_ATTACK": {
        "name": "EFFECT_DEFENSE_ATTACK",
        "type": 2,
        "value": "190",
        "desc": "可以守备表示攻击"
    },
    "EFFECT_MUST_ATTACK": {
        "name": "EFFECT_MUST_ATTACK",
        "type": 2,
        "value": "191",
        "desc": "必须攻击"
    },
    "EFFECT_FIRST_ATTACK": {
        "name": "EFFECT_FIRST_ATTACK",
        "type": 2,
        "value": "192",
        "desc": "必须第一个攻击"
    },
    "EFFECT_ATTACK_ALL": {
        "name": "EFFECT_ATTACK_ALL",
        "type": 2,
        "value": "193",
        "desc": "可以攻击所有怪兽"
    },
    "EFFECT_EXTRA_ATTACK": {
        "name": "EFFECT_EXTRA_ATTACK",
        "type": 2,
        "value": "194",
        "desc": "增加攻击次数"
    },
    "EFFECT_MUST_BE_ATTACKED": {
        "name": "EFFECT_MUST_BE_ATTACKED",
        "type": 2,
        "value": "195",
        "desc": "N/A"
    },
    "EFFECT_ONLY_BE_ATTACKED": {
        "name": "EFFECT_ONLY_BE_ATTACKED",
        "type": 2,
        "value": "196",
        "desc": "只能攻击此卡"
    },
    "EFFECT_ATTACK_DISABLED": {
        "name": "EFFECT_ATTACK_DISABLED",
        "type": 2,
        "value": "197",
        "desc": "攻击已被無效(Duel.NegateAttack()成功的標記)"
    },
    "EFFECT_NO_BATTLE_DAMAGE": {
        "name": "EFFECT_NO_BATTLE_DAMAGE",
        "type": 2,
        "value": "200",
        "desc": "不会给对方造成战斗伤害"
    },
    "EFFECT_AVOID_BATTLE_DAMAGE": {
        "name": "EFFECT_AVOID_BATTLE_DAMAGE",
        "type": 2,
        "value": "201",
        "desc": "不会对自己造成战斗伤害"
    },
    "EFFECT_REFLECT_BATTLE_DAMAGE": {
        "name": "EFFECT_REFLECT_BATTLE_DAMAGE",
        "type": 2,
        "value": "202",
        "desc": "反弹战斗伤害"
    },
    "EFFECT_PIERCE": {
        "name": "EFFECT_PIERCE",
        "type": 2,
        "value": "203",
        "desc": "贯穿伤害"
    },
    "EFFECT_BATTLE_DESTROY_REDIRECT": {
        "name": "EFFECT_BATTLE_DESTROY_REDIRECT",
        "type": 2,
        "value": "204",
        "desc": "战斗破坏时重新指定去向"
    },
    "EFFECT_BATTLE_DAMAGE_TO_EFFECT": {
        "name": "EFFECT_BATTLE_DAMAGE_TO_EFFECT",
        "type": 2,
        "value": "205",
        "desc": "战斗伤害视为效果伤害"
    },
    "EFFECT_BOTH_BATTLE_DAMAGE": {
        "name": "EFFECT_BOTH_BATTLE_DAMAGE",
        "type": 2,
        "value": "206",
        "desc": "战斗伤害由双方承受"
    },
    "EFFECT_ALSO_BATTLE_DAMAGE": {
        "name": "EFFECT_ALSO_BATTLE_DAMAGE",
        "type": 2,
        "value": "207",
        "desc": "对自己的战斗伤害让对方也承受"
    },
    "EFFECT_CHANGE_BATTLE_DAMAGE": {
        "name": "EFFECT_CHANGE_BATTLE_DAMAGE",
        "type": 2,
        "value": "208",
        "desc": "改变战斗伤害"
    },
    "EFFECT_TOSS_COIN_REPLACE": {
        "name": "EFFECT_TOSS_COIN_REPLACE",
        "type": 2,
        "value": "220",
        "desc": "重新抛硬币"
    },
    "EFFECT_TOSS_DICE_REPLACE": {
        "name": "EFFECT_TOSS_DICE_REPLACE",
        "type": 2,
        "value": "221",
        "desc": "重新掷骰子"
    },
    "EFFECT_FUSION_MATERIAL": {
        "name": "EFFECT_FUSION_MATERIAL",
        "type": 2,
        "value": "230",
        "desc": "指定融合素材的條件"
    },
    "EFFECT_CHAIN_MATERIAL": {
        "name": "EFFECT_CHAIN_MATERIAL",
        "type": 2,
        "value": "231",
        "desc": "玩家受到連鎖物質的效果影響"
    },
    "EFFECT_SYNCHRO_MATERIAL": {
        "name": "EFFECT_SYNCHRO_MATERIAL",
        "type": 2,
        "value": "232",
        "desc": "可以当作同调素材"
    },
    "EFFECT_XYZ_MATERIAL": {
        "name": "EFFECT_XYZ_MATERIAL",
        "type": 2,
        "value": "233",
        "desc": "可以当作超量素材"
    },
    "EFFECT_FUSION_SUBSTITUTE": {
        "name": "EFFECT_FUSION_SUBSTITUTE",
        "type": 2,
        "value": "234",
        "desc": "代替融合素材"
    },
    "EFFECT_CANNOT_BE_FUSION_MATERIAL": {
        "name": "EFFECT_CANNOT_BE_FUSION_MATERIAL",
        "type": 2,
        "value": "235",
        "desc": "不能做融合素材"
    },
    "EFFECT_CANNOT_BE_SYNCHRO_MATERIAL": {
        "name": "EFFECT_CANNOT_BE_SYNCHRO_MATERIAL",
        "type": 2,
        "value": "236",
        "desc": "不能做同调素材"
    },
    "EFFECT_SYNCHRO_MATERIAL_CUSTOM": {
        "name": "EFFECT_SYNCHRO_MATERIAL_CUSTOM",
        "type": 2,
        "value": "237",
        "desc": "自定义Tuner的同调过程"
    },
    "EFFECT_CANNOT_BE_XYZ_MATERIAL": {
        "name": "EFFECT_CANNOT_BE_XYZ_MATERIAL",
        "type": 2,
        "value": "238",
        "desc": "不能做超量素材"
    },
    "EFFECT_CANNOT_BE_LINK_MATERIAL": {
        "name": "EFFECT_CANNOT_BE_LINK_MATERIAL",
        "type": 2,
        "value": "239",
        "desc": "不能做连接素材"
    },
    "EFFECT_SYNCHRO_LEVEL": {
        "name": "EFFECT_SYNCHRO_LEVEL",
        "type": 2,
        "value": "240",
        "desc": "做同调素材时的等级"
    },
    "EFFECT_RITUAL_LEVEL": {
        "name": "EFFECT_RITUAL_LEVEL",
        "type": 2,
        "value": "241",
        "desc": "做仪式祭品时的等级"
    },
    "EFFECT_XYZ_LEVEL": {
        "name": "EFFECT_XYZ_LEVEL",
        "type": 2,
        "value": "242",
        "desc": "做超量素材时的等级"
    },
    "EFFECT_EXTRA_RITUAL_MATERIAL": {
        "name": "EFFECT_EXTRA_RITUAL_MATERIAL",
        "type": 2,
        "value": "243",
        "desc": "在墓地当做仪式祭品"
    },
    "EFFECT_NONTUNER": {
        "name": "EFFECT_NONTUNER",
        "type": 2,
        "value": "244",
        "desc": "同时当作调整以外的怪兽（幻影王 幽骑）"
    },
    "EFFECT_OVERLAY_REMOVE_REPLACE": {
        "name": "EFFECT_OVERLAY_REMOVE_REPLACE",
        "type": 2,
        "value": "245",
        "desc": "代替去除超量素材"
    },
    "EFFECT_SCRAP_CHIMERA": {
        "name": "EFFECT_SCRAP_CHIMERA",
        "type": 2,
        "value": "246",
        "desc": "废铁奇美拉"
    },
    "EFFECT_TUNE_MAGICIAN_X": {
        "name": "EFFECT_TUNE_MAGICIAN_X",
        "type": 2,
        "value": "247",
        "desc": "调弦之魔术师超量素材限制"
    },
    "EFFECT_TUNE_MAGICIAN_F": {
        "name": "EFFECT_TUNE_MAGICIAN_F",
        "type": 2,
        "value": "248",
        "desc": "调弦之魔术师融合素材限制"
    },
    "EFFECT_PRE_MONSTER": {
        "name": "EFFECT_PRE_MONSTER",
        "type": 2,
        "value": "250",
        "desc": "可存取怪獸的各項數值(Card.AddMonsterAttribute()專用)"
    },
    "EFFECT_MATERIAL_CHECK": {
        "name": "EFFECT_MATERIAL_CHECK",
        "type": 2,
        "value": "251",
        "desc": "检查素材"
    },
    "EFFECT_DISABLE_FIELD": {
        "name": "EFFECT_DISABLE_FIELD",
        "type": 2,
        "value": "260",
        "desc": "无效区域（扰乱王等）"
    },
    "EFFECT_USE_EXTRA_MZONE": {
        "name": "EFFECT_USE_EXTRA_MZONE",
        "type": 2,
        "value": "261",
        "desc": "怪兽区域封锁"
    },
    "EFFECT_USE_EXTRA_SZONE": {
        "name": "EFFECT_USE_EXTRA_SZONE",
        "type": 2,
        "value": "262",
        "desc": "魔法区域封锁"
    },
    "EFFECT_MAX_MZONE": {
        "name": "EFFECT_MAX_MZONE",
        "type": 2,
        "value": "263",
        "desc": "怪獸区格數上限"
    },
    "EFFECT_MAX_SZONE": {
        "name": "EFFECT_MAX_SZONE",
        "type": 2,
        "value": "264",
        "desc": "魔陷区格數上限"
    },
    "EFFECT_MUST_USE_MZONE": {
        "name": "EFFECT_MUST_USE_MZONE",
        "type": 2,
        "value": "265",
        "desc": "必须使用怪兽区的格子"
    },
    "EFFECT_HAND_LIMIT": {
        "name": "EFFECT_HAND_LIMIT",
        "type": 2,
        "value": "270",
        "desc": "手牌数量限制"
    },
    "EFFECT_DRAW_COUNT": {
        "name": "EFFECT_DRAW_COUNT",
        "type": 2,
        "value": "271",
        "desc": "抽卡阶段的抽卡数"
    },
    "EFFECT_SPIRIT_DONOT_RETURN": {
        "name": "EFFECT_SPIRIT_DONOT_RETURN",
        "type": 2,
        "value": "280",
        "desc": "灵魂怪兽不返回手牌"
    },
    "EFFECT_SPIRIT_MAYNOT_RETURN": {
        "name": "EFFECT_SPIRIT_MAYNOT_RETURN",
        "type": 2,
        "value": "281",
        "desc": "灵魂怪兽可以不返回手牌"
    },
    "EFFECT_CHANGE_ENVIRONMENT": {
        "name": "EFFECT_CHANGE_ENVIRONMENT",
        "type": 2,
        "value": "290",
        "desc": "改变场地"
    },
    "EFFECT_NECRO_VALLEY": {
        "name": "EFFECT_NECRO_VALLEY",
        "type": 2,
        "value": "291",
        "desc": "王家长眠之谷"
    },
    "EFFECT_FORBIDDEN": {
        "name": "EFFECT_FORBIDDEN",
        "type": 2,
        "value": "292",
        "desc": "不能Play(禁止令)"
    },
    "EFFECT_NECRO_VALLEY_IM": {
        "name": "EFFECT_NECRO_VALLEY_IM",
        "type": 2,
        "value": "293",
        "desc": "不受「王家长眠之谷」的影响"
    },
    "EFFECT_REVERSE_DECK": {
        "name": "EFFECT_REVERSE_DECK",
        "type": 2,
        "value": "294",
        "desc": "翻转卡组"
    },
    "EFFECT_REMOVE_BRAINWASHING": {
        "name": "EFFECT_REMOVE_BRAINWASHING",
        "type": 2,
        "value": "295",
        "desc": "洗脑解除"
    },
    "EFFECT_BP_TWICE": {
        "name": "EFFECT_BP_TWICE",
        "type": 2,
        "value": "296",
        "desc": "2次战斗阶段"
    },
    "EFFECT_UNIQUE_CHECK": {
        "name": "EFFECT_UNIQUE_CHECK",
        "type": 2,
        "value": "297",
        "desc": "場上只能存在1張(Card.SetUniqueOnField()專用)"
    },
    "EFFECT_MATCH_KILL": {
        "name": "EFFECT_MATCH_KILL",
        "type": 2,
        "value": "300",
        "desc": "Match胜利(胜利龙)"
    },
    "EFFECT_SYNCHRO_CHECK": {
        "name": "EFFECT_SYNCHRO_CHECK",
        "type": 2,
        "value": "310",
        "desc": "基因组斗士"
    },
    "EFFECT_QP_ACT_IN_NTPHAND": {
        "name": "EFFECT_QP_ACT_IN_NTPHAND",
        "type": 2,
        "value": "311",
        "desc": "对方回合从自己手卡发动（失乐的圣女）"
    },
    "EFFECT_MUST_BE_SMATERIAL": {
        "name": "EFFECT_MUST_BE_SMATERIAL",
        "type": 2,
        "value": "312",
        "desc": "必须作为同调素材（波动龙 声子龙）"
    },
    "EFFECT_TO_GRAVE_REDIRECT_CB": {
        "name": "EFFECT_TO_GRAVE_REDIRECT_CB",
        "type": 2,
        "value": "313",
        "desc": "重新指定去向(寶玉獸)"
    },
    "EFFECT_CHANGE_LEVEL_FINAL": {
        "name": "EFFECT_CHANGE_LEVEL_FINAL",
        "type": 2,
        "value": "314",
        "desc": "N/A"
    },
    "EFFECT_CHANGE_RANK_FINAL": {
        "name": "EFFECT_CHANGE_RANK_FINAL",
        "type": 2,
        "value": "315",
        "desc": "N/A"
    },
    "EFFECT_MUST_BE_FMATERIAL": {
        "name": "EFFECT_MUST_BE_FMATERIAL",
        "type": 2,
        "value": "316",
        "desc": "必须作为融合素材"
    },
    "EFFECT_MUST_BE_XMATERIAL": {
        "name": "EFFECT_MUST_BE_XMATERIAL",
        "type": 2,
        "value": "317",
        "desc": "必须作为超量素材"
    },
    "EFFECT_MUST_BE_LMATERIAL": {
        "name": "EFFECT_MUST_BE_LMATERIAL",
        "type": 2,
        "value": "318",
        "desc": "必须作为连接素材"
    },
    "EFFECT_SPSUMMON_PROC_G": {
        "name": "EFFECT_SPSUMMON_PROC_G",
        "type": 2,
        "value": "320",
        "desc": "P召唤规则"
    },
    "EFFECT_SPSUMMON_COUNT_LIMIT": {
        "name": "EFFECT_SPSUMMON_COUNT_LIMIT",
        "type": 2,
        "value": "330",
        "desc": "特殊召唤次数限制"
    },
    "EFFECT_LEFT_SPSUMMON_COUNT": {
        "name": "EFFECT_LEFT_SPSUMMON_COUNT",
        "type": 2,
        "value": "331",
        "desc": "剩餘召喚次數(召喚限制網)"
    },
    "EFFECT_CANNOT_SELECT_BATTLE_TARGET": {
        "name": "EFFECT_CANNOT_SELECT_BATTLE_TARGET",
        "type": 2,
        "value": "332",
        "desc": "對手不能選擇為攻擊對象"
    },
    "EFFECT_CANNOT_SELECT_EFFECT_TARGET": {
        "name": "EFFECT_CANNOT_SELECT_EFFECT_TARGET",
        "type": 2,
        "value": "333",
        "desc": "對手不能選擇為效果對象"
    },
    "EFFECT_ADD_SETCODE": {
        "name": "EFFECT_ADD_SETCODE",
        "type": 2,
        "value": "334",
        "desc": "视为「XX」字段的效果"
    },
    "EFFECT_NO_EFFECT_DAMAGE": {
        "name": "EFFECT_NO_EFFECT_DAMAGE",
        "type": 2,
        "value": "335",
        "desc": "玩家已受到'效果傷害變成0'的效果影響"
    },
    "EFFECT_UNSUMMONABLE_CARD": {
        "name": "EFFECT_UNSUMMONABLE_CARD",
        "type": 2,
        "value": "336",
        "desc": "N/A"
    },
    "EFFECT_DISABLE_CHAIN_FIELD": {
        "name": "EFFECT_DISABLE_CHAIN_FIELD",
        "type": 2,
        "value": "337",
        "desc": "N/A"
    },
    "EFFECT_DISCARD_COST_CHANGE": {
        "name": "EFFECT_DISCARD_COST_CHANGE",
        "type": 2,
        "value": "338",
        "desc": "反制陷阱捨棄手牌的代價改變(解放之阿里阿德涅)"
    },
    "EFFECT_HAND_SYNCHRO": {
        "name": "EFFECT_HAND_SYNCHRO",
        "type": 2,
        "value": "339",
        "desc": "用手牌的怪獸當作同步素材"
    },
    "EFFECT_ADD_FUSION_CODE": {
        "name": "EFFECT_ADD_FUSION_CODE",
        "type": 2,
        "value": "340",
        "desc": "作为融合素材时可以当作某一卡名(融合识别)"
    },
    "EFFECT_ADD_FUSION_SETCODE": {
        "name": "EFFECT_ADD_FUSION_SETCODE",
        "type": 2,
        "value": "341",
        "desc": "作为融合素材时可以当作某一字段(魔玩具改造)"
    },
    "EFFECT_RISE_TO_FULL_HEIGHT": {
        "name": "EFFECT_RISE_TO_FULL_HEIGHT",
        "type": 2,
        "value": "342",
        "desc": "N/A"
    },
    "EFFECT_ONLY_ATTACK_MONSTER": {
        "name": "EFFECT_ONLY_ATTACK_MONSTER",
        "type": 2,
        "value": "343",
        "desc": "只能攻擊X"
    },
    "EFFECT_MUST_ATTACK_MONSTER": {
        "name": "EFFECT_MUST_ATTACK_MONSTER",
        "type": 2,
        "value": "344",
        "desc": "若攻擊則必須攻擊X"
    },
    "EFFECT_PATRICIAN_OF_DARKNESS": {
        "name": "EFFECT_PATRICIAN_OF_DARKNESS",
        "type": 2,
        "value": "345",
        "desc": "由對手選擇攻擊對象(黑暗貴族)"
    },
    "EFFECT_EXTRA_ATTACK_MONSTER": {
        "name": "EFFECT_EXTRA_ATTACK_MONSTER",
        "type": 2,
        "value": "346",
        "desc": "對怪獸攻擊X次"
    },
    "EFFECT_UNION_STATUS": {
        "name": "EFFECT_UNION_STATUS",
        "type": 2,
        "value": "347",
        "desc": "同盟状态"
    },
    "EFFECT_OLDUNION_STATUS": {
        "name": "EFFECT_OLDUNION_STATUS",
        "type": 2,
        "value": "348",
        "desc": "旧同盟状态"
    },
    "EFFECT_ADD_FUSION_ATTRIBUTE": {
        "name": "EFFECT_ADD_FUSION_ATTRIBUTE",
        "type": 2,
        "value": "349",
        "desc": "reserve"
    },
    "EFFECT_REMOVE_FUSION_ATTRIBUTE": {
        "name": "EFFECT_REMOVE_FUSION_ATTRIBUTE",
        "type": 2,
        "value": "350",
        "desc": "reserve"
    },
    "EFFECT_CHANGE_FUSION_ATTRIBUTE": {
        "name": "EFFECT_CHANGE_FUSION_ATTRIBUTE",
        "type": 2,
        "value": "351",
        "desc": "用作融合素材时的属性"
    },
    "EFFECT_EXTRA_FUSION_MATERIAL": {
        "name": "EFFECT_EXTRA_FUSION_MATERIAL",
        "type": 2,
        "value": "352",
        "desc": "增加融合素材(万溶炼金师)"
    },
    "EFFECT_TUNER_MATERIAL_LIMIT": {
        "name": "EFFECT_TUNER_MATERIAL_LIMIT",
        "type": 2,
        "value": "353",
        "desc": "同调素材限制"
    },
    "EFFECT_ADD_LINK_CODE": {
        "name": "EFFECT_ADD_LINK_CODE",
        "type": 2,
        "value": "354",
        "desc": "用作连接素材时的卡名"
    },
    "EFFECT_ADD_LINK_SETCODE": {
        "name": "EFFECT_ADD_LINK_SETCODE",
        "type": 2,
        "value": "355",
        "desc": "reserve"
    },
    "EFFECT_ADD_LINK_ATTRIBUTE": {
        "name": "EFFECT_ADD_LINK_ATTRIBUTE",
        "type": 2,
        "value": "356",
        "desc": "用作连接素材时的属性"
    },
    "EFFECT_ADD_LINK_RACE": {
        "name": "EFFECT_ADD_LINK_RACE",
        "type": 2,
        "value": "357",
        "desc": "用作连接素材时的种族"
    },
    "EFFECT_EXTRA_LINK_MATERIAL": {
        "name": "EFFECT_EXTRA_LINK_MATERIAL",
        "type": 2,
        "value": "358",
        "desc": "手卡的连接素材"
    },
    "EFFECT_QP_ACT_IN_SET_TURN": {
        "name": "EFFECT_QP_ACT_IN_SET_TURN",
        "type": 2,
        "value": "359",
        "desc": "速攻魔法可以在盖放的回合发动"
    },
    "EFFECT_EXTRA_PENDULUM_SUMMON": {
        "name": "EFFECT_EXTRA_PENDULUM_SUMMON",
        "type": 2,
        "value": "360",
        "desc": "extra pendulum summon"
    },
    "EFFECT_MATERIAL_LIMIT": {
        "name": "EFFECT_MATERIAL_LIMIT",
        "type": 2,
        "value": "361"
    },
    "EVENT_STARTUP": {
        "name": "EVENT_STARTUP",
        "type": 2,
        "value": "1000",
        "desc": "N/A"
    },
    "EVENT_FLIP": {
        "name": "EVENT_FLIP",
        "type": 2,
        "value": "1001",
        "desc": "翻转时"
    },
    "EVENT_FREE_CHAIN": {
        "name": "EVENT_FREE_CHAIN",
        "type": 2,
        "value": "1002",
        "desc": "自由时点（强脱等，还有昴星团等诱发即时效果）"
    },
    "EVENT_DESTROY": {
        "name": "EVENT_DESTROY",
        "type": 2,
        "value": "1010",
        "desc": "確定被破壞的卡片移動前"
    },
    "EVENT_REMOVE": {
        "name": "EVENT_REMOVE",
        "type": 2,
        "value": "1011",
        "desc": "除外时"
    },
    "EVENT_TO_HAND": {
        "name": "EVENT_TO_HAND",
        "type": 2,
        "value": "1012",
        "desc": "加入手牌时"
    },
    "EVENT_TO_DECK": {
        "name": "EVENT_TO_DECK",
        "type": 2,
        "value": "1013",
        "desc": "回卡组时"
    },
    "EVENT_TO_GRAVE": {
        "name": "EVENT_TO_GRAVE",
        "type": 2,
        "value": "1014",
        "desc": "送去墓地时(不含REASON_RETURN)"
    },
    "EVENT_LEAVE_FIELD": {
        "name": "EVENT_LEAVE_FIELD",
        "type": 2,
        "value": "1015",
        "desc": "离场时"
    },
    "EVENT_CHANGE_POS": {
        "name": "EVENT_CHANGE_POS",
        "type": 2,
        "value": "1016",
        "desc": "表示形式变更时"
    },
    "EVENT_RELEASE": {
        "name": "EVENT_RELEASE",
        "type": 2,
        "value": "1017",
        "desc": "解放时"
    },
    "EVENT_DISCARD": {
        "name": "EVENT_DISCARD",
        "type": 2,
        "value": "1018",
        "desc": "丢弃手牌时"
    },
    "EVENT_LEAVE_FIELD_P": {
        "name": "EVENT_LEAVE_FIELD_P",
        "type": 2,
        "value": "1019",
        "desc": "離場的卡片移動前"
    },
    "EVENT_CHAIN_SOLVING": {
        "name": "EVENT_CHAIN_SOLVING",
        "type": 2,
        "value": "1020",
        "desc": "连锁处理开始时（EVENT_CHAIN_ACTIVATING之後）"
    },
    "EVENT_CHAIN_ACTIVATING": {
        "name": "EVENT_CHAIN_ACTIVATING",
        "type": 2,
        "value": "1021",
        "desc": "连锁处理准备中"
    },
    "EVENT_CHAIN_SOLVED": {
        "name": "EVENT_CHAIN_SOLVED",
        "type": 2,
        "value": "1022",
        "desc": "连锁处理结束时"
    },
    "EVENT_CHAIN_ACTIVATED": {
        "name": "EVENT_CHAIN_ACTIVATED",
        "type": 2,
        "value": "1023",
        "desc": "N/A"
    },
    "EVENT_CHAIN_NEGATED": {
        "name": "EVENT_CHAIN_NEGATED",
        "type": 2,
        "value": "1024",
        "desc": "连锁发动无效时（EVENT_CHAIN_ACTIVATING之後）"
    },
    "EVENT_CHAIN_DISABLED": {
        "name": "EVENT_CHAIN_DISABLED",
        "type": 2,
        "value": "1025",
        "desc": "连锁效果无效时"
    },
    "EVENT_CHAIN_END": {
        "name": "EVENT_CHAIN_END",
        "type": 2,
        "value": "1026",
        "desc": "连锁串结束时"
    },
    "EVENT_CHAINING": {
        "name": "EVENT_CHAINING",
        "type": 2,
        "value": "1027",
        "desc": "效果发动时"
    },
    "EVENT_BECOME_TARGET": {
        "name": "EVENT_BECOME_TARGET",
        "type": 2,
        "value": "1028",
        "desc": "成为效果对象时"
    },
    "EVENT_DESTROYED": {
        "name": "EVENT_DESTROYED",
        "type": 2,
        "value": "1029",
        "desc": "被破坏时"
    },
    "EVENT_MOVE": {
        "name": "EVENT_MOVE",
        "type": 2,
        "value": "1030",
        "desc": "移動卡片(急兔馬)"
    },
    "EVENT_ADJUST": {
        "name": "EVENT_ADJUST",
        "type": 2,
        "value": "1040",
        "desc": "adjust_all()调整後（御前试合）"
    },
    "EVENT_SUMMON_SUCCESS": {
        "name": "EVENT_SUMMON_SUCCESS",
        "type": 2,
        "value": "1100",
        "desc": "通常召唤成功时"
    },
    "EVENT_FLIP_SUMMON_SUCCESS": {
        "name": "EVENT_FLIP_SUMMON_SUCCESS",
        "type": 2,
        "value": "1101",
        "desc": "翻转召唤成功时"
    },
    "EVENT_SPSUMMON_SUCCESS": {
        "name": "EVENT_SPSUMMON_SUCCESS",
        "type": 2,
        "value": "1102",
        "desc": "特殊召唤成功时"
    },
    "EVENT_SUMMON": {
        "name": "EVENT_SUMMON",
        "type": 2,
        "value": "1103",
        "desc": "召唤之际（怪兽还没上场、神宣等时点）"
    },
    "EVENT_FLIP_SUMMON": {
        "name": "EVENT_FLIP_SUMMON",
        "type": 2,
        "value": "1104",
        "desc": "翻转召唤之际"
    },
    "EVENT_SPSUMMON": {
        "name": "EVENT_SPSUMMON",
        "type": 2,
        "value": "1105",
        "desc": "特殊召唤之际"
    },
    "EVENT_MSET": {
        "name": "EVENT_MSET",
        "type": 2,
        "value": "1106",
        "desc": "放置怪兽时"
    },
    "EVENT_SSET": {
        "name": "EVENT_SSET",
        "type": 2,
        "value": "1107",
        "desc": "放置魔陷时"
    },
    "EVENT_BE_MATERIAL": {
        "name": "EVENT_BE_MATERIAL",
        "type": 2,
        "value": "1108",
        "desc": "作为融合/仪式同调/超量素材时"
    },
    "EVENT_BE_PRE_MATERIAL": {
        "name": "EVENT_BE_PRE_MATERIAL",
        "type": 2,
        "value": "1109",
        "desc": "将要作为融合/仪式同调/超量素材时"
    },
    "EVENT_DRAW": {
        "name": "EVENT_DRAW",
        "type": 2,
        "value": "1110",
        "desc": "抽卡时"
    },
    "EVENT_DAMAGE": {
        "name": "EVENT_DAMAGE",
        "type": 2,
        "value": "1111",
        "desc": "造成战斗/效果伤害时"
    },
    "EVENT_RECOVER": {
        "name": "EVENT_RECOVER",
        "type": 2,
        "value": "1112",
        "desc": "回复生命值时"
    },
    "EVENT_PREDRAW": {
        "name": "EVENT_PREDRAW",
        "type": 2,
        "value": "1113",
        "desc": "抽卡阶段通常抽卡前"
    },
    "EVENT_SUMMON_NEGATED": {
        "name": "EVENT_SUMMON_NEGATED",
        "type": 2,
        "value": "1114",
        "desc": "召唤被无效时"
    },
    "EVENT_FLIP_SUMMON_NEGATED": {
        "name": "EVENT_FLIP_SUMMON_NEGATED",
        "type": 2,
        "value": "1115",
        "desc": "反转召唤被无效时"
    },
    "EVENT_SPSUMMON_NEGATED": {
        "name": "EVENT_SPSUMMON_NEGATED",
        "type": 2,
        "value": "1116",
        "desc": "特殊召唤被无效时"
    },
    "EVENT_CONTROL_CHANGED": {
        "name": "EVENT_CONTROL_CHANGED",
        "type": 2,
        "value": "1120",
        "desc": "控制权变更"
    },
    "EVENT_EQUIP": {
        "name": "EVENT_EQUIP",
        "type": 2,
        "value": "1121",
        "desc": "装备卡装备时"
    },
    "EVENT_ATTACK_ANNOUNCE": {
        "name": "EVENT_ATTACK_ANNOUNCE",
        "type": 2,
        "value": "1130",
        "desc": "攻击宣言时"
    },
    "EVENT_BE_BATTLE_TARGET": {
        "name": "EVENT_BE_BATTLE_TARGET",
        "type": 2,
        "value": "1131",
        "desc": "被选为攻击对象时"
    },
    "EVENT_BATTLE_START": {
        "name": "EVENT_BATTLE_START",
        "type": 2,
        "value": "1132",
        "desc": "伤害步骤开始时（反转前）"
    },
    "EVENT_BATTLE_CONFIRM": {
        "name": "EVENT_BATTLE_CONFIRM",
        "type": 2,
        "value": "1133",
        "desc": "伤害计算前（反转後）"
    },
    "EVENT_PRE_DAMAGE_CALCULATE": {
        "name": "EVENT_PRE_DAMAGE_CALCULATE",
        "type": 2,
        "value": "1134",
        "desc": "伤害计算时（羽斬）"
    },
    "EVENT_DAMAGE_CALCULATING": {
        "name": "EVENT_DAMAGE_CALCULATING",
        "type": 2,
        "value": "1135",
        "desc": "N/A"
    },
    "EVENT_PRE_BATTLE_DAMAGE": {
        "name": "EVENT_PRE_BATTLE_DAMAGE",
        "type": 2,
        "value": "1136",
        "desc": "即将产生战斗伤害(只能使用EFFECT_TYPE_CONTINUOUS)"
    },
    "EVENT_BATTLE_END": {
        "name": "EVENT_BATTLE_END",
        "type": 2,
        "value": "1137",
        "desc": "N/A"
    },
    "EVENT_BATTLED": {
        "name": "EVENT_BATTLED",
        "type": 2,
        "value": "1138",
        "desc": "伤害计算后（异女、同反转效果时点）"
    },
    "EVENT_BATTLE_DESTROYING": {
        "name": "EVENT_BATTLE_DESTROYING",
        "type": 2,
        "value": "1139",
        "desc": "以战斗破坏怪兽送去墓地时（BF-苍炎之修罗）"
    },
    "EVENT_BATTLE_DESTROYED": {
        "name": "EVENT_BATTLE_DESTROYED",
        "type": 2,
        "value": "1140",
        "desc": "被战斗破坏送去墓地时（杀人番茄等）"
    },
    "EVENT_DAMAGE_STEP_END": {
        "name": "EVENT_DAMAGE_STEP_END",
        "type": 2,
        "value": "1141",
        "desc": "伤害步骤结束时"
    },
    "EVENT_ATTACK_DISABLED": {
        "name": "EVENT_ATTACK_DISABLED",
        "type": 2,
        "value": "1142",
        "desc": "攻击无效时（翻倍机会）"
    },
    "EVENT_BATTLE_DAMAGE": {
        "name": "EVENT_BATTLE_DAMAGE",
        "type": 2,
        "value": "1143",
        "desc": "造成战斗伤害时"
    },
    "EVENT_TOSS_DICE": {
        "name": "EVENT_TOSS_DICE",
        "type": 2,
        "value": "1150",
        "desc": "掷骰子的结果产生后"
    },
    "EVENT_TOSS_COIN": {
        "name": "EVENT_TOSS_COIN",
        "type": 2,
        "value": "1151",
        "desc": "抛硬币的结果产生后"
    },
    "EVENT_TOSS_COIN_NEGATE": {
        "name": "EVENT_TOSS_COIN_NEGATE",
        "type": 2,
        "value": "1152",
        "desc": "重新抛硬币"
    },
    "EVENT_TOSS_DICE_NEGATE": {
        "name": "EVENT_TOSS_DICE_NEGATE",
        "type": 2,
        "value": "1153",
        "desc": "重新掷骰子"
    },
    "EVENT_LEVEL_UP": {
        "name": "EVENT_LEVEL_UP",
        "type": 2,
        "value": "1200",
        "desc": "等级上升时"
    },
    "EVENT_PAY_LPCOST": {
        "name": "EVENT_PAY_LPCOST",
        "type": 2,
        "value": "1201",
        "desc": "支付生命值时"
    },
    "EVENT_DETACH_MATERIAL": {
        "name": "EVENT_DETACH_MATERIAL",
        "type": 2,
        "value": "1202",
        "desc": "去除超量素材时"
    },
    "EVENT_RETURN_TO_GRAVE": {
        "name": "EVENT_RETURN_TO_GRAVE",
        "type": 2,
        "value": "1203",
        "desc": "回到墓地时"
    },
    "EVENT_TURN_END": {
        "name": "EVENT_TURN_END",
        "type": 2,
        "value": "1210",
        "desc": "回合结束时"
    },
    "EVENT_PHASE": {
        "name": "EVENT_PHASE",
        "type": 2,
        "value": "0x1000",
        "desc": "阶段结束时"
    },
    "EVENT_PHASE_START": {
        "name": "EVENT_PHASE_START",
        "type": 2,
        "value": "0x2000",
        "desc": "阶段开始时"
    },
    "EVENT_ADD_COUNTER": {
        "name": "EVENT_ADD_COUNTER",
        "type": 2,
        "value": "0x10000",
        "desc": "增加指示物时"
    },
    "EVENT_REMOVE_COUNTER": {
        "name": "EVENT_REMOVE_COUNTER",
        "type": 2,
        "value": "0x20000",
        "desc": "去除指示物时(A指示物)，Card.RemoveCounter()必須手動觸發此事件"
    },
    "EVENT_CUSTOM": {
        "name": "EVENT_CUSTOM",
        "type": 2,
        "value": "0x10000000",
        "desc": "自訂事件"
    },
    "CATEGORY_DESTROY": {
        "name": "CATEGORY_DESTROY",
        "type": 2,
        "value": "0x1",
        "desc": "破坏效果"
    },
    "CATEGORY_RELEASE": {
        "name": "CATEGORY_RELEASE",
        "type": 2,
        "value": "0x2",
        "desc": "解放效果"
    },
    "CATEGORY_REMOVE": {
        "name": "CATEGORY_REMOVE",
        "type": 2,
        "value": "0x4",
        "desc": "除外效果"
    },
    "CATEGORY_TOHAND": {
        "name": "CATEGORY_TOHAND",
        "type": 2,
        "value": "0x8",
        "desc": "回手牌效果"
    },
    "CATEGORY_TODECK": {
        "name": "CATEGORY_TODECK",
        "type": 2,
        "value": "0x10",
        "desc": "回卡组效果"
    },
    "CATEGORY_TOGRAVE": {
        "name": "CATEGORY_TOGRAVE",
        "type": 2,
        "value": "0x20",
        "desc": "送去墓地效果"
    },
    "CATEGORY_DECKDES": {
        "name": "CATEGORY_DECKDES",
        "type": 2,
        "value": "0x40",
        "desc": "從卡组送去墓地效果"
    },
    "CATEGORY_HANDES": {
        "name": "CATEGORY_HANDES",
        "type": 2,
        "value": "0x80",
        "desc": "捨棄手牌效果"
    },
    "CATEGORY_SUMMON": {
        "name": "CATEGORY_SUMMON",
        "type": 2,
        "value": "0x100",
        "desc": "含召唤的效果"
    },
    "CATEGORY_SPECIAL_SUMMON": {
        "name": "CATEGORY_SPECIAL_SUMMON",
        "type": 2,
        "value": "0x200",
        "desc": "含特殊召唤的效果"
    },
    "CATEGORY_TOKEN": {
        "name": "CATEGORY_TOKEN",
        "type": 2,
        "value": "0x400",
        "desc": "含衍生物效果"
    },
    "CATEGORY_GRAVE_ACTION": {
        "name": "CATEGORY_GRAVE_ACTION",
        "type": 2,
        "value": "0x800",
        "desc": "包含涉及墓地的部分的效果（屋敷わらし）"
    },
    "CATEGORY_POSITION": {
        "name": "CATEGORY_POSITION",
        "type": 2,
        "value": "0x1000",
        "desc": "改变表示形式效果"
    },
    "CATEGORY_CONTROL": {
        "name": "CATEGORY_CONTROL",
        "type": 2,
        "value": "0x2000",
        "desc": "改变控制权效果"
    },
    "CATEGORY_DISABLE": {
        "name": "CATEGORY_DISABLE",
        "type": 2,
        "value": "0x4000",
        "desc": "使效果无效效果"
    },
    "CATEGORY_DISABLE_SUMMON": {
        "name": "CATEGORY_DISABLE_SUMMON",
        "type": 2,
        "value": "0x8000",
        "desc": "无效召唤效果"
    },
    "CATEGORY_DRAW": {
        "name": "CATEGORY_DRAW",
        "type": 2,
        "value": "0x10000",
        "desc": "抽卡效果"
    },
    "CATEGORY_SEARCH": {
        "name": "CATEGORY_SEARCH",
        "type": 2,
        "value": "0x20000",
        "desc": "检索卡组效果"
    },
    "CATEGORY_EQUIP": {
        "name": "CATEGORY_EQUIP",
        "type": 2,
        "value": "0x40000",
        "desc": "装备效果"
    },
    "CATEGORY_DAMAGE": {
        "name": "CATEGORY_DAMAGE",
        "type": 2,
        "value": "0x80000",
        "desc": "伤害效果"
    },
    "CATEGORY_RECOVER": {
        "name": "CATEGORY_RECOVER",
        "type": 2,
        "value": "0x100000",
        "desc": "回复效果"
    },
    "CATEGORY_ATKCHANGE": {
        "name": "CATEGORY_ATKCHANGE",
        "type": 2,
        "value": "0x200000",
        "desc": "改变攻击效果"
    },
    "CATEGORY_DEFCHANGE": {
        "name": "CATEGORY_DEFCHANGE",
        "type": 2,
        "value": "0x400000",
        "desc": "改变防御效果"
    },
    "CATEGORY_COUNTER": {
        "name": "CATEGORY_COUNTER",
        "type": 2,
        "value": "0x800000",
        "desc": "指示物效果"
    },
    "CATEGORY_COIN": {
        "name": "CATEGORY_COIN",
        "type": 2,
        "value": "0x1000000",
        "desc": "硬币效果"
    },
    "CATEGORY_DICE": {
        "name": "CATEGORY_DICE",
        "type": 2,
        "value": "0x2000000",
        "desc": "骰子效果"
    },
    "CATEGORY_LEAVE_GRAVE": {
        "name": "CATEGORY_LEAVE_GRAVE",
        "type": 2,
        "value": "0x4000000",
        "desc": "涉及墓地的效果(王家長眠之谷)"
    },
    "CATEGORY_LVCHANGE": {
        "name": "CATEGORY_LVCHANGE",
        "type": 2,
        "value": "0x8000000",
        "desc": "改变等级效果"
    },
    "CATEGORY_NEGATE": {
        "name": "CATEGORY_NEGATE",
        "type": 2,
        "value": "0x10000000",
        "desc": "使发动无效效果"
    },
    "CATEGORY_ANNOUNCE": {
        "name": "CATEGORY_ANNOUNCE",
        "type": 2,
        "value": "0x20000000",
        "desc": "發動時宣言卡名的效果"
    },
    "CATEGORY_FUSION_SUMMON": {
        "name": "CATEGORY_FUSION_SUMMON",
        "type": 2,
        "value": "0x40000000",
        "desc": "融合召唤效果（暴走魔法阵）"
    },
    "CATEGORY_TOEXTRA": {
        "name": "CATEGORY_TOEXTRA",
        "type": 2,
        "value": "0x80000000",
        "desc": "回额外卡组效果"
    },
    "HINT_EVENT": {
        "name": "HINT_EVENT",
        "type": 2,
        "value": "1"
    },
    "HINT_MESSAGE": {
        "name": "HINT_MESSAGE",
        "type": 2,
        "value": "2"
    },
    "HINT_SELECTMSG": {
        "name": "HINT_SELECTMSG",
        "type": 2,
        "value": "3"
    },
    "HINT_OPSELECTED": {
        "name": "HINT_OPSELECTED",
        "type": 2,
        "value": "4"
    },
    "HINT_EFFECT": {
        "name": "HINT_EFFECT",
        "type": 2,
        "value": "5"
    },
    "HINT_RACE": {
        "name": "HINT_RACE",
        "type": 2,
        "value": "6"
    },
    "HINT_ATTRIB": {
        "name": "HINT_ATTRIB",
        "type": 2,
        "value": "7"
    },
    "HINT_CODE": {
        "name": "HINT_CODE",
        "type": 2,
        "value": "8"
    },
    "HINT_NUMBER": {
        "name": "HINT_NUMBER",
        "type": 2,
        "value": "9"
    },
    "HINT_CARD": {
        "name": "HINT_CARD",
        "type": 2,
        "value": "10"
    },
    "HINT_ZONE": {
        "name": "HINT_ZONE",
        "type": 2,
        "value": "11"
    },
    "CHINT_TURN": {
        "name": "CHINT_TURN",
        "type": 2,
        "value": "1"
    },
    "CHINT_CARD": {
        "name": "CHINT_CARD",
        "type": 2,
        "value": "2"
    },
    "CHINT_RACE": {
        "name": "CHINT_RACE",
        "type": 2,
        "value": "3"
    },
    "CHINT_ATTRIBUTE": {
        "name": "CHINT_ATTRIBUTE",
        "type": 2,
        "value": "4"
    },
    "CHINT_NUMBER": {
        "name": "CHINT_NUMBER",
        "type": 2,
        "value": "5"
    },
    "CHINT_DESC": {
        "name": "CHINT_DESC",
        "type": 2,
        "value": "6"
    },
    "OPCODE_ADD": {
        "name": "OPCODE_ADD",
        "type": 2,
        "value": "0x40000000"
    },
    "OPCODE_SUB": {
        "name": "OPCODE_SUB",
        "type": 2,
        "value": "0x40000001"
    },
    "OPCODE_MUL": {
        "name": "OPCODE_MUL",
        "type": 2,
        "value": "0x40000002"
    },
    "OPCODE_DIV": {
        "name": "OPCODE_DIV",
        "type": 2,
        "value": "0x40000003"
    },
    "OPCODE_AND": {
        "name": "OPCODE_AND",
        "type": 2,
        "value": "0x40000004"
    },
    "OPCODE_OR": {
        "name": "OPCODE_OR",
        "type": 2,
        "value": "0x40000005"
    },
    "OPCODE_NEG": {
        "name": "OPCODE_NEG",
        "type": 2,
        "value": "0x40000006"
    },
    "OPCODE_NOT": {
        "name": "OPCODE_NOT",
        "type": 2,
        "value": "0x40000007"
    },
    "OPCODE_ISCODE": {
        "name": "OPCODE_ISCODE",
        "type": 2,
        "value": "0x40000100"
    },
    "OPCODE_ISSETCARD": {
        "name": "OPCODE_ISSETCARD",
        "type": 2,
        "value": "0x40000101"
    },
    "OPCODE_ISTYPE": {
        "name": "OPCODE_ISTYPE",
        "type": 2,
        "value": "0x40000102"
    },
    "OPCODE_ISRACE": {
        "name": "OPCODE_ISRACE",
        "type": 2,
        "value": "0x40000103"
    },
    "OPCODE_ISATTRIBUTE": {
        "name": "OPCODE_ISATTRIBUTE",
        "type": 2,
        "value": "0x40000104"
    },
    "DOUBLE_DAMAGE": {
        "name": "DOUBLE_DAMAGE",
        "type": 2,
        "value": "0x80000000"
    },
    "HALF_DAMAGE": {
        "name": "HALF_DAMAGE",
        "type": 2,
        "value": "0x80000001"
    },
    "HINTMSG_RELEASE": {
        "name": "HINTMSG_RELEASE",
        "type": 2,
        "value": "500",
        "desc": "请选择要解放的卡"
    },
    "HINTMSG_DISCARD": {
        "name": "HINTMSG_DISCARD",
        "type": 2,
        "value": "501",
        "desc": "请选择要丢弃的手牌"
    },
    "HINTMSG_DESTROY": {
        "name": "HINTMSG_DESTROY",
        "type": 2,
        "value": "502",
        "desc": "请选择要破坏的卡"
    },
    "HINTMSG_REMOVE": {
        "name": "HINTMSG_REMOVE",
        "type": 2,
        "value": "503",
        "desc": "请选择要除外的卡"
    },
    "HINTMSG_TOGRAVE": {
        "name": "HINTMSG_TOGRAVE",
        "type": 2,
        "value": "504",
        "desc": "请选择要送去墓地的卡"
    },
    "HINTMSG_RTOHAND": {
        "name": "HINTMSG_RTOHAND",
        "type": 2,
        "value": "505",
        "desc": "请选择要返回手牌的卡"
    },
    "HINTMSG_ATOHAND": {
        "name": "HINTMSG_ATOHAND",
        "type": 2,
        "value": "506",
        "desc": "请选择要加入手牌的卡"
    },
    "HINTMSG_TODECK": {
        "name": "HINTMSG_TODECK",
        "type": 2,
        "value": "507",
        "desc": "请选择要返回卡组的卡"
    },
    "HINTMSG_SUMMON": {
        "name": "HINTMSG_SUMMON",
        "type": 2,
        "value": "508",
        "desc": "请选择要召唤的卡"
    },
    "HINTMSG_SPSUMMON": {
        "name": "HINTMSG_SPSUMMON",
        "type": 2,
        "value": "509",
        "desc": "请选择要特殊召唤的卡"
    },
    "HINTMSG_SET": {
        "name": "HINTMSG_SET",
        "type": 2,
        "value": "510",
        "desc": "请选择要盖放的卡"
    },
    "HINTMSG_FMATERIAL": {
        "name": "HINTMSG_FMATERIAL",
        "type": 2,
        "value": "511",
        "desc": "请选择要作为融合素材的卡"
    },
    "HINTMSG_SMATERIAL": {
        "name": "HINTMSG_SMATERIAL",
        "type": 2,
        "value": "512",
        "desc": "请选择要作为同调素材的卡"
    },
    "HINTMSG_XMATERIAL": {
        "name": "HINTMSG_XMATERIAL",
        "type": 2,
        "value": "513",
        "desc": "请选择要作为超量素材的卡"
    },
    "HINTMSG_FACEUP": {
        "name": "HINTMSG_FACEUP",
        "type": 2,
        "value": "514",
        "desc": "请选择表侧表示的卡"
    },
    "HINTMSG_FACEDOWN": {
        "name": "HINTMSG_FACEDOWN",
        "type": 2,
        "value": "515",
        "desc": "请选择里侧表示的卡"
    },
    "HINTMSG_ATTACK": {
        "name": "HINTMSG_ATTACK",
        "type": 2,
        "value": "516",
        "desc": "请选择攻击表示的怪兽"
    },
    "HINTMSG_DEFENSE": {
        "name": "HINTMSG_DEFENSE",
        "type": 2,
        "value": "517",
        "desc": "请选择守备表示的怪兽"
    },
    "HINTMSG_EQUIP": {
        "name": "HINTMSG_EQUIP",
        "type": 2,
        "value": "518",
        "desc": "请选择要装备的卡"
    },
    "HINTMSG_REMOVEXYZ": {
        "name": "HINTMSG_REMOVEXYZ",
        "type": 2,
        "value": "519",
        "desc": "请选择要取除的超量素材"
    },
    "HINTMSG_CONTROL": {
        "name": "HINTMSG_CONTROL",
        "type": 2,
        "value": "520",
        "desc": "请选择要改变控制权的怪兽"
    },
    "HINTMSG_DESREPLACE": {
        "name": "HINTMSG_DESREPLACE",
        "type": 2,
        "value": "521",
        "desc": "请选择要代替破坏的卡"
    },
    "HINTMSG_FACEUPATTACK": {
        "name": "HINTMSG_FACEUPATTACK",
        "type": 2,
        "value": "522",
        "desc": "请选择表侧攻击表示的怪兽"
    },
    "HINTMSG_FACEUPDEFENSE": {
        "name": "HINTMSG_FACEUPDEFENSE",
        "type": 2,
        "value": "523",
        "desc": "请选择表侧守备表示的怪兽"
    },
    "HINTMSG_FACEDOWNATTACK": {
        "name": "HINTMSG_FACEDOWNATTACK",
        "type": 2,
        "value": "524",
        "desc": "请选择里侧攻击表示的怪兽"
    },
    "HINTMSG_FACEDOWNDEFENSE": {
        "name": "HINTMSG_FACEDOWNDEFENSE",
        "type": 2,
        "value": "525",
        "desc": "请选择里侧守备表示的怪兽"
    },
    "HINTMSG_CONFIRM": {
        "name": "HINTMSG_CONFIRM",
        "type": 2,
        "value": "526",
        "desc": "请选择给对方确认的卡"
    },
    "HINTMSG_TOFIELD": {
        "name": "HINTMSG_TOFIELD",
        "type": 2,
        "value": "527",
        "desc": "请选择要放置到场上的卡"
    },
    "HINTMSG_POSCHANGE": {
        "name": "HINTMSG_POSCHANGE",
        "type": 2,
        "value": "528",
        "desc": "请选择要改变表示形式的怪兽"
    },
    "HINTMSG_SELF": {
        "name": "HINTMSG_SELF",
        "type": 2,
        "value": "529",
        "desc": "请选择自己的卡"
    },
    "HINTMSG_OPPO": {
        "name": "HINTMSG_OPPO",
        "type": 2,
        "value": "530",
        "desc": "请选择对方的卡"
    },
    "HINTMSG_TRIBUTE": {
        "name": "HINTMSG_TRIBUTE",
        "type": 2,
        "value": "531",
        "desc": "请选择上级召唤用需要解放的怪兽"
    },
    "HINTMSG_DEATTACHFROM": {
        "name": "HINTMSG_DEATTACHFROM",
        "type": 2,
        "value": "532",
        "desc": "请选择要取除超量素材的怪兽"
    },
    "HINTMSG_LMATERIAL": {
        "name": "HINTMSG_LMATERIAL",
        "type": 2,
        "value": "533",
        "desc": "请选择要作为连接素材的卡"
    },
    "HINTMSG_ATTACKTARGET": {
        "name": "HINTMSG_ATTACKTARGET",
        "type": 2,
        "value": "549",
        "desc": "请选择攻击的对象"
    },
    "HINTMSG_EFFECT": {
        "name": "HINTMSG_EFFECT",
        "type": 2,
        "value": "550",
        "desc": "请选择要发动的效果"
    },
    "HINTMSG_TARGET": {
        "name": "HINTMSG_TARGET",
        "type": 2,
        "value": "551",
        "desc": "请选择效果的对象"
    },
    "HINTMSG_COIN": {
        "name": "HINTMSG_COIN",
        "type": 2,
        "value": "552",
        "desc": "请选择硬币的正反面"
    },
    "HINTMSG_DICE": {
        "name": "HINTMSG_DICE",
        "type": 2,
        "value": "553",
        "desc": "请选择骰子的结果"
    },
    "HINTMSG_CARDTYPE": {
        "name": "HINTMSG_CARDTYPE",
        "type": 2,
        "value": "554",
        "desc": "请选择一个种类"
    },
    "HINTMSG_OPTION": {
        "name": "HINTMSG_OPTION",
        "type": 2,
        "value": "555",
        "desc": "请选择一个选项"
    },
    "HINTMSG_RESOLVEEFFECT": {
        "name": "HINTMSG_RESOLVEEFFECT",
        "type": 2,
        "value": "556",
        "desc": "请选择要发动/处理的效果"
    },
    "HINTMSG_SELECT": {
        "name": "HINTMSG_SELECT",
        "type": 2,
        "value": "560",
        "desc": "请选择"
    },
    "HINTMSG_POSITION": {
        "name": "HINTMSG_POSITION",
        "type": 2,
        "value": "561",
        "desc": "请选择表示形式"
    },
    "HINTMSG_ATTRIBUTE": {
        "name": "HINTMSG_ATTRIBUTE",
        "type": 2,
        "value": "562",
        "desc": "请选择要宣言的属性"
    },
    "HINTMSG_RACE": {
        "name": "HINTMSG_RACE",
        "type": 2,
        "value": "563",
        "desc": "请选择要宣言的种族"
    },
    "HINTMSG_CODE": {
        "name": "HINTMSG_CODE",
        "type": 2,
        "value": "564",
        "desc": "请宣言一个卡名"
    },
    "HINGMSG_NUMBER": {
        "name": "HINGMSG_NUMBER",
        "type": 2,
        "value": "565",
        "desc": "请选择一个数字"
    },
    "HINGMSG_LVRANK": {
        "name": "HINGMSG_LVRANK",
        "type": 2,
        "value": "567",
        "desc": "请宣言一个等级"
    },
    "HINTMSG_RESOLVECARD": {
        "name": "HINTMSG_RESOLVECARD",
        "type": 2,
        "value": "568",
        "desc": "请选择要处理效果的卡"
    },
    "HINTMSG_ZONE": {
        "name": "HINTMSG_ZONE",
        "type": 2,
        "value": "569",
        "desc": "请选择[%ls]的位置"
    },
    "HINTMSG_DISABLEZONE": {
        "name": "HINTMSG_DISABLEZONE",
        "type": 2,
        "value": "570",
        "desc": "请选择要变成不能使用的卡片区域"
    },
    "HINTMSG_TOZONE": {
        "name": "HINTMSG_TOZONE",
        "type": 2,
        "value": "571",
        "desc": "请选择要移动到的位置"
    },
    "HINTMSG_COUNTER": {
        "name": "HINTMSG_COUNTER",
        "type": 2,
        "value": "572",
        "desc": "请选择要放置指示物的卡"
    },
    "SELECT_HEADS": {
        "name": "SELECT_HEADS",
        "type": 2,
        "value": "60",
        "desc": "正面"
    },
    "SELECT_TAILS": {
        "name": "SELECT_TAILS",
        "type": 2,
        "value": "61",
        "desc": "反面"
    },
    "TIMING_DRAW_PHASE": {
        "name": "TIMING_DRAW_PHASE",
        "type": 2,
        "value": "0x1",
        "desc": "抽卡阶段时点"
    },
    "TIMING_STANDBY_PHASE": {
        "name": "TIMING_STANDBY_PHASE",
        "type": 2,
        "value": "0x2",
        "desc": "准备阶段时点"
    },
    "TIMING_MAIN_END": {
        "name": "TIMING_MAIN_END",
        "type": 2,
        "value": "0x4",
        "desc": "主要阶段结束时点"
    },
    "TIMING_BATTLE_START": {
        "name": "TIMING_BATTLE_START",
        "type": 2,
        "value": "0x8",
        "desc": "战斗阶段开始时点"
    },
    "TIMING_BATTLE_END": {
        "name": "TIMING_BATTLE_END",
        "type": 2,
        "value": "0x10",
        "desc": "战斗阶段结束时点"
    },
    "TIMING_END_PHASE": {
        "name": "TIMING_END_PHASE",
        "type": 2,
        "value": "0x20",
        "desc": "结束阶段时点"
    },
    "TIMING_SUMMON": {
        "name": "TIMING_SUMMON",
        "type": 2,
        "value": "0x40",
        "desc": "召唤时点"
    },
    "TIMING_SPSUMMON": {
        "name": "TIMING_SPSUMMON",
        "type": 2,
        "value": "0x80",
        "desc": "特殊召唤时点"
    },
    "TIMING_FLIPSUMMON": {
        "name": "TIMING_FLIPSUMMON",
        "type": 2,
        "value": "0x100",
        "desc": "翻转召唤时点"
    },
    "TIMING_MSET": {
        "name": "TIMING_MSET",
        "type": 2,
        "value": "0x200",
        "desc": "放置怪兽时点"
    },
    "TIMING_SSET": {
        "name": "TIMING_SSET",
        "type": 2,
        "value": "0x400",
        "desc": "放置魔陷时点"
    },
    "TIMING_POS_CHANGE": {
        "name": "TIMING_POS_CHANGE",
        "type": 2,
        "value": "0x800",
        "desc": "表示形式变更时点"
    },
    "TIMING_ATTACK": {
        "name": "TIMING_ATTACK",
        "type": 2,
        "value": "0x1000",
        "desc": "攻击宣言时点"
    },
    "TIMING_DAMAGE_STEP": {
        "name": "TIMING_DAMAGE_STEP",
        "type": 2,
        "value": "0x2000",
        "desc": "伤害步骤时点"
    },
    "TIMING_DAMAGE_CAL": {
        "name": "TIMING_DAMAGE_CAL",
        "type": 2,
        "value": "0x4000",
        "desc": "伤害计算时点"
    },
    "TIMING_CHAIN_END": {
        "name": "TIMING_CHAIN_END",
        "type": 2,
        "value": "0x8000",
        "desc": "连锁结束时点"
    },
    "TIMING_DRAW": {
        "name": "TIMING_DRAW",
        "type": 2,
        "value": "0x10000",
        "desc": "抽卡时点（不是抽卡阶段"
    },
    "TIMING_DAMAGE": {
        "name": "TIMING_DAMAGE",
        "type": 2,
        "value": "0x20000",
        "desc": "造成伤害时点"
    },
    "TIMING_RECOVER": {
        "name": "TIMING_RECOVER",
        "type": 2,
        "value": "0x40000",
        "desc": "回复时点"
    },
    "TIMING_DESTROY": {
        "name": "TIMING_DESTROY",
        "type": 2,
        "value": "0x80000",
        "desc": "破坏时点"
    },
    "TIMING_REMOVE": {
        "name": "TIMING_REMOVE",
        "type": 2,
        "value": "0x100000",
        "desc": "除外时点"
    },
    "TIMING_TOHAND": {
        "name": "TIMING_TOHAND",
        "type": 2,
        "value": "0x200000",
        "desc": "加入手牌时点（检索、回收等）"
    },
    "TIMING_TODECK": {
        "name": "TIMING_TODECK",
        "type": 2,
        "value": "0x400000",
        "desc": "回卡组时点"
    },
    "TIMING_TOGRAVE": {
        "name": "TIMING_TOGRAVE",
        "type": 2,
        "value": "0x800000",
        "desc": "进墓地时点"
    },
    "TIMING_BATTLE_PHASE": {
        "name": "TIMING_BATTLE_PHASE",
        "type": 2,
        "value": "0x1000000",
        "desc": "战斗阶段时点"
    },
    "TIMING_EQUIP": {
        "name": "TIMING_EQUIP",
        "type": 2,
        "value": "0x2000000",
        "desc": "装备时点"
    },
    "TIMING_BATTLE_STEP_END": {
        "name": "TIMING_BATTLE_STEP_END",
        "type": 2,
        "value": "0x4000000",
        "desc": "戰鬥步驟結束時"
    },
    "TIMING_BATTLED": {
        "name": "TIMING_BATTLED",
        "type": 2,
        "value": "0x8000000",
        "desc": "伤害计算后时点"
    },
    "TIMINGS_CHECK_MONSTER": {
        "name": "TIMINGS_CHECK_MONSTER",
        "type": 2,
        "value": "0x1c0",
        "desc": "怪兽正面上场"
    },
    "GLOBALFLAG_DECK_REVERSE_CHECK": {
        "name": "GLOBALFLAG_DECK_REVERSE_CHECK",
        "type": 2,
        "value": "0x1",
        "desc": "卡组翻转标记"
    },
    "GLOBALFLAG_BRAINWASHING_CHECK": {
        "name": "GLOBALFLAG_BRAINWASHING_CHECK",
        "type": 2,
        "value": "0x2",
        "desc": "洗脑解除标记"
    },
    "GLOBALFLAG_SCRAP_CHIMERA": {
        "name": "GLOBALFLAG_SCRAP_CHIMERA",
        "type": 2,
        "value": "0x4",
        "desc": "废铁奇美拉标记"
    },
    "GLOBALFLAG_DELAYED_QUICKEFFECT": {
        "name": "GLOBALFLAG_DELAYED_QUICKEFFECT",
        "type": 2,
        "value": "0x8",
        "desc": "N/A"
    },
    "GLOBALFLAG_DETACH_EVENT": {
        "name": "GLOBALFLAG_DETACH_EVENT",
        "type": 2,
        "value": "0x10",
        "desc": "EVENT_DETACH_MATERIAL"
    },
    "GLOBALFLAG_MUST_BE_SMATERIAL": {
        "name": "GLOBALFLAG_MUST_BE_SMATERIAL",
        "type": 2,
        "value": "0x20",
        "desc": "必须作为同调素材（波动龙 声子龙）"
    },
    "GLOBALFLAG_SPSUMMON_COUNT": {
        "name": "GLOBALFLAG_SPSUMMON_COUNT",
        "type": 2,
        "value": "0x40",
        "desc": "玩家的特殊召唤次数限制"
    },
    "GLOBALFLAG_XMAT_COUNT_LIMIT": {
        "name": "GLOBALFLAG_XMAT_COUNT_LIMIT",
        "type": 2,
        "value": "0x80",
        "desc": "超量素材数量限制标记（光天使 天座）"
    },
    "GLOBALFLAG_SELF_TOGRAVE": {
        "name": "GLOBALFLAG_SELF_TOGRAVE",
        "type": 2,
        "value": "0x100",
        "desc": "不入連鎖的送墓檢查(EFFECT_SELF_TOGRAVE)"
    },
    "GLOBALFLAG_SPSUMMON_ONCE": {
        "name": "GLOBALFLAG_SPSUMMON_ONCE",
        "type": 2,
        "value": "0x200",
        "desc": "1回合只能特殊召喚1次(Card.SetSPSummonOnce())"
    },
    "GLOBALFLAG_TUNE_MAGICIAN": {
        "name": "GLOBALFLAG_TUNE_MAGICIAN",
        "type": 2,
        "value": "0x400",
        "desc": "超量素材检查标记（调弦之魔术师）"
    },
    "EFFECT_COUNT_CODE_OATH": {
        "name": "EFFECT_COUNT_CODE_OATH",
        "type": 2,
        "value": "0x10000000",
        "desc": "发动次数限制(誓约次数, 发动被无效不计数)"
    },
    "EFFECT_COUNT_CODE_DUEL": {
        "name": "EFFECT_COUNT_CODE_DUEL",
        "type": 2,
        "value": "0x20000000",
        "desc": "决斗中使用次数"
    },
    "EFFECT_COUNT_CODE_SINGLE": {
        "name": "EFFECT_COUNT_CODE_SINGLE",
        "type": 2,
        "value": "0x1",
        "desc": "同一张卡的多个效果公共使用次数"
    },
    "DUEL_TEST_MODE": {
        "name": "DUEL_TEST_MODE",
        "type": 2,
        "value": "0x01",
        "desc": "测试模式(目前暫無)"
    },
    "DUEL_ATTACK_FIRST_TURN": {
        "name": "DUEL_ATTACK_FIRST_TURN",
        "type": 2,
        "value": "0x02",
        "desc": "第一回合可以攻击(用于残局)"
    },
    "DUEL_NO_CHAIN_HINT": {
        "name": "DUEL_NO_CHAIN_HINT",
        "type": 2,
        "value": "0x04",
        "desc": "N/A"
    },
    "DUEL_OBSOLETE_RULING": {
        "name": "DUEL_OBSOLETE_RULING",
        "type": 2,
        "value": "0x08",
        "desc": "使用舊規則"
    },
    "DUEL_PSEUDO_SHUFFLE": {
        "name": "DUEL_PSEUDO_SHUFFLE",
        "type": 2,
        "value": "0x10",
        "desc": "不洗牌"
    },
    "DUEL_TAG_MODE": {
        "name": "DUEL_TAG_MODE",
        "type": 2,
        "value": "0x20",
        "desc": "双打PP"
    },
    "DUEL_SIMPLE_AI": {
        "name": "DUEL_SIMPLE_AI",
        "type": 2,
        "value": "0x40",
        "desc": "AI(用于残局)"
    },
    "ACTIVITY_SUMMON": {
        "name": "ACTIVITY_SUMMON",
        "type": 2,
        "value": "1"
    },
    "ACTIVITY_NORMALSUMMON": {
        "name": "ACTIVITY_NORMALSUMMON",
        "type": 2,
        "value": "2"
    },
    "ACTIVITY_SPSUMMON": {
        "name": "ACTIVITY_SPSUMMON",
        "type": 2,
        "value": "3"
    },
    "ACTIVITY_FLIPSUMMON": {
        "name": "ACTIVITY_FLIPSUMMON",
        "type": 2,
        "value": "4"
    },
    "ACTIVITY_ATTACK": {
        "name": "ACTIVITY_ATTACK",
        "type": 2,
        "value": "5"
    },
    "ACTIVITY_BATTLE_PHASE": {
        "name": "ACTIVITY_BATTLE_PHASE",
        "type": 2,
        "value": "6",
        "desc": "not available in custom counter"
    },
    "ACTIVITY_CHAIN": {
        "name": "ACTIVITY_CHAIN",
        "type": 2,
        "value": "7",
        "desc": "only available in custom counter"
    },
    "CARD_MARINE_DOLPHIN": {
        "name": "CARD_MARINE_DOLPHIN",
        "type": 2,
        "value": "78734254",
        "desc": "海洋海豚"
    },
    "CARD_TWINKLE_MOSS": {
        "name": "CARD_TWINKLE_MOSS",
        "type": 2,
        "value": "13857930",
        "desc": "光輝苔蘚"
    }
}